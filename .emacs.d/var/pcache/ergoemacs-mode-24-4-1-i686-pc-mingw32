;; -*- coding: utf-8-emacs -*-
;; Object ergoemacs-mode-24-4-1-i686-pc-mingw32
;; EIEIO PERSISTENT OBJECT
(pcache-repository "ergoemacs-mode-24-4-1-i686-pc-mingw32"
  :file "ergoemacs-mode-24-4-1-i686-pc-mingw32"
  :version "0.4"
  :entries #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-require [object pcache-entry "pcache-entry" 1467915332.71 7776000 ((persistent-soft nil nil nil) (undo-tree nil nil nil)) nil] nil [object pcache-entry "pcache-entry" 1467915332.788 7776000 nil nil] ergoemacs-component-hash [object pcache-entry "pcache-entry" 1467915332.726 7776000 #s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8 data ("undo-tree" [cl-struct-ergoemacs-component-struct "undo-tree" (:name "undo-tree" :description "undo-tree" :ensure t :ergoemacs-require undo-tree :package-name undo-tree :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil ((global-undo-tree-mode (lambda nil 1) nil)) nil (meta) ([apps] [menu] [27]) undo-tree nil t "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "persistent-soft" [cl-struct-ergoemacs-component-struct "persistent-soft" (:name "persistent-soft" :description "persistent-soft" :ensure t :ergoemacs-require persistent-soft :package-name persistent-soft :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) persistent-soft nil t "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "standard-vars" [cl-struct-ergoemacs-component-struct "standard-vars" (:name "standard-vars" :description "Enabled/changed variables/modes" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil ((fancy-about-text (lambda nil (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
")))) nil) (fancy-startup-text (lambda nil (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" "
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
")))) nil) (initial-scratch-message (lambda nil (substitute-command-keys ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with \\[find-file],
;; then enter the text in that file's own buffer.")) nil) (scroll-error-top-bottom (lambda nil t) nil) (ido-vertical-define-keys (lambda nil (quote C-n-C-p-up-down-left-right)) nil) (org-special-ctrl-a/e (lambda nil t) nil) (set-mark-command-repeat-pop (lambda nil t) nil) (org-support-shift-select (lambda nil t) nil) (org-CUA-compatible (lambda nil t) nil) (dirtrack-directory-change-hook ergoemacs-shell-here-directory-change-hook (t nil nil)) (kill-buffer-hook ergoemacs-save-buffer-to-recently-closed (t nil nil)) (shell-mode-hook ergoemacs-shell-here-hook (t nil nil)) (eshell-post-command-hook ergoemacs-shell-here-directory-change-hook (t nil nil)) (shift-select-mode (lambda nil t) nil) (delete-selection-mode (lambda nil 1) nil) (recentf-menu-items-for-commands (lambda nil (list ["Open Last Closed" ergoemacs-open-last-closed :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Cleanup list" recentf-cleanup :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Edit list..." recentf-edit-list :help "Manually remove files from the recent list" :active t] ["Save list now" recentf-save-list :help "Save the list of recently opened files now" :active t] ["Options..." (customize-group "recentf") :help "Customize recently opened files menu and options" :active t])) nil) (recentf-menu-before (lambda nil "Close") nil) (recentf-mode (lambda nil (if noninteractive -1 1)) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "save-options-on-exit" (lambda nil "Save emacs options on exit" (ergoemacs-component-struct--create-component (quote (:name "save-options-on-exit" :description "Save emacs options on exit")) (quote (lambda nil (ergoemacs-component-struct--set (quote kill-emacs-hook) (quote ergoemacs-exit-customize-save-customized) (list t nil nil)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "standard-fixed" [cl-struct-ergoemacs-component-struct "standard-fixed" (:name "standard-fixed" :description "Standard Fixed Shortcuts" :variable-reg nil :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (M-S-prior . backward-page) (M-S-next . forward-page) (25 . ergoemacs-redo) (24 keymap (2 . ibuffer) (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (12 . goto-line) (67108960 . other-frame) (33554455 . delete-frame) (33554438 . occur) (C-S-prior . ergoemacs-previous-emacs-buffer) (C-S-next . ergoemacs-next-emacs-buffer) (67108927 . info) (67108925 . text-scale-increase) (C-prior . ergoemacs-previous-user-buffer) (C-pause . kill-compilation) (C-next . ergoemacs-next-user-buffer) (67108912 . ergoemacs-text-scale-normal-size) (67108911 . info) (67108910 . keyboard-quit) (67108909 . text-scale-decrease) (67108907 . text-scale-increase) (S-mouse-1 . ignore) (S-down-mouse-1 . mouse-save-then-kill) (M-f4 . ergoemacs-delete-frame) (18 . revert-buffer) (f5 . revert-buffer) (M-down . ergoemacs-forward-block) (M-up . ergoemacs-backward-block) (C-right . forward-word) (C-left . backward-word) (C-end . end-of-buffer) (C-home . beginning-of-buffer) (end . move-end-of-line) (home . move-beginning-of-line) (C-delete . kill-word) (27 keymap (S-prior . backward-page) (S-next . forward-page) (f4 . ergoemacs-delete-frame) (down . ergoemacs-forward-block) (up . ergoemacs-backward-block) (delete . kill-word)) (M-delete . kill-word) (delete . delete-char) (33554446 . make-frame-command) (22 . ergoemacs-paste) (S-insert . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle) (C-insert . ergoemacs-copy-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (S-delete . ergoemacs-cut-line-or-region) (33554458 . ergoemacs-redo) (26 . undo) (1 . mark-whole-buffer) (16 . ergoemacs-print-buffer-confirm) (33554451 . write-file) (19 . save-buffer) (6 . isearch-forward) (23 . ergoemacs-close-current-buffer) (33554452 . ergoemacs-open-last-closed) (33554447 . ergoemacs-open-in-external-app) (15 . find-file) (14 . ergoemacs-new-empty-buffer) (tool-bar keymap (kill-buffer . ergoemacs-close-current-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) standard-fixed us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (undo-tree-map (keymap (27 keymap (95)) (67108927)) org-mode-map (keymap (22 . ergoemacs-org-yank) (M-right . ergoemacs-org-metaright) (M-left . ergoemacs-org-metaleft) (M-up . ergoemacs-org-metaup) (27 keymap (118 . ergoemacs-org-yank) (right . ergoemacs-org-metaright) (left . ergoemacs-org-metaleft) (up . ergoemacs-org-metaup) (down . ergoemacs-org-metadown)) (M-down . ergoemacs-org-metadown) (C-return . ergoemacs-org-insert-heading-respect-content)) browse-kill-ring-mode-map (keymap (deletechar . browse-kill-ring-delete) (6 . browse-kill-ring-search-forward)) log-edit-mode-map (keymap (remap keymap (save-buffer . log-edit-done))) eshell-mode-map (keymap (home . eshell-bol)) comint-mode-map (keymap (home . comint-bol)) helm-map (keymap (26) (23 . helm-keyboard-quit) (remap keymap (mark-whole-buffer . helm-mark-all))) isearch-mode-map (keymap (22 . ergoemacs-paste) (3 . isearch-yank-word-or-char) (33554454 . ergoemacs-paste-cycle) (S-insert . ergoemacs-paste) (27 keymap (118 . ergoemacs-paste) (99 . isearch-yank-word-or-char) (6 . isearch-occur)) (33554438 . isearch-occur)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-mode (keymap (remap keymap (ergoemacs-apropos-user-options . apropos-user-options))) icicle-ido-like-mode (keymap (remap keymap (ergoemacs-apropos-user-options . apropos-user-options))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-mode nil icicle-ido-like-mode nil)) nil nil ((global-map [25] (undo-tree-redo redo)) (global-map [33554458] (undo-tree-redo redo))) nil nil ([24 107] [24 104] [24 23] [24 19] [19] [24 6]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "tab-indents-region" [cl-struct-ergoemacs-component-struct "tab-indents-region" (:name "tab-indents-region" :description "Tab indents selected region" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (mark-active (keymap (9 . indent-region)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (mark-active nil)) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "fixed-bold-italic" [cl-struct-ergoemacs-component-struct "fixed-bold-italic" (:name "fixed-bold-italic" :description "Fixed keys for bold and italic" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-mode-map (keymap (kp-tab . org-cycle) (tab . org-cycle) (2 . ergoemacs-org-bold)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "backspace-is-back" [cl-struct-ergoemacs-component-struct "backspace-is-back" (:name "backspace-is-back" :description "Backspace is back, as in browsers..." :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (Info-mode-map (keymap (27 keymap (backspace . Info-history-forward)) (M-backspace . Info-history-forward) (S-backspace . Info-history-forward) (backspace . Info-history-back)) help-mode-map (keymap (S-backspace . help-go-forward) (backspace . help-go-back)) eww-mode-map (keymap (S-backspace . eww-forward-url) (backspace . eww-back-url)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "fixed-newline" [cl-struct-ergoemacs-component-struct "fixed-newline" (:name "fixed-newline" :description "Newline and indent" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (13 . electric-newline-and-maybe-indent)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) fixed-newline us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (helm-map (keymap (M-S-return . "C-u M-RET") (M-return . helm-execute-persistent-action) (27 keymap (S-return . "C-u M-RET") (33554445 . "C-u M-RET") (return . helm-execute-persistent-action) (13 . helm-execute-persistent-action))) helm-read-file-map (keymap (127 . ergoemacs-helm-ff-backspace) (M-return . ergoemacs-helm-ff-execute-dired-dir) (27 keymap (return . ergoemacs-helm-ff-execute-dired-dir) (13 . ergoemacs-helm-ff-execute-dired-dir)) (return . ergoemacs-helm-ff-persistent-expand-dir) (13 . ergoemacs-helm-ff-persistent-expand-dir) (remap keymap (ergoemacs-eshell-here . helm-ff-run-switch-to-eshell) (eshell . helm-ff-run-switch-to-eshell))) helm-find-files-map (keymap (M-return . ergoemacs-helm-ff-execute-dired-dir) (27 keymap (return . ergoemacs-helm-ff-execute-dired-dir) (13 . ergoemacs-helm-ff-execute-dired-dir)) (return . ergoemacs-helm-ff-persistent-expand-dir) (13 . ergoemacs-helm-ff-persistent-expand-dir) (127 . ergoemacs-helm-ff-backspace) (remap keymap (ergoemacs-eshell-here . helm-ff-run-switch-to-eshell) (eshell . helm-ff-run-switch-to-eshell))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "fn-keys" [cl-struct-ergoemacs-component-struct "fn-keys" (:name "fn-keys" :description "Function Keys" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (f4 . ergoemacs-paste) (f2 . ergoemacs-cut-line-or-region) (f8 keymap (f9 . highlight-symbol-query-replace) (f8 . highlight-symbol-at-point) (46 . isearch-forward-symbol-at-point) (95 . isearch-forward-symbol) (119 . isearch-forward-word) (104 keymap (119 . hi-lock-write-interactive-patterns) (102 . hi-lock-find-patterns) (117 . unhighlight-regexp) (46 . highlight-symbol-at-point) (108 . highlight-lines-matching-regexp) (112 . highlight-phrase) (114 . highlight-regexp)) (111 . occur)) (f6 . ergoemacs-unchorded-alt-modal) (f3 . ergoemacs-copy-line-or-region) (f12 . next-line) (f11 . previous-line) (S-f3 . ergoemacs-toggle-letter-case) (M-f5 . ergoemacs-redo) (M-f3 . ergoemacs-copy-all) (27 keymap (f5 . ergoemacs-redo) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all)) (M-f2 . ergoemacs-cut-all) (C-f9 . highlight-symbol-next) (C-f8 . highlight-symbol-prev) (C-f5 . ergoemacs-redo) (C-f4 . ergoemacs-paste-cycle) (C-f3 . ergoemacs-copy-all) (C-f2 . ergoemacs-cut-all) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) fn-keys us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (compilation-mode-map (keymap (f12 . next-error) (f11 . previous-error)) browse-kill-ring-mode-map (keymap (f12 . browse-kill-ring-next) (f11 . browse-kill-ring-previous)) comint-mode-map (keymap (M-f12 . comint-next-matching-input) (S-f12 . comint-next-matching-input) (27 keymap (f12 . comint-next-matching-input) (f11 . comint-previous-matching-input)) (M-f11 . comint-previous-matching-input) (S-f11 . comint-previous-matching-input) (f12 . comint-next-input) (f11 . comint-previous-input)) log-edit-mode-map (keymap (M-f12 . log-edit-next-comment) (S-f12 . log-edit-next-comment) (27 keymap (f12 . log-edit-next-comment) (f11 . log-edit-previous-comment)) (M-f11 . log-edit-previous-comment) (S-f11 . log-edit-previous-comment) (f12 . log-edit-next-comment) (f11 . log-edit-previous-comment)) eshell-mode-map (keymap (M-f12 . eshell-next-matching-input-from-input) (S-f12 . eshell-next-matching-input-from-input) (27 keymap (f12 . eshell-next-matching-input-from-input) (f11 . eshell-previous-matching-input-from-input)) (M-f11 . eshell-previous-matching-input-from-input) (S-f11 . eshell-previous-matching-input-from-input) (f12 . eshell-next-matching-input-from-input) (f11 . eshell-previous-matching-input-from-input)) isearch-mode-map (keymap (S-f12 . isearch-ring-retreat) (S-f11 . isearch-ring-advance) (f12 . isearch-ring-advance) (f11 . isearch-ring-retreat) (S-f3 . isearch-toggle-regexp)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (S-f12 . previous-history-element) (M-f12 . icicle-insert-history-element) (S-f11 . next-history-element) (f12 . next-history-element) (27 keymap (f12 . icicle-insert-history-element) (f11 . icicle-insert-history-element)) (M-f11 . icicle-insert-history-element) (f11 . previous-history-element)))) iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (next-history-element . iswitchb-next-match) (previous-history-element . iswitchb-prev-match))))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-minibuffer-setup-hook (:command-loop-unsupported-p t) iswitchb-define-mode-map-hook (:modify-map t :always t))) nil nil ((global-map [M-f5] (undo-tree-redo redo)) (global-map [C-f5] (undo-tree-redo redo))) nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "f2-edit" [cl-struct-ergoemacs-component-struct "f2-edit" (:name "f2-edit" :description "Have <f2> edit" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--parent-map (keymap (f2 . ergoemacs-command-loop--force-universal-argument)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "backspace-del-seq" [cl-struct-ergoemacs-component-struct "backspace-del-seq" (:name "backspace-del-seq" :description "Backspace deletes last key entered in command sequence" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--parent-map (keymap (127 . ergoemacs-command-loop--force-undo-last)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "help" [cl-struct-ergoemacs-component-struct "help" (:name "help" :description "Help changes for ergoemacs-mode" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (f1 keymap (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (8 keymap (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) help us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-char" [cl-struct-ergoemacs-component-struct "move-char" (:name "move-char" :description "Movement by Characters & Set Mark" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (C-M-i . backward-paragraph) (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (C-i . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-char us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (browse-kill-ring-mode-map (keymap (27 keymap (102 . browse-kill-ring-delete) (107 . browse-kill-ring-forward) (105 . browse-kill-ring-backward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (forward-char . iswitchb-next-match) (backward-char . iswitchb-prev-match))))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook nil)) nil nil nil nil ("5.7.5") ([4] [67108896] [14] [16] [6] [2]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-word" [cl-struct-ergoemacs-component-struct "move-word" (:name "move-word" :description "Moving around and deleting words" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-word us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217828] [134217830] [134217826]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-sexp" (lambda nil "Instead of moving around by words, use sexps." (ergoemacs-component-struct--create-component (quote (:name "move-sexp" :description "Instead of moving around by words, use sexps.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap forward-word] (quote forward-sexp)) (ergoemacs-component-struct--define-key (quote global-map) [remap backward-word] (quote backward-sexp)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "move-paragraph" [cl-struct-ergoemacs-component-struct "move-paragraph" (:name "move-paragraph" :description "Move by Paragraph" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (79 . forward-paragraph) (85 . backward-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-paragraph us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217853] [134217851]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-line" [cl-struct-ergoemacs-component-struct "move-line" (:name "move-line" :description "Move by Line" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (72 . move-end-of-line) (104 . move-beginning-of-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-line us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (eshell-mode-map (keymap (remap keymap (move-beginning-of-line . eshell-bol))) comint-mode-map (keymap (remap keymap (move-beginning-of-line . comint-bol))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([5] [1]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-and-transpose-lines" (lambda nil "Move Current line/selection down or up with Alt+up or Alt+down" (ergoemacs-component-struct--create-component (quote (:name "move-and-transpose-lines" :description "Move Current line/selection down or up with Alt+up or Alt+down")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [M-up] (quote ergoemacs-move-text-up)) (ergoemacs-component-struct--define-key (quote global-map) [M-down] (quote ergoemacs-move-text-down)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "alt-backspace-is-undo" (lambda nil "Alt+Backspace is Undo" (ergoemacs-component-struct--create-component (quote (:name "alt-backspace-is-undo" :description "Alt+Backspace is Undo")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-backspace>") (quote undo)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "move-page" [cl-struct-ergoemacs-component-struct "move-page" (:name "move-page" :description "Move by Page" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (75 . scroll-up-command) (73 . scroll-down-command) (11 . scroll-other-window) (33554441 . scroll-other-window-down)) (C-M-I . scroll-other-window-down) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-page us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217750] [22] [134217846]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-buffer" [cl-struct-ergoemacs-component-struct "move-buffer" (:name "move-buffer" :description "Move Beginning/End of buffer" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (78 . ergoemacs-end-or-beginning-of-buffer) (110 . ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-buffer us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil ("5.7.5") ([134217788] [134217790]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-bracket" [cl-struct-ergoemacs-component-struct "move-bracket" (:name "move-bracket" :description "Move By Bracket" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (M-right . ergoemacs-forward-close-bracket) (M-left . ergoemacs-backward-open-bracket) (27 keymap (right . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (76 . ergoemacs-forward-close-bracket) (74 . ergoemacs-backward-open-bracket)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-bracket us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "copy" [cl-struct-ergoemacs-component-struct "copy" (:name "copy" :description "Copy, Cut, Paste, Redo and Undo" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (25 . ergoemacs-redo) (33554458 . ergoemacs-redo) (26 . undo) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (27 keymap (122 . undo) (90 . undo) (88 . ergoemacs-cut-all) (67 . ergoemacs-copy-all) (86 . ergoemacs-paste-cycle) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) copy us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (33554454 . ergoemacs-paste-cycle) (22 . ergoemacs-paste) (27 keymap (86 . ergoemacs-paste-cycle) (118 . ergoemacs-paste) (99 . isearch-yank-word-or-char)) (3 . isearch-yank-word-or-char)) org-mode-map (keymap (remap keymap (ergoemacs-paste . ergoemacs-org-yank))) browse-kill-ring-mode-map (keymap (remap keymap (undo-tree-undo . browse-kill-ring-undo-other-window) (undo . browse-kill-ring-undo-other-window))) calc-mode-map (keymap (remap keymap (undo-tree-undo . calc-undo))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [25] (undo-tree-redo redo)) (global-map [33554458] (undo-tree-redo redo))) nil nil ([24 117] [67108911] [31] [134217849] [25] [134217847] [23]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "search" [cl-struct-ergoemacs-component-struct "search" (:name "search" :description "Search and Replace" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (37 . query-replace-regexp) (53 . query-replace) (89 . isearch-backward) (121 . isearch-forward)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) search us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (27 keymap (37 . dired-do-query-replace-regexp) (53 . dired-do-query-replace-regexp))) browse-kill-ring-mode-map (keymap (remap keymap (isearch-backward . browse-kill-ring-search-backward) (isearch-forward . browse-kill-ring-search-forward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil ("5.7.5") ([201326629] [134217765] [18] [19]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "search-reg" (lambda nil "Regular Expression Search/Replace" (ergoemacs-component-struct--create-component (quote (:name "search-reg" :description "Regular Expression Search/Replace")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-forward] (quote isearch-forward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-backward] (quote isearch-backward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-5") (quote query-replace-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") (quote query-replace)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "switch" [cl-struct-ergoemacs-component-struct "switch" (:name "switch" :description "Window/Frame/Tab Switching" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (36 . split-window-right) (52 . split-window-below) (50 . delete-window) (51 . delete-other-windows) (96 . ergoemacs-switch-to-next-frame) (126 . ergoemacs-switch-to-previous-frame) (83 . ergoemacs-move-cursor-previous-pane) (115 . ergoemacs-move-cursor-next-pane)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) switch us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil ("5.7.5") ([24 50] [24 51] [24 48] [24 49]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "execute" [cl-struct-ergoemacs-component-struct "execute" (:name "execute" :description "Execute Commands" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (65 . shell-command) (97 . execute-extended-command)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) execute us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217761] [134217848]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "misc" [cl-struct-ergoemacs-component-struct "misc" (:name "misc" :description "Misc Commands" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (98 . avy-goto-word-or-subword-1) (112 . recenter-top-bottom)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) misc us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([12]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "kill-line" [cl-struct-ergoemacs-component-struct "kill-line" (:name "kill-line" :description "Kill Line" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (71 . ergoemacs-kill-line-backward) (103 . kill-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) kill-line us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([11]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "text-transform" [cl-struct-ergoemacs-component-struct "text-transform" (:name "text-transform" :description "Text Transformation" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (113 . ergoemacs-compact-uncompact-block) (84 . flyspell-auto-correct-word) (116 . ergoemacs-call-keyword-completion) (47 . ergoemacs-toggle-letter-case) (63 . ergoemacs-toggle-camel-case) (119 . ergoemacs-shrink-whitespaces) (39 . comment-dwim)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) text-transform us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (27 keymap (47 . isearch-toggle-case-fold) (63 . isearch-toggle-regexp))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (ergoemacs-toggle-letter-case . iswitchb-toggle-regexp) (ergoemacs-toggle-camel-case . iswitchb-toggle-case))))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook nil)) nil nil nil nil nil ([134217787]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "select-items" [cl-struct-ergoemacs-component-struct "select-items" (:name "select-items" :description "Select Items" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (55 . ergoemacs-select-current-line) (54 . ergoemacs-select-current-block) (42 . ergoemacs-select-text-in-quote) (56 . ergoemacs-extend-selection) (33554464 . mark-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) select-items us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [134217770] (er/mark-inside-quotes)) (global-map [134217784] (er/expand-region))) nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "quit" [cl-struct-ergoemacs-component-struct "quit" (:name "quit" :description "Escape exits" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (escape . keyboard-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) quit us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (escape . isearch-abort)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-read-date-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (escape . minibuffer-keyboard-quit)))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-read-date-minibuffer-setup-hook nil)) nil nil nil nil ("5.3.7") nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "apps" [cl-struct-ergoemacs-component-struct "apps" (:name "apps" :description "General Apps Key Sequence" :just-first-keys (list [apps 104] [menu 104]) :bind ("<apps> '" ergoemacs-org-edit-src "<apps> 2" delete-window "<apps> 3" delete-other-windows "<apps> 4" split-window-vertically "<apps> 5" query-replace "<apps> <f2>" ergoemacs-cut-all "<apps> <f3>" ergoemacs-copy-all "<apps> <return>" execute-extended-command "<apps> RET" execute-extended-command "<apps> TAB" indent-region "<apps> SPC" set-mark-command "<apps> a" mark-whole-buffer "<apps> d" ("C-x" :ctl-to-alt) "<apps> f" ("C-c" :unchorded-ctl) "<apps> h" help-map "<apps> h '" ergoemacs-describe-current-theme "<apps> h 1" describe-function "<apps> h 2" describe-variable "<apps> h 3" describe-key "<apps> h 4" describe-char "<apps> h 5" man "<apps> h 7" ergoemacs-lookup-google "<apps> h 8" ergoemacs-lookup-wikipedia "<apps> h 9" ergoemacs-lookup-word-definition "<apps> h `" elisp-index-search "<apps> h o" ergoemacs-where-is-old-binding "<apps> h z" ergoemacs-clean "<apps> h C-z" ergoemacs-clean-library "<apps> h Z" ergoemacs-clean-nw "<apps> m" (kbd "C-c C-c") "<apps> s" save-buffer "<apps> C-s" write-file "<apps> o" find-file "<apps> g" ergoemacs-read-key--universal-argument "<apps> w" ergoemacs-close-current-buffer "<apps> x" ergoemacs-cut-line-or-region "<apps> c" ergoemacs-copy-line-or-region "<apps> v" ergoemacs-paste "<apps> b" (redo undo-tree-redo ergoemacs-redo) "<apps> t" switch-to-buffer "<apps> z" undo "<apps> r" goto-map) :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (menu keymap (114 keymap (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . ergoemacs-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (apps keymap (114 keymap (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . ergoemacs-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [apps 98] (undo-tree-redo redo))) nil nil nil nil nil (list [apps 104] [menu 104]) (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map t] "apps-toggle" [cl-struct-ergoemacs-component-struct "apps-toggle" (:name "apps-toggle" :description "Toggle States and applications" :just-first-keys (list [apps 105] [menu 105]) :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (menu keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (apps keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-toggle us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil (list [apps 105] [menu 105]) (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "apps-apps" [cl-struct-ergoemacs-component-struct "apps-apps" (:name "apps-apps" :description "Applications" :just-first-keys (list [apps 110] [menu 110]) :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (menu keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (apps keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-apps us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil (list [apps 110] [menu 110]) (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "apps-punctuation" [cl-struct-ergoemacs-component-struct "apps-punctuation" (:name "apps-punctuation" :description "Punctuation" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (menu keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (apps keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-punctuation us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "apps-swap" [cl-struct-ergoemacs-component-struct "apps-swap" (:name "apps-swap" :description "Apps/Menu swaps key sequence translations" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--parent-map (keymap (menu . ergoemacs-command-loop--swap-translation) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -536870768))) (apps . ergoemacs-command-loop--swap-translation)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "dired-to-wdired" [cl-struct-ergoemacs-component-struct "dired-to-wdired" (:name "dired-to-wdired" :description "C-c C-c enters wdired, <escape> exits." :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (3 keymap (3 . wdired-change-to-wdired-mode))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "dired-tab" [cl-struct-ergoemacs-component-struct "dired-tab" (:name "dired-tab" :description "TAB expands a directory." :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (9 . dired-maybe-insert-subdir)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "guru" (lambda nil "Unbind some commonly used keys such as <left> and <right> to get in the habit of using ergoemacs keybindings." (ergoemacs-component-struct--create-component (quote (:name "guru" :description "Unbind some commonly used keys such as <left> and <right> to get in the habit of using ergoemacs keybindings.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<next>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-next>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<prior>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-prior>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<home>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-home>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<end>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-end>") nil))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "no-backspace" (lambda nil "No Backspace!" (ergoemacs-component-struct--create-component (quote (:name "no-backspace" :description "No Backspace!")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<backspace>") nil))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "helm-remaps" [cl-struct-ergoemacs-component-struct "helm-remaps" (:name "helm-remaps" :description "Remaps for helm-mode" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (helm-mode (keymap (remap keymap (ac-isearch . ac-complete-with-helm) (info . helm-info-at-point) (occur . helm-occur) (eshell-pcomplete . helm-esh-pcomplete) (find-file . helm-find-files) (switch-to-buffer . helm-mini) (execute-extended-command . helm-M-x) (grep . helm-do-grep))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (helm-mode nil)) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "helm-switch-sources" (lambda nil "Ctrl+o switches multiple sources." (ergoemacs-component-struct--create-component (quote (:name "helm-switch-sources" :description "Ctrl+o switches multiple sources.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote helm-map) (kbd "C-o") (quote helm-next-source)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "helm-find-files" [cl-struct-ergoemacs-component-struct "helm-find-files" (:name "helm-find-files" :description "Helm find-files keymap." :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (helm-find-files-map (keymap (3 keymap (112 . helm-ff-run-switch-to-history)) (12 . helm-find-files-up-one-level)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "icy-reclaim" [cl-struct-ergoemacs-component-struct "icy-reclaim" (:name "icy-reclaim" :description "Reclaim some icicle key bindings." :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (delete . icicle-remove-candidate) (C-M-down . icicle-next-candidate-per-mode-help) (C-M-up . icicle-previous-candidate-per-mode-help) (C-M-end . icicle-help-on-next-prefix-candidate) (C-M-home . icicle-help-on-previous-prefix-candidate) (C-end . icicle-next-prefix-candidate-action) (C-home . icicle-previous-prefix-candidate-action) (C-M-next . icicle-help-on-next-apropos-candidate) (C-M-prior . icicle-help-on-previous-apropos-candidate) (C-next . icicle-next-apropos-candidate-action) (C-prior . icicle-previous-apropos-candidate-action) (27 keymap (C-down . icicle-next-candidate-per-mode-help) (C-up . icicle-previous-candidate-per-mode-help) (C-end . icicle-help-on-next-prefix-candidate) (C-home . icicle-help-on-previous-prefix-candidate) (C-next . icicle-help-on-next-apropos-candidate) (C-prior . icicle-help-on-previous-apropos-candidate) (67108877 . icicle-help-on-candidate) (63 . icicle-minibuffer-help) (42 . icicle-narrow-candidates))))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-minibuffer-setup-hook nil)) nil nil nil nil nil nil nil ((icicle-key-complete-keys-for-minibuffer (lambda nil (list (ergoemacs-translate--event-layout (read-kbd-macro "M-T")))) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "multiple-cursors-remaps" [cl-struct-ergoemacs-component-struct "multiple-cursors-remaps" (:name "multiple-cursors-remaps" :description "Multiple Cursors phi-search remaps" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (multiple-cursors-mode (keymap (remap keymap (isearch-backward . phi-search-backward) (isearch-forward . phi-search))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (multiple-cursors-mode nil)) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "ido-remaps" [cl-struct-ergoemacs-component-struct "ido-remaps" (:name "ido-remaps" :description "Remaps for ido-mode" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ido-mode (keymap (remap keymap (execute-extended-command . smex))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ido-mode nil)) nil nil nil nil nil nil nil ((smex-prompt-string (lambda nil (substitute-command-keys "\\[execute-extended-command] ")) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "ido-prev-next-instead-of-left-right" (lambda nil "In Ido use, Ergoemacs left and right for previous/next match." (ergoemacs-component-struct--create-component (quote (:name "ido-prev-next-instead-of-left-right" :description "In Ido use, Ergoemacs left and right for previous/next match.")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote ido-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap ido-magic-forward-char] (quote ido-next-match)) (ergoemacs-component-struct--define-key (quote global-map) [remap ido-magic-backward-char] (quote ido-prev-match))))))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "ergoemacs-remaps" [cl-struct-ergoemacs-component-struct "ergoemacs-remaps" (:name "ergoemacs-remaps" :description "Remaps for ergoemacs-mode" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (undo-tree-mode (keymap (remap keymap (undo . undo-tree-undo) (ergoemacs-redo . undo-tree-redo))) mark-active (keymap (9 . indent-region)) ergoemacs-mode (keymap (remap keymap (ergoemacs-print-buffer-confirm . pr-interface) (describe-mode . ergoemacs-describe-major-mode) (universal-argument . ergoemacs-command-loop--universal-argument) (shell . ergoemacs-shell-here) (powershell . ergoemacs-powershell-here) (eshell . ergoemacs-eshell-here) (revert-buffer . ergoemacs-revert-buffer) (keyboard-quit . ergoemacs-keyboard-quit))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (undo-tree-mode nil mark-active nil ergoemacs-mode nil)) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "ergoemacs-banish-shift" (lambda nil "Banish Shift Combinations with <apps> SPC" (ergoemacs-component-struct--create-component (quote (:name "ergoemacs-banish-shift" :description "Banish Shift Combinations with <apps> SPC" :variable-reg "")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC SPC") (kbd "_")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC RET") (kbd "-")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC '") (kbd "\"")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC ,") (kbd "<")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC -") (kbd "_")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC .") (kbd ">")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC /") (kbd "?")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC ;") (kbd ":")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC =") (kbd "+")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC \\") (kbd "|")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC `") (kbd "~")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 0") (kbd ")")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 1") (kbd "!")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 2") (kbd "@")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 3") (kbd "#")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 4") (kbd "$")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 5") (kbd "%")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 6") (kbd "^")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 7") (kbd "&")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 8") (kbd "*")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 9") (kbd "(")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC a") (kbd "A")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC b") (kbd "B")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC c") (kbd "C")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC d") (kbd "D")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC e") (kbd "E")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC f") (kbd "F")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC g") (kbd "G")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC h") (kbd "H")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC i") (kbd "I")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC j") (kbd "J")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC k") (kbd "K")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC l") (kbd "L")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC m") (kbd "M")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC n") (kbd "N")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC o") (kbd "O")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC p") (kbd "P")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC q") (kbd "Q")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC r") (kbd "R")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC s") (kbd "S")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC t") (kbd "T")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC u") (kbd "U")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC v") (kbd "V")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC w") (kbd "W")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC x") (kbd "X")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC y") (kbd "Y")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC z") (kbd "Z")))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "menu-bar-file" [cl-struct-ergoemacs-component-struct "menu-bar-file" (:name "menu-bar-file" :description "File menu" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-file us)))) (menu-bar keymap (file "File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In Explorer" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Command Prompt" ergoemacs-shell-here) (powershell-here menu-item "In PowerShell" ergoemacs-powershell-here :enable (fboundp (quote powershell))))) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs-menu menu-item "Quit" save-buffers-kill-emacs) "File"))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "menu-bar-edit" [cl-struct-ergoemacs-component-struct "menu-bar-edit" (:name "menu-bar-edit" :description "Edit menu" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-edit us)))) (menu-bar keymap (edit "Edit" keymap (undo) (redo) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit"))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "menu-bar-search" [cl-struct-ergoemacs-component-struct "menu-bar-search" (:name "menu-bar-search" :description "Search menu" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-search us)))) (menu-bar keymap (search "Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") (separator-packages)) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search"))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "menu-bar-view" [cl-struct-ergoemacs-component-struct "menu-bar-view" (:name "menu-bar-view" :description "View menu" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-view us)))) (menu-bar keymap (view "View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "menu-bar-languages" [cl-struct-ergoemacs-component-struct "menu-bar-languages" (:name "menu-bar-languages" :description "Languages menu" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-languages us)))) (menu-bar keymap (languages "Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (html-mode menu-item "Html" html-mode) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (lisp-mode menu-item "Lisp" lisp-mode) (lisp-interaction-mode menu-item "Lisp interaction" lisp-interaction-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode))) (S menu-item "S" (keymap (scheme-mode menu-item "Scheme" scheme-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "menu-bar-help" [cl-struct-ergoemacs-component-struct "menu-bar-help" (:name "menu-bar-help" :description "Help menu" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-help us)))) (menu-bar keymap (help-menu "?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?"))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "lvl0-theme" (lambda nil "Generated theme component for lvl0 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl0-theme" :description "Generated theme component for lvl0 theme")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-c <ergoemacs-timeout>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-insert>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-v") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-insert>") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-v") (quote ergoemacs-paste)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "lvl1-theme" (lambda nil "Generated theme component for lvl1 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl1-theme" :description "Generated theme component for lvl1 theme")) (quote (lambda nil)) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "lvl2-theme" (lambda nil "Generated theme component for lvl2 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl2-theme" :description "Generated theme component for lvl2 theme")) (quote (lambda nil)) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "join-line" (lambda nil "Join Line" (ergoemacs-component-struct--create-component (quote (:name "join-line" :description "Join Line")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-]") (quote delete-indentation)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-[") (quote ergoemacs-top-join-line)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "isearch-arrows" (lambda nil "Set arrow keys in isearch." (ergoemacs-component-struct--create-component (quote (:name "isearch-arrows" :description "Set arrow keys in isearch.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<up>") (quote isearch-ring-retreat)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<down>") (quote isearch-ring-advance)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<left>") (quote isearch-repeat-backward)) (ergoemacs-component-struct--define-key (quote isearch-mode-map) (kbd "<right>") (quote isearch-repeat-forward)))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "mode-line-major-mode-switch" [cl-struct-ergoemacs-component-struct "mode-line-major-mode-switch" (:name "mode-line-major-mode-switch" :description "Switch major modes by clicking mode-name." :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil ((ergoemacs-swap-major-modes-when-clicking-major-mode-name (lambda nil t) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "multiple-cursors" (lambda nil "Multiple Cursors" (ergoemacs-component-struct--create-component (quote (:name "multiple-cursors" :description "Multiple Cursors" :package-name multiple-cursors :bind (("M-*" mc/mark-next-like-this) ("M-&" mc/edit-lines)) :ensure t)) (quote (lambda nil)) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "avy" (lambda nil "Avy" (ergoemacs-component-struct--create-component (quote (:name "avy" :description "Avy" :package-name avy :bind ("M-," (quote avy-goto-word-or-subword-1)) :ensure t)) (quote (lambda nil)) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "expand-region" (lambda nil "Expand Region" (ergoemacs-component-struct--create-component (quote (:name "expand-region" :description "Expand Region" :package-name expand-region :bind (("M-8" er/expand-region) ("M-9" er/contract-region) ("M-*" . er/mark-inside-quotes)) :ensure t)) (quote (lambda nil)) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "standard-theme" [cl-struct-ergoemacs-component-struct "standard-theme" (:name "standard-theme" :description "Generated theme component for standard theme" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "reduction-theme" (lambda nil "Generated theme component for reduction theme" (ergoemacs-component-struct--create-component (quote (:name "reduction-theme" :description "Generated theme component for reduction theme")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-<") (quote zap-to-char)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-g") (quote kill-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-G") (quote ergoemacs-top-join-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-b") (quote ergoemacs-kill-line-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-B") (quote delete-indentation)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-.") (quote ergoemacs-end-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-m") (quote ergoemacs-beginning-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-y") (quote isearch-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-Y") (quote isearch-backward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-h") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-H") (quote isearch-forward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-a") (quote ergoemacs-move-cursor-previous-pane)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-;") (quote execute-extended-command)) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-T") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-I") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-K") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-U") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-O") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-N") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-A") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-J") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-L") nil))) "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el")) "quit::5.3.7" [cl-struct-ergoemacs-component-struct "quit" (:name "quit" :description "Escape exits" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (110 . keyboard-quit)) (escape . keyboard-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) quit us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (escape . isearch-abort)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-read-date-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (escape . minibuffer-keyboard-quit)))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-read-date-minibuffer-setup-hook nil)) nil nil nil "5.3.7" ("5.3.7") nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-buffer::5.7.5" [cl-struct-ergoemacs-component-struct "move-buffer" (:name "move-buffer" :description "Move Beginning/End of buffer" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (78 . ergoemacs-end-or-beginning-of-buffer) (110 . ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-buffer us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil "5.7.5" ("5.7.5") ([134217788] [134217790]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "move-char::5.7.5" [cl-struct-ergoemacs-component-struct "move-char" (:name "move-char" :description "Movement by Characters & Set Mark" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (67108896 . set-mark-command) (C-M-i . backward-paragraph) (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (C-i . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-char us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (browse-kill-ring-mode-map (keymap (27 keymap (102 . browse-kill-ring-delete) (107 . browse-kill-ring-forward) (105 . browse-kill-ring-backward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (forward-char . iswitchb-next-match) (backward-char . iswitchb-prev-match))))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook nil)) nil nil nil "5.7.5" ("5.7.5") ([4] [67108896] [14] [16] [6] [2]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "search::5.7.5" [cl-struct-ergoemacs-component-struct "search" (:name "search" :description "Search and Replace" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (58 . isearch-backward) (59 . isearch-forward) (37 . query-replace-regexp) (53 . query-replace) (89 . isearch-backward) (121 . isearch-forward)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) search us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (27 keymap (37 . dired-do-query-replace-regexp) (53 . dired-do-query-replace-regexp))) browse-kill-ring-mode-map (keymap (remap keymap (isearch-backward . browse-kill-ring-search-backward) (isearch-forward . browse-kill-ring-search-forward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil "5.7.5" ("5.7.5") ([201326629] [134217765] [18] [19]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil] "switch::5.7.5" [cl-struct-ergoemacs-component-struct "switch" (:name "switch" :description "Window/Frame/Tab Switching" :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") (keymap (27 keymap (48 . delete-window) (36 . split-window-right) (52 . split-window-below) (50 . delete-window) (51 . delete-other-windows) (96 . ergoemacs-switch-to-next-frame) (126 . ergoemacs-switch-to-previous-frame) (83 . ergoemacs-move-cursor-previous-pane) (115 . ergoemacs-move-cursor-next-pane)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) switch us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil "5.7.5" ("5.7.5") ([24 50] [24 51] [24 48] [24 49]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ()) global-map nil])) nil] ergoemacs-map--hash [object pcache-entry "pcache-entry" 1467915332.742 7776000 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (global-menu-cc1a9c480b5f2b7156fb87dc58b6d3c1 (keymap (keymap (help-menu "Help" keymap (emacs-tutorial menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs") (emacs-tutorial-language-specific menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)") (emacs-faq menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs") (emacs-news menu-item "Emacs News" view-emacs-news :help "New features of this version") (emacs-known-problems menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs") (emacs-manual-bug menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug") (send-emacs-bug-report menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers") (emacs-psychotherapist menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better") (sep1 "--") (search-documentation menu-item "Search Documentation" (keymap (emacs-terminology menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual") (lookup-subject-in-emacs-manual menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual") (lookup-subject-in-elisp-manual menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual") (lookup-key-in-manual menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key") (lookup-command-in-manual menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command") (sep1 "--") (find-commands-by-name menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp") (find-options-by-name menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp") (find-option-by-value menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp") (find-any-object-by-name menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp") (search-documentation-strings menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp") "Search Documentation")) (describe menu-item "Describe" (keymap (describe-mode menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode") (describe-key-1 menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item") (describe-function menu-item "Describe Function..." describe-function :help "Display documentation of function/command") (describe-variable menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option") (describe-face menu-item "Describe Face..." describe-face :help "Display the properties of a face") (describe-package menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package") (describe-current-display-table menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table") (list-keybindings menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)") (separator-desc-mule "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support))) (describe-input-method menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method") (describe-coding-system menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))) (describe-coding-system-briefly menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))) (mule-diag menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings") "Describe")) (emacs-manual menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features") (more-manuals menu-item "More Manuals" (keymap (emacs-lisp-intro menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming") (emacs-lisp-reference menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual") (other-manuals menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals") (lookup-subject-in-all-manuals menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals") (order-emacs-manuals menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation") (sep2 "--") (man menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries") "More Manuals")) (find-emacs-packages menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword") (external-packages menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs") (sep2 "--") (getting-new-versions menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs") (describe-copying menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)") (describe-no-warranty menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY") (sep4 "--") (about-emacs menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help") (about-gnu-project menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux") "Help") (file "File" keymap (new-file menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file") (open-file menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer") (dired menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files") (insert-file menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer") (kill-buffer menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer") (separator-save "--") (save-buffer menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file") (write-file menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file") (revert-buffer menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file") (recover-session menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session") (separator-print "--") (Print menu-item "Print" (keymap "Print" (Printing\ Interface menu-item "Printing Interface" pr-interface :help "Use buffer interface instead of menu interface") (nil menu-item "--") (PostScript\ Preview menu-item "PostScript Preview" (keymap "PostScript Preview" (Directory menu-item "Directory" (keymap "Directory" (1-up menu-item "1-up" menu-function-45 :key-sequence nil) (2-up menu-item "2-up" menu-function-46 :key-sequence nil) (4-up menu-item "4-up" menu-function-47 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-48 :keys (pr-ps-buffer-preview))) :enable (not pr-spool-p)) (Buffer menu-item "Buffer" (keymap "Buffer" (1-up menu-item "1-up" menu-function-50 :key-sequence nil) (2-up menu-item "2-up" menu-function-51 :key-sequence nil) (4-up menu-item "4-up" menu-function-52 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-53 :keys (pr-ps-buffer-preview))) :enable (not pr-spool-p)) (Region menu-item "Region" (keymap "Region" (1-up menu-item "1-up" menu-function-55 :key-sequence nil) (2-up menu-item "2-up" menu-function-56 :key-sequence nil) (4-up menu-item "4-up" menu-function-57 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-58 :keys (pr-ps-region-preview))) :enable (and (not pr-spool-p) (ps-mark-active-p))) (Mode menu-item "Mode" (keymap "Mode" (1-up menu-item "1-up" menu-function-60 :key-sequence nil) (2-up menu-item "2-up" menu-function-61 :key-sequence nil) (4-up menu-item "4-up" menu-function-62 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-63 :keys (pr-ps-mode-preview))) :enable (and (not pr-spool-p) (pr-mode-alist-p))) (File menu-item "File" (keymap "File" (No\ Preprocessing\.\.\. menu-item "No Preprocessing..." menu-function-65 :keys (pr-ps-file-preview) :help "Preview PostScript file") (nil menu-item "--") (PostScript\ Utility menu-item "mpage" (keymap "PostScript Utility" (mpage menu-item "mpage" menu-function-109 :key-sequence nil :button (:radio eq pr-ps-utility (quote mpage))) (psnup menu-item "psnup" menu-function-110 :key-sequence nil :button (:radio eq pr-ps-utility (quote psnup)))) :enable pr-ps-utility-alist :help "Select PostScript utility") (nil-3 menu-item "--") (1-up\.\.\. menu-item "1-up..." menu-function-66 :key-sequence nil :enable pr-ps-utility-alist) (2-up\.\.\. menu-item "2-up..." menu-function-67 :key-sequence nil :enable pr-ps-utility-alist) (4-up\.\.\. menu-item "4-up..." menu-function-68 :key-sequence nil :enable pr-ps-utility-alist) (Other\.\.\. menu-item "Other..." menu-function-69 :enable pr-ps-utility-alist :keys (pr-ps-file-up-preview)) (nil-8 menu-item "--") (Landscape menu-item "Landscape" pr-toggle-file-landscape-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-landscape) :help "Toggle landscape for PostScript file") (Duplex menu-item "Duplex" pr-toggle-file-duplex-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-duplex) :help "Toggle duplex for PostScript file") (Tumble menu-item "Tumble" pr-toggle-file-tumble-menu :enable (and pr-file-duplex pr-ps-utility-alist) :button (:toggle . pr-file-tumble) :help "Toggle tumble for PostScript file"))) (Despool\.\.\. menu-item "Despool..." menu-function-70 :enable pr-spool-p :keys (pr-despool-preview) :help "Despool PostScript buffer to printer or file (C-u)")) :help "Preview PostScript instead of sending to printer" :visible (pr-visible-p (quote postscript))) (PostScript\ Print menu-item "PostScript Print" (keymap "PostScript Print" (Directory menu-item "Directory" (keymap "Directory" (1-up menu-item "1-up" menu-function-72 :key-sequence nil) (2-up menu-item "2-up" menu-function-73 :key-sequence nil) (4-up menu-item "4-up" menu-function-74 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-75 :keys (pr-ps-buffer-ps-print)))) (Buffer menu-item "Buffer" (keymap "Buffer" (1-up menu-item "1-up" menu-function-76 :key-sequence nil) (2-up menu-item "2-up" menu-function-77 :key-sequence nil) (4-up menu-item "4-up" menu-function-78 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-79 :keys (pr-ps-buffer-ps-print)))) (Region menu-item "Region" (keymap "Region" (1-up menu-item "1-up" menu-function-80 :key-sequence nil) (2-up menu-item "2-up" menu-function-81 :key-sequence nil) (4-up menu-item "4-up" menu-function-82 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-83 :keys (pr-ps-region-ps-print))) :enable (ps-mark-active-p)) (Mode menu-item "Mode" (keymap "Mode" (1-up menu-item "1-up" menu-function-85 :key-sequence nil) (2-up menu-item "2-up" menu-function-86 :key-sequence nil) (4-up menu-item "4-up" menu-function-87 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-88 :keys (pr-ps-mode-ps-print))) :enable (pr-mode-alist-p)) (File menu-item "File" (keymap "File" (No\ Preprocessing\.\.\. menu-item "No Preprocessing..." menu-function-90 :keys (pr-ps-file-ps-print) :help "Send PostScript file to printer") (nil menu-item "--") (PostScript\ Utility menu-item "mpage" (keymap "PostScript Utility" (mpage menu-item "mpage" menu-function-109 :key-sequence nil :button (:radio eq pr-ps-utility (quote mpage))) (psnup menu-item "psnup" menu-function-110 :key-sequence nil :button (:radio eq pr-ps-utility (quote psnup)))) :enable pr-ps-utility-alist :help "Select PostScript utility") (nil-3 menu-item "--") (1-up\.\.\. menu-item "1-up..." menu-function-91 :key-sequence nil :enable pr-ps-utility-alist) (2-up\.\.\. menu-item "2-up..." menu-function-92 :key-sequence nil :enable pr-ps-utility-alist) (4-up\.\.\. menu-item "4-up..." menu-function-93 :key-sequence nil :enable pr-ps-utility-alist) (Other\.\.\. menu-item "Other..." menu-function-94 :enable pr-ps-utility-alist :keys (pr-ps-file-up-ps-print)) (nil-8 menu-item "--") (Landscape menu-item "Landscape" pr-toggle-file-landscape-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-landscape) :help "Toggle landscape for PostScript file") (Duplex menu-item "Duplex" pr-toggle-file-duplex-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-duplex) :help "Toggle duplex for PostScript file") (Tumble menu-item "Tumble" pr-toggle-file-tumble-menu :enable (and pr-file-duplex pr-ps-utility-alist) :button (:toggle . pr-file-tumble) :help "Toggle tumble for PostScript file"))) (Despool\.\.\. menu-item "Despool..." menu-function-95 :enable pr-spool-p :keys (pr-despool-ps-print) :help "Despool PostScript buffer to printer or file (C-u)")) :help "Send PostScript to printer or file (C-u)" :visible (pr-visible-p (quote postscript))) (PostScript\ Printers menu-item "PostScript Printer: default" (keymap "PostScript Printers" (default menu-item "default" menu-function-107 :key-sequence nil :button (:radio eq pr-ps-name (quote default)))) :enable pr-ps-printer-alist :visible (pr-visible-p (quote postscript)) :help "Select PostScript printer") (nil-5 menu-item "--") (Printify menu-item "Printify" (keymap "Printify" (Directory menu-item "Directory" pr-printify-directory) (Buffer menu-item "Buffer" pr-printify-buffer) (Region menu-item "Region" pr-printify-region :enable (ps-mark-active-p))) :help "Replace non-printing chars with printable representations." :visible (pr-visible-p (quote text))) (Print menu-item "Print" (keymap "Print" (Directory menu-item "Directory" pr-txt-directory) (Buffer menu-item "Buffer" pr-txt-buffer) (Region menu-item "Region" pr-txt-region :enable (ps-mark-active-p)) (Mode menu-item "Mode" pr-txt-mode :enable (pr-mode-alist-p))) :help "Send text to printer" :visible (pr-visible-p (quote text))) (Text\ Printers menu-item "Text Printer: default" (keymap "Text Printers" (default menu-item "default" menu-function-108 :key-sequence nil :button (:radio eq pr-txt-name (quote default)))) :enable pr-txt-printer-alist :visible (pr-visible-p (quote text)) :help "Select text printer") (nil-9 menu-item "--") (Landscape menu-item "Landscape" pr-toggle-landscape-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-landscape-mode)) (Print\ Header menu-item "Print Header" pr-toggle-header-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-print-header)) (Print\ Header\ Frame menu-item "Print Header Frame" pr-toggle-header-frame-menu :enable ps-print-header :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-print-header-frame)) (Line\ Number menu-item "Line Number" pr-toggle-line-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-line-number)) (Zebra\ Stripes menu-item "Zebra Stripes" pr-toggle-zebra-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-zebra-stripes)) (Duplex menu-item "Duplex" pr-toggle-duplex-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-spool-duplex)) (Tumble menu-item "Tumble" pr-toggle-tumble-menu :enable ps-spool-duplex :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-spool-tumble)) (Upside-Down menu-item "Upside-Down" pr-toggle-upside-down-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-print-upside-down)) (Print\ All\ Pages menu-item "Print All Pages" (keymap "Print All Pages" (All\ Pages menu-item "All Pages" menu-function-99 :key-sequence nil :button (:radio eq ps-even-or-odd-pages nil)) (Even\ Pages menu-item "Even Pages" menu-function-100 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote even-page))) (Odd\ Pages menu-item "Odd Pages" menu-function-101 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote odd-page))) (Even\ Sheets menu-item "Even Sheets" menu-function-102 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote even-sheet))) (Odd\ Sheets menu-item "Odd Sheets" menu-function-103 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote odd-sheet)))) :help "Select odd/even pages/sheets to print" :visible (pr-visible-p (quote postscript-options))) (nil-19 menu-item "--") (Spool\ Buffer menu-item "Spool Buffer" pr-toggle-spool-menu :visible (pr-visible-p (quote postscript-process)) :button (:toggle . pr-spool-p) :help "Toggle PostScript spooling") (Print\ with\ faces menu-item "Print with faces" pr-toggle-faces-menu :visible (pr-visible-p (quote postscript-process)) :button (:toggle . pr-faces-p) :help "Toggle PostScript printing with faces") (Print\ via\ Ghostscript menu-item "Print via Ghostscript" pr-toggle-ghostscript-menu :visible (pr-visible-p (quote postscript-process)) :button (:toggle . pr-print-using-ghostscript) :help "Toggle PostScript generation using ghostscript") (nil-23 menu-item "--") (Auto\ Region menu-item "Auto Region" pr-toggle-region-menu :visible (pr-visible-p (quote printing)) :button (:toggle . pr-auto-region)) (Auto\ Mode menu-item "Auto Mode" pr-toggle-mode-menu :visible (pr-visible-p (quote printing)) :button (:toggle . pr-auto-mode)) (Menu\ Lock menu-item "Menu Lock" pr-toggle-lock-menu :visible (pr-visible-p (quote printing)) :button (:toggle . pr-menu-lock)) (nil-27 menu-item "--") (Customize menu-item "Customize" (keymap "Customize" (printing menu-item "printing" pr-customize) (ps-print menu-item "ps-print" ps-print-customize) (lpr menu-item "lpr" lpr-customize)) :visible (pr-visible-p (quote help))) (Show\ Settings menu-item "Show Settings" (keymap "Show Settings" (printing menu-item "printing" pr-show-pr-setup) (ps-print menu-item "ps-print" pr-show-ps-setup) (lpr menu-item "lpr" pr-show-lpr-setup)) :visible (pr-visible-p (quote help))) (Help menu-item "Help" pr-help :visible (pr-visible-p (quote help))))) (separator-window "--") (new-window-below menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one") (new-window-on-right menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one") (one-window menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame") (separator-frame "--") (make-frame menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame") (make-frame-on-display menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display") (delete-this-frame menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame") (separator-exit "--") (exit-emacs menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit") "File") (edit "Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (cut menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position") (copy menu-item "Copy" kill-ring-save :enable mark-active :help "Copy text in region between mark and current position" :keys "\\[kill-ring-save]") (paste menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search "--") (search menu-item "Search" (keymap (search-forward menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string") (search-backward menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string") (re-search-forward menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression") (re-search-backward menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression") (separator-repeat-search "--") (repeat-search-fwd menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-search-back menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards") (separator-tag-search "--") (tags-srch menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files") (tags-continue menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation") (separator-tag-isearch "--") (i-search menu-item "Incremental Search" (keymap (isearch-forward menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it") (isearch-forward-regexp menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (isearch-backward-regexp menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") "Incremental Search")) "Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (go-to-pos menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N") (beg-of-buf menu-item "Goto Beginning of Buffer" beginning-of-buffer) (end-of-buf menu-item "Goto End of Buffer" end-of-buffer) (separator-tags "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To")) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) (separator-bookmark "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit") (options "Options" keymap (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping")) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error)))) (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit)))) (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (set-language-environment menu-item "Set Language Environment" (keymap (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese "Chinese" . setup-chinese-environment-map) (Cyrillic "Cyrillic" . setup-cyrillic-environment-map) (Indian "Indian" . setup-indian-environment-map) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European "European" . setup-european-environment-map) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment))) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method) (set-input-method menu-item "Select Input Method..." set-input-method) (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer") "Set Coding System") :enable (default-value (quote enable-multibyte-characters))) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language") (describe-input-method menu-item "Describe Input Method" describe-input-method) (describe-coding-system menu-item "Describe Coding System..." describe-coding-system) (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)")) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (showhide-tool-bar menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines)))) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p)) (showhide-fringe menu-item "Fringe" (keymap (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe") "Fringe") :visible (display-graphic-p)) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode)))) "Show/Hide")) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize")) "Options") (buffer "Buffers" keymap "Buffers" [("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *%" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*"))] (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window") (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers")) (tools "Tools" keymap (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (spell menu-item "Spell Checking" ispell-menu-map) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu) (epatch menu-item "Apply Patch" menu-bar-epatch-menu) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter vc-menu-map-filter) (separator-vc "--") (gnus menu-item "Read Net News" gnus :help "Read network news groups") (rmail menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail") (compose-mail menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message") (directory-search menu-item "Directory Search" eudc-tools-menu) (browse-web menu-item "Browse the Web..." browse-web) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption")) (separator-games "--") (games menu-item "Games" (keymap (5x5 menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board") (adventure menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs") (black-box menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays") (bubbles menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves") (gomoku menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)") (hanoi menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs") (land menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks") (life menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves") (mult menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication") (pong menu-item "Pong" pong :help "Bounce the ball to your opponent") (snake menu-item "Snake" snake :help "Move snake around avoiding collisions") (solitaire menu-item "Solitaire" solitaire :help "Get rid of all the stones") (tetris menu-item "Tetris" tetris :help "Falling blocks game") (zone menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle") "Games")) "Tools") (mouse-1 . tmm-menubar-mouse))) global-composed-list-cc1a9c480b5f2b7156fb87dc58b6d3c1 ((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-file us)))) (menu-bar keymap (file "File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In Explorer" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Command Prompt" ergoemacs-shell-here) (powershell-here menu-item "In PowerShell" ergoemacs-powershell-here :enable (fboundp (quote powershell))))) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs-menu menu-item "Quit" save-buffers-kill-emacs) "File"))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-edit us)))) (menu-bar keymap (edit "Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (redo menu-item "Redo" ergoemacs-redo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (or (not (and (boundp (quote undo-tree-mode)) undo-tree-mode)) (and (and (boundp (quote undo-tree-mode)) undo-tree-mode) (null (undo-tree-node-next (undo-tree-current buffer-undo-tree))))))) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit"))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-search us)))) (menu-bar keymap (search "Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") (separator-packages)) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search"))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-view us)))) (menu-bar keymap (view "View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-languages us)))) (menu-bar keymap (languages "Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (html-mode menu-item "Html" html-mode) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (lisp-mode menu-item "Lisp" lisp-mode) (lisp-interaction-mode menu-item "Lisp interaction" lisp-interaction-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode))) (S menu-item "S" (keymap (scheme-mode menu-item "Scheme" scheme-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-help us)))) (menu-bar keymap (help-menu "?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?"))) (keymap (escape . keyboard-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) quit us))))) (keymap (M-S-prior . backward-page) (M-S-next . forward-page) (25 . ergoemacs-redo) (24 keymap (2 . ibuffer) (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (12 . goto-line) (67108960 . other-frame) (33554455 . delete-frame) (33554438 . occur) (C-S-prior . ergoemacs-previous-emacs-buffer) (C-S-next . ergoemacs-next-emacs-buffer) (67108927 . info) (67108925 . text-scale-increase) (C-prior . ergoemacs-previous-user-buffer) (C-pause . kill-compilation) (C-next . ergoemacs-next-user-buffer) (67108912 . ergoemacs-text-scale-normal-size) (67108911 . info) (67108910 . keyboard-quit) (67108909 . text-scale-decrease) (67108907 . text-scale-increase) (S-mouse-1 . ignore) (S-down-mouse-1 . mouse-save-then-kill) (M-f4 . ergoemacs-delete-frame) (18 . revert-buffer) (f5 . revert-buffer) (M-down . ergoemacs-forward-block) (M-up . ergoemacs-backward-block) (C-right . forward-word) (C-left . backward-word) (C-end . end-of-buffer) (C-home . beginning-of-buffer) (end . move-end-of-line) (home . move-beginning-of-line) (C-delete . kill-word) (27 keymap (S-prior . backward-page) (S-next . forward-page) (f4 . ergoemacs-delete-frame) (down . ergoemacs-forward-block) (up . ergoemacs-backward-block) (delete . kill-word)) (M-delete . kill-word) (delete . delete-char) (33554446 . make-frame-command) (22 . ergoemacs-paste) (S-insert . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle) (C-insert . ergoemacs-copy-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (S-delete . ergoemacs-cut-line-or-region) (33554458 . ergoemacs-redo) (26 . undo) (1 . mark-whole-buffer) (16 . ergoemacs-print-buffer-confirm) (33554451 . write-file) (19 . save-buffer) (6 . isearch-forward) (23 . ergoemacs-close-current-buffer) (33554452 . ergoemacs-open-last-closed) (33554447 . ergoemacs-open-in-external-app) (15 . find-file) (14 . ergoemacs-new-empty-buffer) (tool-bar keymap (kill-buffer . ergoemacs-close-current-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) standard-fixed us))))) (keymap (f4 . ergoemacs-paste) (f2 . ergoemacs-cut-line-or-region) (f8 keymap (f9 . highlight-symbol-query-replace) (f8 . highlight-symbol-at-point) (46 . isearch-forward-symbol-at-point) (95 . isearch-forward-symbol) (119 . isearch-forward-word) (104 keymap (119 . hi-lock-write-interactive-patterns) (102 . hi-lock-find-patterns) (117 . unhighlight-regexp) (46 . highlight-symbol-at-point) (108 . highlight-lines-matching-regexp) (112 . highlight-phrase) (114 . highlight-regexp)) (111 . occur)) (f6 . ergoemacs-unchorded-alt-modal) (f3 . ergoemacs-copy-line-or-region) (f12 . next-line) (f11 . previous-line) (S-f3 . ergoemacs-toggle-letter-case) (M-f5 . ergoemacs-redo) (M-f3 . ergoemacs-copy-all) (27 keymap (f5 . ergoemacs-redo) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all)) (M-f2 . ergoemacs-cut-all) (C-f9 . highlight-symbol-next) (C-f8 . highlight-symbol-prev) (C-f5 . ergoemacs-redo) (C-f4 . ergoemacs-paste-cycle) (C-f3 . ergoemacs-copy-all) (C-f2 . ergoemacs-cut-all) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) fn-keys us))))) (keymap (menu keymap (114 keymap (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . ergoemacs-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (apps keymap (114 keymap (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . ergoemacs-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps us))))) (keymap (menu keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (apps keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-toggle us))))) (keymap (menu keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (apps keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-apps us))))) (keymap (menu keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (apps keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-punctuation us))))) (keymap (25 . ergoemacs-redo) (33554458 . ergoemacs-redo) (26 . undo) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (27 keymap (122 . undo) (90 . undo) (88 . ergoemacs-cut-all) (67 . ergoemacs-copy-all) (86 . ergoemacs-paste-cycle) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) copy us))))) (keymap (27 keymap (65 . shell-command) (97 . execute-extended-command)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) execute us))))) (keymap (27 keymap (13 . electric-newline-and-maybe-indent)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) fixed-newline us))))) (keymap (f1 keymap (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (8 keymap (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) help us))))) (keymap (27 keymap (71 . ergoemacs-kill-line-backward) (103 . kill-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) kill-line us))))) (keymap (27 keymap (98 . avy-goto-word-or-subword-1) (112 . recenter-top-bottom)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) misc us))))) (keymap (M-right . ergoemacs-forward-close-bracket) (M-left . ergoemacs-backward-open-bracket) (27 keymap (right . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (76 . ergoemacs-forward-close-bracket) (74 . ergoemacs-backward-open-bracket)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-bracket us))))) (keymap (27 keymap (78 . ergoemacs-end-or-beginning-of-buffer) (110 . ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-buffer us))))) (keymap (C-M-i . backward-paragraph) (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (C-i . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-char us))))) (keymap (27 keymap (72 . move-end-of-line) (104 . move-beginning-of-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-line us))))) (keymap (27 keymap (75 . scroll-up-command) (73 . scroll-down-command) (11 . scroll-other-window) (33554441 . scroll-other-window-down)) (C-M-I . scroll-other-window-down) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-page us))))) (keymap (27 keymap (79 . forward-paragraph) (85 . backward-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-paragraph us))))) (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-word us))))) (keymap (27 keymap (37 . query-replace-regexp) (53 . query-replace) (89 . isearch-backward) (121 . isearch-forward)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) search us))))) (keymap (27 keymap (55 . ergoemacs-select-current-line) (54 . ergoemacs-select-current-block) (42 . ergoemacs-select-text-in-quote) (56 . ergoemacs-extend-selection) (33554464 . mark-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) select-items us))))) (keymap (27 keymap (36 . split-window-right) (52 . split-window-below) (50 . delete-window) (51 . delete-other-windows) (96 . ergoemacs-switch-to-next-frame) (126 . ergoemacs-switch-to-previous-frame) (83 . ergoemacs-move-cursor-previous-pane) (115 . ergoemacs-move-cursor-next-pane)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) switch us))))) (keymap (27 keymap (113 . ergoemacs-compact-uncompact-block) (84 . flyspell-auto-correct-word) (116 . ergoemacs-call-keyword-completion) (47 . ergoemacs-toggle-letter-case) (63 . ergoemacs-toggle-camel-case) (119 . ergoemacs-shrink-whitespaces) (39 . comment-dwim)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) text-transform us))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) ergoemacs-undefined us)))) (19 . ergoemacs-map-undefined) (67108911 . ergoemacs-map-undefined) (31 . ergoemacs-map-undefined) (25 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (11 . ergoemacs-map-undefined) (12 . ergoemacs-map-undefined) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (5 . ergoemacs-map-undefined) (1 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (18 . ergoemacs-map-undefined) (24 keymap (107 . ergoemacs-map-undefined) (104 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (19 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (117 . ergoemacs-map-undefined) (50 . ergoemacs-map-undefined) (51 . ergoemacs-map-undefined) (48 . ergoemacs-map-undefined) (49 . ergoemacs-map-undefined)) (27 keymap (121 . ergoemacs-map-undefined) (119 . ergoemacs-map-undefined) (33 . ergoemacs-map-undefined) (120 . ergoemacs-map-undefined) (60 . ergoemacs-map-undefined) (62 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (118 . ergoemacs-map-undefined) (125 . ergoemacs-map-undefined) (123 . ergoemacs-map-undefined) (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined) (67108901 . ergoemacs-map-undefined) (37 . ergoemacs-map-undefined) (59 . ergoemacs-map-undefined)))) global-ret-cc1a9c480b5f2b7156fb87dc58b6d3c1 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) ergoemacs-unbound us))))) ergoemacs-map---cc1a9c480b5f2b7156fb87dc58b6d3c1 #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8 data ([menu-bar file] ("File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In Explorer" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Command Prompt" ergoemacs-shell-here) (powershell-here menu-item "In PowerShell" ergoemacs-powershell-here :enable (fboundp (quote powershell))))) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs-menu menu-item "Quit" save-buffers-kill-emacs) "File") [menu-bar edit] ("Edit" keymap (undo) (redo) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit") [menu-bar search] ("Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") (separator-packages)) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search") [menu-bar view] ("View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))) [menu-bar languages] ("Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (html-mode menu-item "Html" html-mode) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (lisp-mode menu-item "Lisp" lisp-mode) (lisp-interaction-mode menu-item "Lisp interaction" lisp-interaction-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode))) (S menu-item "S" (keymap (scheme-mode menu-item "Scheme" scheme-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)) [menu-bar help-menu] ("?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?") [escape] keyboard-quit [M-S-prior] backward-page [27 S-prior] backward-page [M-S-next] forward-page [27 S-next] forward-page [25] ergoemacs-redo "" ergoemacs-redo [24 2] ibuffer "" ibuffer [24 ergoemacs-timeout] ergoemacs-cut-line-or-region [12] goto-line "" goto-line [67108960] other-frame [33554455] delete-frame [33554438] occur [C-S-prior] ergoemacs-previous-emacs-buffer [C-S-next] ergoemacs-next-emacs-buffer [67108927] info [67108925] text-scale-increase [C-prior] ergoemacs-previous-user-buffer [C-pause] kill-compilation [C-next] ergoemacs-next-user-buffer [67108912] ergoemacs-text-scale-normal-size [67108911] info [67108910] keyboard-quit [67108909] text-scale-decrease [67108907] text-scale-increase [S-mouse-1] ignore [S-down-mouse-1] mouse-save-then-kill [M-f4] ergoemacs-delete-frame [27 f4] ergoemacs-delete-frame [18] revert-buffer "" revert-buffer [f5] revert-buffer [M-down] ergoemacs-forward-block [27 down] ergoemacs-forward-block [M-up] ergoemacs-backward-block [27 up] ergoemacs-backward-block [C-right] forward-word [C-left] backward-word [C-end] end-of-buffer [C-home] beginning-of-buffer [end] move-end-of-line [home] move-beginning-of-line [C-delete] kill-word [27 delete] kill-word [M-delete] kill-word [delete] delete-char [33554446] make-frame-command [22] ergoemacs-paste "" ergoemacs-paste [S-insert] ergoemacs-paste [33554454] ergoemacs-paste-cycle [C-insert] ergoemacs-copy-line-or-region [3 ergoemacs-timeout] ergoemacs-copy-line-or-region [S-delete] ergoemacs-cut-line-or-region [33554458] ergoemacs-redo [26] undo "" undo [1] mark-whole-buffer "" mark-whole-buffer [16] ergoemacs-print-buffer-confirm "" ergoemacs-print-buffer-confirm [33554451] write-file [19] save-buffer "" save-buffer [6] isearch-forward "" isearch-forward [23] ergoemacs-close-current-buffer "" ergoemacs-close-current-buffer [33554452] ergoemacs-open-last-closed [33554447] ergoemacs-open-in-external-app [15] find-file "" find-file [14] ergoemacs-new-empty-buffer "" ergoemacs-new-empty-buffer [tool-bar kill-buffer] ergoemacs-close-current-buffer [f4] ergoemacs-paste [f2] ergoemacs-cut-line-or-region [f8 f9] highlight-symbol-query-replace [f8 f8] highlight-symbol-at-point [f8 46] isearch-forward-symbol-at-point [f8 95] isearch-forward-symbol [f8 119] isearch-forward-word [f8 104 119] hi-lock-write-interactive-patterns [f8 104 102] hi-lock-find-patterns [f8 104 117] unhighlight-regexp [f8 104 46] highlight-symbol-at-point [f8 104 108] highlight-lines-matching-regexp [f8 104 112] highlight-phrase [f8 104 114] highlight-regexp [f8 111] occur [f6] ergoemacs-unchorded-alt-modal [f3] ergoemacs-copy-line-or-region [f12] next-line [f11] previous-line [S-f3] ergoemacs-toggle-letter-case [M-f5] ergoemacs-redo [27 f5] ergoemacs-redo [M-f3] ergoemacs-copy-all [27 f3] ergoemacs-copy-all [27 f2] ergoemacs-cut-all [M-f2] ergoemacs-cut-all [C-f9] highlight-symbol-next [C-f8] highlight-symbol-prev [C-f5] ergoemacs-redo [C-f4] ergoemacs-paste-cycle [C-f3] ergoemacs-copy-all [C-f2] ergoemacs-cut-all [menu 114 9] move-to-column [apps 114 9] move-to-column [menu 114 112] previous-error [apps 114 112] previous-error [menu 114 110] next-error [apps 114 110] next-error [menu 114 27 112] previous-error [menu 114 134217840] previous-error [apps 114 27 112] previous-error [menu 114 27 110] next-error [menu 114 134217838] next-error [apps 114 27 110] next-error [menu 114 27 103] goto-line [menu 114 134217831] goto-line [apps 114 27 103] goto-line [menu 114 103] goto-line [apps 114 103] goto-line [menu 114 99] goto-char [apps 114 99] goto-char [menu 122] undo [apps 122] undo [menu 116] switch-to-buffer [apps 116] switch-to-buffer [menu 98] ergoemacs-redo [apps 98] ergoemacs-redo [menu 118] ergoemacs-paste [apps 118] ergoemacs-paste [menu 99] ergoemacs-copy-line-or-region [apps 99] ergoemacs-copy-line-or-region [menu 120] ergoemacs-cut-line-or-region [apps 120] ergoemacs-cut-line-or-region [menu 119] ergoemacs-close-current-buffer [apps 119] ergoemacs-close-current-buffer [menu 103] ergoemacs-read-key--universal-argument [apps 103] ergoemacs-read-key--universal-argument [menu 111] find-file [apps 111] find-file [menu 19] write-file [apps 19] write-file [menu 115] save-buffer [apps 115] save-buffer [menu 109] "" [apps 109] "" [menu 104 90] ergoemacs-clean-nw [apps 104 90] ergoemacs-clean-nw [menu 104 26] ergoemacs-clean-library [apps 104 26] ergoemacs-clean-library [menu 104 122] ergoemacs-clean [apps 104 122] ergoemacs-clean [menu 104 111] ergoemacs-where-is-old-binding [apps 104 111] ergoemacs-where-is-old-binding [menu 104 96] elisp-index-search [apps 104 96] elisp-index-search [menu 104 57] ergoemacs-lookup-word-definition [apps 104 57] ergoemacs-lookup-word-definition [menu 104 56] ergoemacs-lookup-wikipedia [apps 104 56] ergoemacs-lookup-wikipedia [menu 104 55] ergoemacs-lookup-google [apps 104 55] ergoemacs-lookup-google [menu 104 53] man [apps 104 53] man [menu 104 51] describe-key [apps 104 51] describe-key [menu 104 50] describe-variable [apps 104 50] describe-variable [menu 104 49] describe-function [apps 104 49] describe-function [menu 104 39] ergoemacs-describe-current-theme [apps 104 39] ergoemacs-describe-current-theme [menu 104 113] help-quit [apps 104 113] help-quit [menu 104 118] describe-variable [apps 104 118] describe-variable [menu 104 119] where-is [apps 104 119] where-is [menu 104 116] help-with-tutorial [apps 104 116] help-with-tutorial [menu 104 115] describe-syntax [apps 104 115] describe-syntax [menu 104 114] info-emacs-manual [apps 104 114] info-emacs-manual [menu 104 80] describe-package [apps 104 80] describe-package [menu 104 112] finder-by-keyword [apps 104 112] finder-by-keyword [menu 104 110] view-emacs-news [apps 104 110] view-emacs-news [menu 104 109] describe-mode [apps 104 109] describe-mode [menu 104 108] view-lossage [apps 104 108] view-lossage [menu 104 107] describe-key [apps 104 107] describe-key [menu 104 52] describe-char [apps 104 52] describe-char [menu 104 105] info [apps 104 105] info [menu 104 104] view-hello-file [apps 104 104] view-hello-file [menu 104 103] describe-gnu-project [apps 104 103] describe-gnu-project [menu 104 102] describe-function [apps 104 102] describe-function [menu 104 101] view-echo-area-messages [apps 104 101] view-echo-area-messages [menu 104 100] apropos-documentation [apps 104 100] apropos-documentation [menu 104 99] describe-key-briefly [apps 104 99] describe-key-briefly [menu 104 98] describe-bindings [apps 104 98] describe-bindings [menu 104 97] apropos-command [apps 104 97] apropos-command [menu 104 83] info-lookup-symbol [apps 104 83] info-lookup-symbol [menu 104 76] describe-language-environment [apps 104 76] describe-language-environment [menu 104 75] Info-goto-emacs-key-command-node [apps 104 75] Info-goto-emacs-key-command-node [menu 104 73] describe-input-method [apps 104 73] describe-input-method [menu 104 70] Info-goto-emacs-command-node [apps 104 70] Info-goto-emacs-command-node [menu 104 67] describe-coding-system [apps 104 67] describe-coding-system [menu 104 28] describe-input-method [apps 104 28] describe-input-method [menu 104 23] describe-no-warranty [apps 104 23] describe-no-warranty [menu 104 20] view-emacs-todo [apps 104 20] view-emacs-todo [menu 104 16] view-emacs-problems [apps 104 16] view-emacs-problems [menu 104 15] describe-distribution [apps 104 15] describe-distribution [menu 104 14] view-emacs-news [apps 104 14] view-emacs-news [menu 104 13] view-order-manuals [apps 104 13] view-order-manuals [menu 104 6] view-emacs-FAQ [apps 104 6] view-emacs-FAQ [menu 104 5] view-external-packages [apps 104 5] view-external-packages [menu 104 4] view-emacs-debugging [apps 104 4] view-emacs-debugging [menu 104 3] describe-copying [apps 104 3] describe-copying [menu 104 1] about-emacs [apps 104 1] about-emacs [menu 104 63] help-for-help [apps 104 63] help-for-help [menu 104 46] display-local-help [apps 104 46] display-local-help [menu 104 f1] help-for-help [apps 104 f1] help-for-help [menu 104 help] help-for-help [apps 104 help] help-for-help [menu 104 8] help-for-help [apps 104 8] help-for-help [menu 102] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) [apps 102] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) [menu 100] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) [apps 100] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) [menu 97] mark-whole-buffer [apps 97] mark-whole-buffer [menu 32] set-mark-command [apps 32] set-mark-command [menu 9] indent-region [apps 9] indent-region [menu 13] execute-extended-command [apps 13] execute-extended-command [menu return] execute-extended-command [apps return] execute-extended-command [menu f3] ergoemacs-copy-all [apps f3] ergoemacs-copy-all [menu f2] ergoemacs-cut-all [apps f2] ergoemacs-cut-all [menu 53] query-replace [apps 53] query-replace [menu 52] split-window-vertically [apps 52] split-window-vertically [menu 51] delete-other-windows [apps 51] delete-other-windows [menu 50] delete-window [apps 50] delete-window [menu 39] ergoemacs-org-edit-src [apps 39] ergoemacs-org-edit-src [menu 105 18] revert-buffer [apps 105 18] revert-buffer [menu 105 114] read-only-mode [apps 105 114] read-only-mode [menu 105 113] toggle-debug-on-quit [apps 105 113] toggle-debug-on-quit [menu 105 108] toggle-truncate-lines [apps 105 108] toggle-truncate-lines [menu 105 102] auto-fill-mode [apps 105 102] auto-fill-mode [menu 105 101] toggle-debug-on-error [apps 105 101] toggle-debug-on-error [menu 105 100] toggle-debug-on-error [apps 105 100] toggle-debug-on-error [menu 105 99] column-number-mode [apps 105 99] column-number-mode [menu 110 84] org-agenda [apps 110 84] org-agenda [menu 110 20] org-agenda [apps 110 20] org-agenda [menu 110 116] org-capture [apps 110 116] org-capture [menu 110 115] shell [apps 110 115] shell [menu 110 114] R [apps 110 114] R [menu 110 111] ergoemacs-open-in-external-app [apps 110 111] ergoemacs-open-in-external-app [menu 110 109] magit-status [apps 110 109] magit-status [menu 110 103] grep [apps 110 103] grep [menu 110 102] ergoemacs-open-in-desktop [apps 110 102] ergoemacs-open-in-desktop [menu 110 112] powershell [apps 110 112] powershell [menu 110 101] eshell [apps 110 101] eshell [menu 110 100] dired-jump [apps 110 100] dired-jump [menu 110 99] calc [apps 110 99] calc [menu 110 1] org-capture [apps 110 1] org-capture [menu 110 65] org-capture [apps 110 65] org-capture [menu 110 97] org-agenda [apps 110 97] org-agenda [menu 107 98] "!" [apps 107 98] "!" [menu 107 103] "|" [apps 107 103] "|" [menu 107 116] "&" [apps 107 116] "&" [menu 107 99] "-" [apps 107 99] "-" [menu 107 100] "=" [apps 107 100] "=" [menu 107 101] "+" [apps 107 101] "+" [menu 107 118] "<" [apps 107 118] "<" [menu 107 102] "_" [apps 107 102] "_" [menu 107 114] ">" [apps 107 114] ">" [menu 107 110] "@" [apps 107 110] "@" [menu 107 104] "%" [apps 107 104] "%" [menu 107 121] "?" [apps 107 121] "?" [menu 107 109] "`" [apps 107 109] "`" [menu 107 117] ergoemacs-smart-apostrophe [apps 107 117] ergoemacs-smart-apostrophe [menu 107 106] ergoemacs-smart-quote [apps 107 106] ergoemacs-smart-quote [menu 107 44] ergoemacs-smart-curly [apps 107 44] ergoemacs-smart-curly [menu 107 107] ergoemacs-smart-paren [apps 107 107] ergoemacs-smart-paren [menu 107 105] ergoemacs-smart-bracket [apps 107 105] ergoemacs-smart-bracket [menu 107 120] "~" [apps 107 120] "~" [menu 107 115] "*" [apps 107 115] "*" [menu 107 119] "^" [apps 107 119] "^" [menu 107 46] ":" [apps 107 46] ":" [menu 107 108] "$" [apps 107 108] "$" [menu 107 111] "#" [apps 107 111] "#" [27 122] undo [134217850] undo "z" undo [27 90] undo [134217818] undo "Z" undo [27 88] ergoemacs-cut-all [134217816] ergoemacs-cut-all "X" ergoemacs-cut-all [27 67] ergoemacs-copy-all [134217795] ergoemacs-copy-all "C" ergoemacs-copy-all [27 86] ergoemacs-paste-cycle [134217814] ergoemacs-paste-cycle "V" ergoemacs-paste-cycle [27 118] ergoemacs-paste [134217846] ergoemacs-paste "v" ergoemacs-paste [27 99] ergoemacs-copy-line-or-region [134217827] ergoemacs-copy-line-or-region "c" ergoemacs-copy-line-or-region [27 120] ergoemacs-cut-line-or-region [134217848] ergoemacs-cut-line-or-region "x" ergoemacs-cut-line-or-region [27 65] shell-command [134217793] shell-command "A" shell-command [27 97] execute-extended-command [134217825] execute-extended-command "a" execute-extended-command [27 13] electric-newline-and-maybe-indent [134217741] electric-newline-and-maybe-indent "" electric-newline-and-maybe-indent [f1 111] ergoemacs-where-is-old-binding [f1 96] elisp-index-search [f1 57] ergoemacs-lookup-word-definition [f1 56] ergoemacs-lookup-wikipedia [f1 55] ergoemacs-lookup-google [f1 53] man [f1 52] describe-char [f1 51] describe-key [f1 50] describe-variable [f1 49] describe-function [f1 39] ergoemacs-describe-current-theme [8 26] ergoemacs-clean-library "" ergoemacs-clean-library [8 122] ergoemacs-clean "z" ergoemacs-clean [8 111] ergoemacs-where-is-old-binding "o" ergoemacs-where-is-old-binding [8 96] elisp-index-search "`" elisp-index-search [8 57] ergoemacs-lookup-word-definition "9" ergoemacs-lookup-word-definition [8 56] ergoemacs-lookup-wikipedia "8" ergoemacs-lookup-wikipedia [8 55] ergoemacs-lookup-google "7" ergoemacs-lookup-google [8 53] man "5" man [8 52] describe-char "4" describe-char [8 51] describe-key "3" describe-key [8 50] describe-variable "2" describe-variable [8 49] describe-function "1" describe-function [8 39] ergoemacs-describe-current-theme "'" ergoemacs-describe-current-theme [27 71] ergoemacs-kill-line-backward [134217799] ergoemacs-kill-line-backward "G" ergoemacs-kill-line-backward [27 103] kill-line [134217831] kill-line "g" kill-line [27 98] avy-goto-word-or-subword-1 [134217826] avy-goto-word-or-subword-1 "b" avy-goto-word-or-subword-1 [27 112] recenter-top-bottom [134217840] recenter-top-bottom "p" recenter-top-bottom [M-right] ergoemacs-forward-close-bracket [27 right] ergoemacs-forward-close-bracket [M-left] ergoemacs-backward-open-bracket [27 left] ergoemacs-backward-open-bracket [27 76] ergoemacs-forward-close-bracket [134217804] ergoemacs-forward-close-bracket "L" ergoemacs-forward-close-bracket [27 74] ergoemacs-backward-open-bracket [134217802] ergoemacs-backward-open-bracket "J" ergoemacs-backward-open-bracket [27 78] ergoemacs-end-or-beginning-of-buffer [134217806] ergoemacs-end-or-beginning-of-buffer "N" ergoemacs-end-or-beginning-of-buffer [27 110] ergoemacs-beginning-or-end-of-buffer [134217838] ergoemacs-beginning-or-end-of-buffer "n" ergoemacs-beginning-or-end-of-buffer [C-M-i] backward-paragraph [27 C-i] backward-paragraph [27 102] delete-char [134217830] delete-char "f" delete-char [27 100] delete-backward-char [134217828] delete-backward-char "d" delete-backward-char [27 32] set-mark-command [134217760] set-mark-command " " set-mark-command [27 11] forward-paragraph [134217739] forward-paragraph "" forward-paragraph [27 12] right-word [134217740] right-word "" right-word [27 10] left-word [134217738] left-word "
" left-word [27 107] next-line [134217835] next-line "k" next-line [27 105] previous-line [134217833] previous-line "i" previous-line [27 108] forward-char [134217836] forward-char "l" forward-char [27 106] backward-char [134217834] backward-char "j" backward-char [27 72] move-end-of-line [134217800] move-end-of-line "H" move-end-of-line [27 104] move-beginning-of-line [134217832] move-beginning-of-line "h" move-beginning-of-line [27 75] scroll-up-command [134217803] scroll-up-command "K" scroll-up-command [27 73] scroll-down-command [134217801] scroll-down-command "I" scroll-down-command [27 33554441] scroll-other-window-down [167772169] scroll-other-window-down [C-M-I] scroll-other-window-down [27 79] forward-paragraph [134217807] forward-paragraph "O" forward-paragraph [27 85] backward-paragraph [134217813] backward-paragraph "U" backward-paragraph [27 114] kill-word [134217842] kill-word "r" kill-word [27 101] backward-kill-word [134217829] backward-kill-word "e" backward-kill-word [27 111] forward-word [134217839] forward-word "o" forward-word [27 117] backward-word [134217845] backward-word "u" backward-word [27 37] query-replace-regexp [134217765] query-replace-regexp "%" query-replace-regexp [27 53] query-replace [134217781] query-replace "5" query-replace [27 89] isearch-backward [134217817] isearch-backward "Y" isearch-backward [27 121] isearch-forward [134217849] isearch-forward "y" isearch-forward [27 55] ergoemacs-select-current-line [134217783] ergoemacs-select-current-line "7" ergoemacs-select-current-line [27 54] ergoemacs-select-current-block [134217782] ergoemacs-select-current-block "6" ergoemacs-select-current-block [27 42] ergoemacs-select-text-in-quote [134217770] ergoemacs-select-text-in-quote "*" ergoemacs-select-text-in-quote [27 56] ergoemacs-extend-selection [134217784] ergoemacs-extend-selection "8" ergoemacs-extend-selection [27 33554464] mark-paragraph [167772192] mark-paragraph [27 36] split-window-right [134217764] split-window-right "$" split-window-right [27 52] split-window-below [134217780] split-window-below "4" split-window-below [27 50] delete-window [134217778] delete-window "2" delete-window [27 51] delete-other-windows [134217779] delete-other-windows "3" delete-other-windows [27 96] ergoemacs-switch-to-next-frame [134217824] ergoemacs-switch-to-next-frame "`" ergoemacs-switch-to-next-frame [27 126] ergoemacs-switch-to-previous-frame [134217854] ergoemacs-switch-to-previous-frame "~" ergoemacs-switch-to-previous-frame [27 83] ergoemacs-move-cursor-previous-pane [134217811] ergoemacs-move-cursor-previous-pane "S" ergoemacs-move-cursor-previous-pane [27 115] ergoemacs-move-cursor-next-pane [134217843] ergoemacs-move-cursor-next-pane "s" ergoemacs-move-cursor-next-pane [27 113] ergoemacs-compact-uncompact-block [134217841] ergoemacs-compact-uncompact-block "q" ergoemacs-compact-uncompact-block [27 84] flyspell-auto-correct-word [134217812] flyspell-auto-correct-word "T" flyspell-auto-correct-word [27 116] ergoemacs-call-keyword-completion [134217844] ergoemacs-call-keyword-completion "t" ergoemacs-call-keyword-completion [27 47] ergoemacs-toggle-letter-case [134217775] ergoemacs-toggle-letter-case "/" ergoemacs-toggle-letter-case [27 63] ergoemacs-toggle-camel-case [134217791] ergoemacs-toggle-camel-case "?" ergoemacs-toggle-camel-case [27 119] ergoemacs-shrink-whitespaces [134217847] ergoemacs-shrink-whitespaces "w" ergoemacs-shrink-whitespaces [27 39] comment-dwim [134217767] comment-dwim "'" comment-dwim [31] ergoemacs-map-undefined "" ergoemacs-map-undefined [11] ergoemacs-map-undefined "" ergoemacs-map-undefined [4] ergoemacs-map-undefined "" ergoemacs-map-undefined [67108896] ergoemacs-map-undefined [2] ergoemacs-map-undefined "" ergoemacs-map-undefined [5] ergoemacs-map-undefined "" ergoemacs-map-undefined [24 107] ergoemacs-map-undefined "k" ergoemacs-map-undefined [24 104] ergoemacs-map-undefined "h" ergoemacs-map-undefined [24 23] ergoemacs-map-undefined "" ergoemacs-map-undefined [24 19] ergoemacs-map-undefined "" ergoemacs-map-undefined [24 6] ergoemacs-map-undefined "" ergoemacs-map-undefined [24 117] ergoemacs-map-undefined "u" ergoemacs-map-undefined [24 50] ergoemacs-map-undefined "2" ergoemacs-map-undefined [24 51] ergoemacs-map-undefined "3" ergoemacs-map-undefined [24 48] ergoemacs-map-undefined "0" ergoemacs-map-undefined [24 49] ergoemacs-map-undefined "1" ergoemacs-map-undefined [27 33] ergoemacs-map-undefined [134217761] ergoemacs-map-undefined "!" ergoemacs-map-undefined [27 60] ergoemacs-map-undefined [134217788] ergoemacs-map-undefined "<" ergoemacs-map-undefined [27 62] ergoemacs-map-undefined [134217790] ergoemacs-map-undefined ">" ergoemacs-map-undefined [27 22] ergoemacs-map-undefined [134217750] ergoemacs-map-undefined "" ergoemacs-map-undefined [27 125] ergoemacs-map-undefined [134217853] ergoemacs-map-undefined "}" ergoemacs-map-undefined [27 123] ergoemacs-map-undefined [134217851] ergoemacs-map-undefined "{" ergoemacs-map-undefined [27 67108901] ergoemacs-map-undefined [201326629] ergoemacs-map-undefined [27 59] ergoemacs-map-undefined [134217787] ergoemacs-map-undefined ";" ergoemacs-map-undefined)) ergoemacs-map--lookup-hash-cc1a9c480b5f2b7156fb87dc58b6d3c1 #s(hash-table size 145 test equal rehash-size 1.5 rehash-threshold 0.8 data ([7] ([67108910] [escape]) [24 91] ([27 S-prior] [M-S-prior]) [24 93] ([27 S-next] [M-S-next]) [27 103 27 103] ([apps 114 103] [menu 114 103] [apps 114 27 103] [menu 114 134217831] [menu 114 27 103] "" [12]) [24 53 111] ([67108960]) [24 53 48] ([33554455]) [27 115 111] ([f8 111] [33554438]) [8 105] ([apps 104 105] [menu 104 105] [67108911] [67108927]) [rwindow] ([S-mouse-1]) [mouse-3] ([S-down-mouse-1]) [27 102] ("o" [134217839] [27 111] [C-right]) [27 98] ("u" [134217845] [27 117] [C-left]) [27 62] ([C-end]) [27 60] ([C-home]) [5] ("H" [134217800] [27 72] [end]) [1] ("h" [134217832] [27 104] [home]) [27 100] ("r" [134217842] [27 114] [M-delete] [27 delete] [C-delete]) [4] ("f" [134217830] [27 102] [delete]) [24 53 50] ([33554446]) [24 117] ("Z" [134217818] [27 90] "z" [134217850] [27 122] [apps 122] [menu 122] "" [26]) [24 104] ([apps 97] [menu 97] "" [1]) [24 23] ([apps 19] [menu 19] [33554451]) [24 19] ([apps 115] [menu 115] "" [19]) [19] ("y" [134217849] [27 121] "" [6]) [24 6] ([apps 111] [menu 111] "" [15]) [27 115 104 46] ([f8 104 46] [f8 f8]) [27 115 46] ([f8 46]) [27 115 95] ([f8 95]) [27 115 119] ([f8 119]) [27 115 104 119] ([f8 104 119]) [27 115 104 117] ([f8 104 117]) [27 115 104 108] ([f8 104 108]) [27 115 104 112] ([f8 104 112]) [27 115 104 114] ([f8 104 114]) [14] ("k" [134217835] [27 107] [f12]) [16] ("i" [134217833] [27 105] [f11]) [27 103 9] ([apps 114 9] [menu 114 9]) [27 103 112] ([apps 114 27 112] [menu 114 134217840] [menu 114 27 112] [apps 114 112] [menu 114 112]) [24 96] ([apps 114 27 110] [menu 114 134217838] [menu 114 27 110] [apps 114 110] [menu 114 110]) [27 103 99] ([apps 114 99] [menu 114 99]) [24 98] ([apps 116] [menu 116]) [8 107] ("3" [8 51] [f1 51] [apps 104 107] [menu 104 107] [apps 104 51] [menu 104 51]) [8 118] ("2" [8 50] [f1 50] [apps 104 118] [menu 104 118] [apps 104 50] [menu 104 50]) [8 102] ("1" [8 49] [f1 49] [apps 104 102] [menu 104 102] [apps 104 49] [menu 104 49]) [8 113] ([apps 104 113] [menu 104 113]) [8 119] ([apps 104 119] [menu 104 119]) [8 116] ([apps 104 116] [menu 104 116]) [8 115] ([apps 104 115] [menu 104 115]) [8 114] ([apps 104 114] [menu 104 114]) [8 80] ([apps 104 80] [menu 104 80]) [8 112] ([apps 104 112] [menu 104 112]) [8 110] ([apps 104 14] [menu 104 14] [apps 104 110] [menu 104 110]) [8 109] ([apps 104 109] [menu 104 109]) [8 108] ([apps 104 108] [menu 104 108]) [8 104] ([apps 104 104] [menu 104 104]) [8 103] ([apps 104 103] [menu 104 103]) [8 101] ([apps 104 101] [menu 104 101]) [8 100] ([apps 104 100] [menu 104 100]) [8 99] ([apps 104 99] [menu 104 99]) [8 98] ([apps 104 98] [menu 104 98]) [8 97] ([apps 104 97] [menu 104 97]) [8 83] ([apps 104 83] [menu 104 83]) [8 76] ([apps 104 76] [menu 104 76]) [8 75] ([apps 104 75] [menu 104 75]) [8 73] ([apps 104 28] [menu 104 28] [apps 104 73] [menu 104 73]) [8 70] ([apps 104 70] [menu 104 70]) [8 67] ([apps 104 67] [menu 104 67]) [8 23] ([apps 104 23] [menu 104 23]) [8 20] ([apps 104 20] [menu 104 20]) [8 16] ([apps 104 16] [menu 104 16]) [8 15] ([apps 104 15] [menu 104 15]) [8 13] ([apps 104 13] [menu 104 13]) [8 6] ([apps 104 6] [menu 104 6]) [8 5] ([apps 104 5] [menu 104 5]) [8 4] ([apps 104 4] [menu 104 4]) [8 3] ([apps 104 3] [menu 104 3]) [8 1] ([apps 104 1] [menu 104 1]) [8 63] ([apps 104 8] [menu 104 8] [apps 104 help] [menu 104 help] [apps 104 f1] [menu 104 f1] [apps 104 63] [menu 104 63]) [8 46] ([apps 104 46] [menu 104 46]) [0] (" " [134217760] [27 32] [apps 32] [menu 32]) [27 28] ([apps 9] [menu 9]) [27 120] ("a" [134217825] [27 97] [apps return] [menu return] [apps 13] [menu 13]) [27 37] ("5" [134217781] [27 53] [apps 53] [menu 53]) [24 49] ("3" [134217779] [27 51] [apps 51] [menu 51]) [24 48] ("2" [134217778] [27 50] [apps 50] [menu 50]) [24 17] ([apps 105 114] [menu 105 114]) [27 33] ("A" [134217793] [27 65]) [10] ("" [134217741] [27 13]) [11] ("g" [134217831] [27 103]) [12] ("p" [134217840] [27 112]) [27 123] ("U" [134217813] [27 85] [27 C-i] [C-M-i]) [127] ("d" [134217828] [27 100]) [27 125] ("O" [134217807] [27 79] "" [134217739] [27 11]) [C-right] ("" [134217740] [27 12]) [C-left] ("
" [134217738] [27 10]) [6] ("l" [134217836] [27 108]) [2] ("j" [134217834] [27 106]) [22] ("K" [134217803] [27 75]) [27 118] ("I" [134217801] [27 73]) [27 33554454] ([C-M-I] [167772169] [27 33554441]) [27 127] ("e" [134217829] [27 101]) [27 67108901] ("%" [134217765] [27 37]) [18] ("Y" [134217817] [27 89]) [27 104] ([167772192] [27 33554464]) [24 51] ("$" [134217764] [27 36]) [24 50] ("4" [134217780] [27 52]) [27 59] ("'" [134217767] [27 39]))) undefined-keys-cc1a9c480b5f2b7156fb87dc58b6d3c1 ([134217787] [24 49] [24 48] [24 51] [24 50] [18] [134217765] [201326629] [134217826] [134217830] [134217828] [134217851] [134217853] [134217846] [22] [134217750] [1] [5] [2] [6] [16] [14] [67108896] [4] [134217790] [134217788] [12] [11] [134217848] [134217761] [23] [134217847] [25] [134217849] [31] [67108911] [24 117] [24 6] [19] [24 19] [24 23] [24 104] [24 107]) nil (keymap (ergoemacs-ignore . ergoemacs-command-loop--ignore) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) ergoemacs-unbound us)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-file us)))) (menu-bar keymap (file "File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In Explorer" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Command Prompt" ergoemacs-shell-here) (powershell-here menu-item "In PowerShell" ergoemacs-powershell-here :enable (fboundp (quote powershell))))) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs-menu menu-item "Quit" save-buffers-kill-emacs) "File"))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-edit us)))) (menu-bar keymap (edit "Edit" keymap (undo) (redo) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit"))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-search us)))) (menu-bar keymap (search "Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") (separator-packages)) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search"))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-view us)))) (menu-bar keymap (view "View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-languages us)))) (menu-bar keymap (languages "Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (html-mode menu-item "Html" html-mode) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (lisp-mode menu-item "Lisp" lisp-mode) (lisp-interaction-mode menu-item "Lisp interaction" lisp-interaction-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode))) (S menu-item "S" (keymap (scheme-mode menu-item "Scheme" scheme-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) menu-bar-help us)))) (menu-bar keymap (help-menu "?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?"))) (keymap (escape . keyboard-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) quit us))))) (keymap (M-S-prior . backward-page) (M-S-next . forward-page) (25 . ergoemacs-redo) (24 keymap (2 . ibuffer) (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (12 . goto-line) (67108960 . other-frame) (33554455 . delete-frame) (33554438 . occur) (C-S-prior . ergoemacs-previous-emacs-buffer) (C-S-next . ergoemacs-next-emacs-buffer) (67108927 . info) (67108925 . text-scale-increase) (C-prior . ergoemacs-previous-user-buffer) (C-pause . kill-compilation) (C-next . ergoemacs-next-user-buffer) (67108912 . ergoemacs-text-scale-normal-size) (67108911 . info) (67108910 . keyboard-quit) (67108909 . text-scale-decrease) (67108907 . text-scale-increase) (S-mouse-1 . ignore) (S-down-mouse-1 . mouse-save-then-kill) (M-f4 . ergoemacs-delete-frame) (18 . revert-buffer) (f5 . revert-buffer) (M-down . ergoemacs-forward-block) (M-up . ergoemacs-backward-block) (C-right . forward-word) (C-left . backward-word) (C-end . end-of-buffer) (C-home . beginning-of-buffer) (end . move-end-of-line) (home . move-beginning-of-line) (C-delete . kill-word) (27 keymap (S-prior . backward-page) (S-next . forward-page) (f4 . ergoemacs-delete-frame) (down . ergoemacs-forward-block) (up . ergoemacs-backward-block) (delete . kill-word)) (M-delete . kill-word) (delete . delete-char) (33554446 . make-frame-command) (22 . ergoemacs-paste) (S-insert . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle) (C-insert . ergoemacs-copy-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (S-delete . ergoemacs-cut-line-or-region) (33554458 . ergoemacs-redo) (26 . undo) (1 . mark-whole-buffer) (16 . ergoemacs-print-buffer-confirm) (33554451 . write-file) (19 . save-buffer) (6 . isearch-forward) (23 . ergoemacs-close-current-buffer) (33554452 . ergoemacs-open-last-closed) (33554447 . ergoemacs-open-in-external-app) (15 . find-file) (14 . ergoemacs-new-empty-buffer) (tool-bar keymap (kill-buffer . ergoemacs-close-current-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) standard-fixed us))))) (keymap (f4 . ergoemacs-paste) (f2 . ergoemacs-cut-line-or-region) (f8 keymap (f9 . highlight-symbol-query-replace) (f8 . highlight-symbol-at-point) (46 . isearch-forward-symbol-at-point) (95 . isearch-forward-symbol) (119 . isearch-forward-word) (104 keymap (119 . hi-lock-write-interactive-patterns) (102 . hi-lock-find-patterns) (117 . unhighlight-regexp) (46 . highlight-symbol-at-point) (108 . highlight-lines-matching-regexp) (112 . highlight-phrase) (114 . highlight-regexp)) (111 . occur)) (f6 . ergoemacs-unchorded-alt-modal) (f3 . ergoemacs-copy-line-or-region) (f12 . next-line) (f11 . previous-line) (S-f3 . ergoemacs-toggle-letter-case) (M-f5 . ergoemacs-redo) (M-f3 . ergoemacs-copy-all) (27 keymap (f5 . ergoemacs-redo) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all)) (M-f2 . ergoemacs-cut-all) (C-f9 . highlight-symbol-next) (C-f8 . highlight-symbol-prev) (C-f5 . ergoemacs-redo) (C-f4 . ergoemacs-paste-cycle) (C-f3 . ergoemacs-copy-all) (C-f2 . ergoemacs-cut-all) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) fn-keys us))))) (keymap (menu keymap (114 keymap (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . ergoemacs-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (apps keymap (114 keymap (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . ergoemacs-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps us))))) (keymap (menu keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (apps keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-toggle us))))) (keymap (menu keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (apps keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-apps us))))) (keymap (menu keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (apps keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) apps-punctuation us))))) (keymap (25 . ergoemacs-redo) (33554458 . ergoemacs-redo) (26 . undo) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (27 keymap (122 . undo) (90 . undo) (88 . ergoemacs-cut-all) (67 . ergoemacs-copy-all) (86 . ergoemacs-paste-cycle) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) copy us))))) (keymap (27 keymap (65 . shell-command) (97 . execute-extended-command)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) execute us))))) (keymap (27 keymap (13 . electric-newline-and-maybe-indent)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) fixed-newline us))))) (keymap (f1 keymap (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (8 keymap (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) help us))))) (keymap (27 keymap (71 . ergoemacs-kill-line-backward) (103 . kill-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) kill-line us))))) (keymap (27 keymap (98 . avy-goto-word-or-subword-1) (112 . recenter-top-bottom)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) misc us))))) (keymap (M-right . ergoemacs-forward-close-bracket) (M-left . ergoemacs-backward-open-bracket) (27 keymap (right . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (76 . ergoemacs-forward-close-bracket) (74 . ergoemacs-backward-open-bracket)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-bracket us))))) (keymap (27 keymap (78 . ergoemacs-end-or-beginning-of-buffer) (110 . ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-buffer us))))) (keymap (C-M-i . backward-paragraph) (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (C-i . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-char us))))) (keymap (27 keymap (72 . move-end-of-line) (104 . move-beginning-of-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-line us))))) (keymap (27 keymap (75 . scroll-up-command) (73 . scroll-down-command) (11 . scroll-other-window) (33554441 . scroll-other-window-down)) (C-M-I . scroll-other-window-down) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-page us))))) (keymap (27 keymap (79 . forward-paragraph) (85 . backward-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-paragraph us))))) (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) move-word us))))) (keymap (27 keymap (37 . query-replace-regexp) (53 . query-replace) (89 . isearch-backward) (121 . isearch-forward)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) search us))))) (keymap (27 keymap (55 . ergoemacs-select-current-line) (54 . ergoemacs-select-current-block) (42 . ergoemacs-select-text-in-quote) (56 . ergoemacs-extend-selection) (33554464 . mark-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) select-items us))))) (keymap (27 keymap (36 . split-window-right) (52 . split-window-below) (50 . delete-window) (51 . delete-other-windows) (96 . ergoemacs-switch-to-next-frame) (126 . ergoemacs-switch-to-previous-frame) (83 . ergoemacs-move-cursor-previous-pane) (115 . ergoemacs-move-cursor-next-pane)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) switch us))))) (keymap (27 keymap (113 . ergoemacs-compact-uncompact-block) (84 . flyspell-auto-correct-word) (116 . ergoemacs-call-keyword-completion) (47 . ergoemacs-toggle-letter-case) (63 . ergoemacs-toggle-camel-case) (119 . ergoemacs-shrink-whitespaces) (39 . comment-dwim)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) text-transform us))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870912) ergoemacs-undefined us)))) (19 . ergoemacs-map-undefined) (67108911 . ergoemacs-map-undefined) (31 . ergoemacs-map-undefined) (25 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (11 . ergoemacs-map-undefined) (12 . ergoemacs-map-undefined) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (5 . ergoemacs-map-undefined) (1 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (18 . ergoemacs-map-undefined) (24 keymap (107 . ergoemacs-map-undefined) (104 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (19 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (117 . ergoemacs-map-undefined) (50 . ergoemacs-map-undefined) (51 . ergoemacs-map-undefined) (48 . ergoemacs-map-undefined) (49 . ergoemacs-map-undefined)) (27 keymap (121 . ergoemacs-map-undefined) (119 . ergoemacs-map-undefined) (33 . ergoemacs-map-undefined) (120 . ergoemacs-map-undefined) (60 . ergoemacs-map-undefined) (62 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (118 . ergoemacs-map-undefined) (125 . ergoemacs-map-undefined) (123 . ergoemacs-map-undefined) (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined) (67108901 . ergoemacs-map-undefined) (37 . ergoemacs-map-undefined) (59 . ergoemacs-map-undefined))) keymap #^[nil nil keymap 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mode-specific-command-prefix delete-char move-end-of-line forward-char keyboard-quit help-command indent-for-tab-command electric-newline-and-maybe-indent kill-line recenter-top-bottom newline next-line open-line previous-line quoted-insert isearch-backward isearch-forward transpose-chars universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil undo self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] #^^[1 0 #^^[2 0 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mode-specific-command-prefix delete-char move-end-of-line forward-char keyboard-quit help-command indent-for-tab-command electric-newline-and-maybe-indent kill-line recenter-top-bottom newline next-line open-line previous-line quoted-insert isearch-backward isearch-forward transpose-chars universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil undo self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -536870912))) (C-M-print . pr-txt-fast-fire) (C-print . pr-txt-fast-fire) (S-print . pr-ps-mode-using-ghostscript) (M-print . pr-ps-mode-using-ghostscript) (print . pr-ps-fast-fire) (f12 . sr-speedbar-toggle) (S-mouse-3 . kmacro-end-call-mouse) (C-wheel-down . mwheel-scroll) (S-wheel-down . mwheel-scroll) (wheel-down . mwheel-scroll) (C-wheel-up . mwheel-scroll) (S-wheel-up . mwheel-scroll) (wheel-up . mwheel-scroll) (paste . clipboard-yank) (copy . clipboard-kill-ring-save) (cut . clipboard-kill-region) (f18 . clipboard-yank) (f16 . clipboard-kill-ring-save) (f20 . clipboard-kill-region) (rwindow . ignore) (lwindow . ignore) (language-change . ignore) (C-drag-n-drop . w32-drag-n-drop-other-frame) (drag-n-drop . w32-drag-n-drop) (tool-bar menu-item "tool bar" ignore :filter tool-bar-make-keymap) (f10 . menu-bar-open) (bottom-divider keymap (down-mouse-1 . mouse-drag-mode-line)) (right-divider keymap (down-mouse-1 . mouse-drag-vertical-line)) (vertical-line keymap (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-vertical-line) (C-mouse-2 . mouse-split-window-vertically)) (vertical-scroll-bar keymap (mouse-1 . scroll-bar-toolkit-scroll) (C-mouse-2 . mouse-split-window-vertically)) (header-line keymap (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-header-line)) (mode-line keymap (C-mouse-2 . mouse-split-window-horizontally) (mouse-3 . mouse-delete-window) (mouse-2 . mouse-delete-other-windows) (down-mouse-1 . mouse-drag-mode-line) (drag-mouse-1 . mouse-select-window) (mouse-1 . mouse-select-window)) (C-down-mouse-3 menu-item "Menu Bar" ignore :filter (lambda (_) (if (zerop (or (frame-parameter nil (quote menu-bar-lines)) 0)) (mouse-menu-bar-map) (mouse-menu-major-mode-map)))) (S-down-mouse-1 . mouse-appearance-menu) (C-down-mouse-1 . mouse-buffer-menu) (mouse-3 . mouse-save-then-kill) (mouse-2 . mouse-yank-primary) (triple-mouse-1 . mouse-set-point) (double-mouse-1 . mouse-set-point) (drag-mouse-1 . mouse-set-region) (mouse-1 . mouse-set-point) (down-mouse-1 . mouse-drag-region) (M-mouse-2 . mouse-yank-secondary) (M-mouse-3 . mouse-secondary-save-then-kill) (M-down-mouse-1 . mouse-drag-secondary) (M-drag-mouse-1 . mouse-set-secondary) (M-mouse-1 . mouse-start-secondary) (C-down-mouse-2 . facemenu-menu) (M-f10 . toggle-frame-maximized) (f11 . toggle-frame-fullscreen) (compose-last-chars . compose-last-chars) (f1 . help-command) (help . help-command) (f2 . bs-show) (menu-bar keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -536870747))) (help-menu "Help" keymap (emacs-tutorial menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs") (emacs-tutorial-language-specific menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)") (emacs-faq menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs") (emacs-news menu-item "Emacs News" view-emacs-news :help "New features of this version") (emacs-known-problems menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs") (emacs-manual-bug menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug") (send-emacs-bug-report menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers") (emacs-psychotherapist menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better") (sep1 "--") (search-documentation menu-item "Search Documentation" (keymap (emacs-terminology menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual") (lookup-subject-in-emacs-manual menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual") (lookup-subject-in-elisp-manual menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual") (lookup-key-in-manual menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key") (lookup-command-in-manual menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command") (sep1 "--") (find-commands-by-name menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp") (find-options-by-name menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp") (find-option-by-value menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp") (find-any-object-by-name menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp") (search-documentation-strings menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp") "Search Documentation")) (describe menu-item "Describe" (keymap (describe-mode menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode") (describe-key-1 menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item") (describe-function menu-item "Describe Function..." describe-function :help "Display documentation of function/command") (describe-variable menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option") (describe-face menu-item "Describe Face..." describe-face :help "Display the properties of a face") (describe-package menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package") (describe-current-display-table menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table") (list-keybindings menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)") (separator-desc-mule "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support))) (describe-input-method menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method") (describe-coding-system menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))) (describe-coding-system-briefly menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))) (mule-diag menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings") "Describe")) (emacs-manual menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features") (more-manuals menu-item "More Manuals" (keymap (emacs-lisp-intro menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming") (emacs-lisp-reference menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual") (other-manuals menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals") (lookup-subject-in-all-manuals menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals") (order-emacs-manuals menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation") (sep2 "--") (man menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries") "More Manuals")) (find-emacs-packages menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword") (external-packages menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs") (sep2 "--") (getting-new-versions menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs") (describe-copying menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)") (describe-no-warranty menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY") (sep4 "--") (about-emacs menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help") (about-gnu-project menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux") "Help") (file "File" keymap (new-file menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file") (open-file menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer") (dired menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files") (insert-file menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer") (kill-buffer menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer") (separator-save "--") (save-buffer menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file") (write-file menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file") (revert-buffer menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file") (recover-session menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session") (separator-print "--") (Print menu-item "Print" (keymap "Print" (Printing\ Interface menu-item "Printing Interface" pr-interface :help "Use buffer interface instead of menu interface") (nil menu-item "--") (PostScript\ Preview menu-item "PostScript Preview" (keymap "PostScript Preview" (Directory menu-item "Directory" (keymap "Directory" (1-up menu-item "1-up" menu-function-45 :key-sequence nil) (2-up menu-item "2-up" menu-function-46 :key-sequence nil) (4-up menu-item "4-up" menu-function-47 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-48 :keys (pr-ps-buffer-preview))) :enable (not pr-spool-p)) (Buffer menu-item "Buffer" (keymap "Buffer" (1-up menu-item "1-up" menu-function-50 :key-sequence nil) (2-up menu-item "2-up" menu-function-51 :key-sequence nil) (4-up menu-item "4-up" menu-function-52 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-53 :keys (pr-ps-buffer-preview))) :enable (not pr-spool-p)) (Region menu-item "Region" (keymap "Region" (1-up menu-item "1-up" menu-function-55 :key-sequence nil) (2-up menu-item "2-up" menu-function-56 :key-sequence nil) (4-up menu-item "4-up" menu-function-57 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-58 :keys (pr-ps-region-preview))) :enable (and (not pr-spool-p) (ps-mark-active-p))) (Mode menu-item "Mode" (keymap "Mode" (1-up menu-item "1-up" menu-function-60 :key-sequence nil) (2-up menu-item "2-up" menu-function-61 :key-sequence nil) (4-up menu-item "4-up" menu-function-62 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-63 :keys (pr-ps-mode-preview))) :enable (and (not pr-spool-p) (pr-mode-alist-p))) (File menu-item "File" (keymap "File" (No\ Preprocessing\.\.\. menu-item "No Preprocessing..." menu-function-65 :keys (pr-ps-file-preview) :help "Preview PostScript file") (nil menu-item "--") (PostScript\ Utility menu-item "mpage" (keymap "PostScript Utility" (mpage menu-item "mpage" menu-function-109 :key-sequence nil :button (:radio eq pr-ps-utility (quote mpage))) (psnup menu-item "psnup" menu-function-110 :key-sequence nil :button (:radio eq pr-ps-utility (quote psnup)))) :enable pr-ps-utility-alist :help "Select PostScript utility") (nil-3 menu-item "--") (1-up\.\.\. menu-item "1-up..." menu-function-66 :key-sequence nil :enable pr-ps-utility-alist) (2-up\.\.\. menu-item "2-up..." menu-function-67 :key-sequence nil :enable pr-ps-utility-alist) (4-up\.\.\. menu-item "4-up..." menu-function-68 :key-sequence nil :enable pr-ps-utility-alist) (Other\.\.\. menu-item "Other..." menu-function-69 :enable pr-ps-utility-alist :keys (pr-ps-file-up-preview)) (nil-8 menu-item "--") (Landscape menu-item "Landscape" pr-toggle-file-landscape-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-landscape) :help "Toggle landscape for PostScript file") (Duplex menu-item "Duplex" pr-toggle-file-duplex-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-duplex) :help "Toggle duplex for PostScript file") (Tumble menu-item "Tumble" pr-toggle-file-tumble-menu :enable (and pr-file-duplex pr-ps-utility-alist) :button (:toggle . pr-file-tumble) :help "Toggle tumble for PostScript file"))) (Despool\.\.\. menu-item "Despool..." menu-function-70 :enable pr-spool-p :keys (pr-despool-preview) :help "Despool PostScript buffer to printer or file (C-u)")) :help "Preview PostScript instead of sending to printer" :visible (pr-visible-p (quote postscript))) (PostScript\ Print menu-item "PostScript Print" (keymap "PostScript Print" (Directory menu-item "Directory" (keymap "Directory" (1-up menu-item "1-up" menu-function-72 :key-sequence nil) (2-up menu-item "2-up" menu-function-73 :key-sequence nil) (4-up menu-item "4-up" menu-function-74 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-75 :keys (pr-ps-buffer-ps-print)))) (Buffer menu-item "Buffer" (keymap "Buffer" (1-up menu-item "1-up" menu-function-76 :key-sequence nil) (2-up menu-item "2-up" menu-function-77 :key-sequence nil) (4-up menu-item "4-up" menu-function-78 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-79 :keys (pr-ps-buffer-ps-print)))) (Region menu-item "Region" (keymap "Region" (1-up menu-item "1-up" menu-function-80 :key-sequence nil) (2-up menu-item "2-up" menu-function-81 :key-sequence nil) (4-up menu-item "4-up" menu-function-82 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-83 :keys (pr-ps-region-ps-print))) :enable (ps-mark-active-p)) (Mode menu-item "Mode" (keymap "Mode" (1-up menu-item "1-up" menu-function-85 :key-sequence nil) (2-up menu-item "2-up" menu-function-86 :key-sequence nil) (4-up menu-item "4-up" menu-function-87 :key-sequence nil) (Other\.\.\. menu-item "Other..." menu-function-88 :keys (pr-ps-mode-ps-print))) :enable (pr-mode-alist-p)) (File menu-item "File" (keymap "File" (No\ Preprocessing\.\.\. menu-item "No Preprocessing..." menu-function-90 :keys (pr-ps-file-ps-print) :help "Send PostScript file to printer") (nil menu-item "--") (PostScript\ Utility menu-item "mpage" (keymap "PostScript Utility" (mpage menu-item "mpage" menu-function-109 :key-sequence nil :button (:radio eq pr-ps-utility (quote mpage))) (psnup menu-item "psnup" menu-function-110 :key-sequence nil :button (:radio eq pr-ps-utility (quote psnup)))) :enable pr-ps-utility-alist :help "Select PostScript utility") (nil-3 menu-item "--") (1-up\.\.\. menu-item "1-up..." menu-function-91 :key-sequence nil :enable pr-ps-utility-alist) (2-up\.\.\. menu-item "2-up..." menu-function-92 :key-sequence nil :enable pr-ps-utility-alist) (4-up\.\.\. menu-item "4-up..." menu-function-93 :key-sequence nil :enable pr-ps-utility-alist) (Other\.\.\. menu-item "Other..." menu-function-94 :enable pr-ps-utility-alist :keys (pr-ps-file-up-ps-print)) (nil-8 menu-item "--") (Landscape menu-item "Landscape" pr-toggle-file-landscape-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-landscape) :help "Toggle landscape for PostScript file") (Duplex menu-item "Duplex" pr-toggle-file-duplex-menu :enable pr-ps-utility-alist :button (:toggle . pr-file-duplex) :help "Toggle duplex for PostScript file") (Tumble menu-item "Tumble" pr-toggle-file-tumble-menu :enable (and pr-file-duplex pr-ps-utility-alist) :button (:toggle . pr-file-tumble) :help "Toggle tumble for PostScript file"))) (Despool\.\.\. menu-item "Despool..." menu-function-95 :enable pr-spool-p :keys (pr-despool-ps-print) :help "Despool PostScript buffer to printer or file (C-u)")) :help "Send PostScript to printer or file (C-u)" :visible (pr-visible-p (quote postscript))) (PostScript\ Printers menu-item "PostScript Printer: default" (keymap "PostScript Printers" (default menu-item "default" menu-function-107 :key-sequence nil :button (:radio eq pr-ps-name (quote default)))) :enable pr-ps-printer-alist :visible (pr-visible-p (quote postscript)) :help "Select PostScript printer") (nil-5 menu-item "--") (Printify menu-item "Printify" (keymap "Printify" (Directory menu-item "Directory" pr-printify-directory) (Buffer menu-item "Buffer" pr-printify-buffer) (Region menu-item "Region" pr-printify-region :enable (ps-mark-active-p))) :help "Replace non-printing chars with printable representations." :visible (pr-visible-p (quote text))) (Print menu-item "Print" (keymap "Print" (Directory menu-item "Directory" pr-txt-directory) (Buffer menu-item "Buffer" pr-txt-buffer) (Region menu-item "Region" pr-txt-region :enable (ps-mark-active-p)) (Mode menu-item "Mode" pr-txt-mode :enable (pr-mode-alist-p))) :help "Send text to printer" :visible (pr-visible-p (quote text))) (Text\ Printers menu-item "Text Printer: default" (keymap "Text Printers" (default menu-item "default" menu-function-108 :key-sequence nil :button (:radio eq pr-txt-name (quote default)))) :enable pr-txt-printer-alist :visible (pr-visible-p (quote text)) :help "Select text printer") (nil-9 menu-item "--") (Landscape menu-item "Landscape" pr-toggle-landscape-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-landscape-mode)) (Print\ Header menu-item "Print Header" pr-toggle-header-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-print-header)) (Print\ Header\ Frame menu-item "Print Header Frame" pr-toggle-header-frame-menu :enable ps-print-header :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-print-header-frame)) (Line\ Number menu-item "Line Number" pr-toggle-line-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-line-number)) (Zebra\ Stripes menu-item "Zebra Stripes" pr-toggle-zebra-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-zebra-stripes)) (Duplex menu-item "Duplex" pr-toggle-duplex-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-spool-duplex)) (Tumble menu-item "Tumble" pr-toggle-tumble-menu :enable ps-spool-duplex :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-spool-tumble)) (Upside-Down menu-item "Upside-Down" pr-toggle-upside-down-menu :visible (pr-visible-p (quote postscript-options)) :button (:toggle . ps-print-upside-down)) (Print\ All\ Pages menu-item "Print All Pages" (keymap "Print All Pages" (All\ Pages menu-item "All Pages" menu-function-99 :key-sequence nil :button (:radio eq ps-even-or-odd-pages nil)) (Even\ Pages menu-item "Even Pages" menu-function-100 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote even-page))) (Odd\ Pages menu-item "Odd Pages" menu-function-101 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote odd-page))) (Even\ Sheets menu-item "Even Sheets" menu-function-102 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote even-sheet))) (Odd\ Sheets menu-item "Odd Sheets" menu-function-103 :key-sequence nil :button (:radio eq ps-even-or-odd-pages (quote odd-sheet)))) :help "Select odd/even pages/sheets to print" :visible (pr-visible-p (quote postscript-options))) (nil-19 menu-item "--") (Spool\ Buffer menu-item "Spool Buffer" pr-toggle-spool-menu :visible (pr-visible-p (quote postscript-process)) :button (:toggle . pr-spool-p) :help "Toggle PostScript spooling") (Print\ with\ faces menu-item "Print with faces" pr-toggle-faces-menu :visible (pr-visible-p (quote postscript-process)) :button (:toggle . pr-faces-p) :help "Toggle PostScript printing with faces") (Print\ via\ Ghostscript menu-item "Print via Ghostscript" pr-toggle-ghostscript-menu :visible (pr-visible-p (quote postscript-process)) :button (:toggle . pr-print-using-ghostscript) :help "Toggle PostScript generation using ghostscript") (nil-23 menu-item "--") (Auto\ Region menu-item "Auto Region" pr-toggle-region-menu :visible (pr-visible-p (quote printing)) :button (:toggle . pr-auto-region)) (Auto\ Mode menu-item "Auto Mode" pr-toggle-mode-menu :visible (pr-visible-p (quote printing)) :button (:toggle . pr-auto-mode)) (Menu\ Lock menu-item "Menu Lock" pr-toggle-lock-menu :visible (pr-visible-p (quote printing)) :button (:toggle . pr-menu-lock)) (nil-27 menu-item "--") (Customize menu-item "Customize" (keymap "Customize" (printing menu-item "printing" pr-customize) (ps-print menu-item "ps-print" ps-print-customize) (lpr menu-item "lpr" lpr-customize)) :visible (pr-visible-p (quote help))) (Show\ Settings menu-item "Show Settings" (keymap "Show Settings" (printing menu-item "printing" pr-show-pr-setup) (ps-print menu-item "ps-print" pr-show-ps-setup) (lpr menu-item "lpr" pr-show-lpr-setup)) :visible (pr-visible-p (quote help))) (Help menu-item "Help" pr-help :visible (pr-visible-p (quote help))))) (separator-window "--") (new-window-below menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one") (new-window-on-right menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one") (one-window menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame") (separator-frame "--") (make-frame menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame") (make-frame-on-display menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display") (delete-this-frame menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame") (separator-exit "--") (exit-emacs menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit") "File") (edit "Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (cut menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position") (copy menu-item "Copy" kill-ring-save :enable mark-active :help "Copy text in region between mark and current position" :keys "\\[kill-ring-save]") (paste menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search "--") (search menu-item "Search" (keymap (search-forward menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string") (search-backward menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string") (re-search-forward menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression") (re-search-backward menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression") (separator-repeat-search "--") (repeat-search-fwd menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-search-back menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards") (separator-tag-search "--") (tags-srch menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files") (tags-continue menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation") (separator-tag-isearch "--") (i-search menu-item "Incremental Search" (keymap (isearch-forward menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it") (isearch-forward-regexp menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (isearch-backward-regexp menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") "Incremental Search")) "Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (go-to-pos menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N") (beg-of-buf menu-item "Goto Beginning of Buffer" beginning-of-buffer) (end-of-buf menu-item "Goto End of Buffer" end-of-buffer) (separator-tags "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To")) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) (separator-bookmark "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit") (options "Options" keymap (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping")) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error)))) (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit)))) (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (set-language-environment menu-item "Set Language Environment" (keymap (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese "Chinese" . setup-chinese-environment-map) (Cyrillic "Cyrillic" . setup-cyrillic-environment-map) (Indian "Indian" . setup-indian-environment-map) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European "European" . setup-european-environment-map) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment))) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method) (set-input-method menu-item "Select Input Method..." set-input-method) (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer") "Set Coding System") :enable (default-value (quote enable-multibyte-characters))) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language") (describe-input-method menu-item "Describe Input Method" describe-input-method) (describe-coding-system menu-item "Describe Coding System..." describe-coding-system) (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)")) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (showhide-tool-bar menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines)))) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p)) (showhide-fringe menu-item "Fringe" (keymap (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe") "Fringe") :visible (display-graphic-p)) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode)))) "Show/Hide")) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize")) "Options") (buffer "Buffers" keymap "Buffers" [("*GNU Emacs*  %" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*GNU Emacs*")) ("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *%" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*"))] (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window") (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers")) (tools "Tools" keymap (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (spell menu-item "Spell Checking" ispell-menu-map) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu) (epatch menu-item "Apply Patch" menu-bar-epatch-menu) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter vc-menu-map-filter) (separator-vc "--") (gnus menu-item "Read Net News" gnus :help "Read network news groups") (rmail menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail") (compose-mail menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message") (directory-search menu-item "Directory Search" eudc-tools-menu) (browse-web menu-item "Browse the Web..." browse-web) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption")) (separator-games "--") (games menu-item "Games" (keymap (5x5 menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board") (adventure menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs") (black-box menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays") (bubbles menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves") (gomoku menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)") (hanoi menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs") (land menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks") (life menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves") (mult menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication") (pong menu-item "Pong" pong :help "Bounce the ball to your opponent") (snake menu-item "Snake" snake :help "Move snake around avoiding collisions") (solitaire menu-item "Solitaire" solitaire :help "Get rid of all the stones") (tetris menu-item "Tetris" tetris :help "Falling blocks game") (zone menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle") "Games")) "Tools") (mouse-1 . tmm-menubar-mouse))) (f4 . kmacro-end-or-call-macro) (f3 . kmacro-start-macro-or-insert-counter) (C-M-end . end-of-defun) (C-M-home . beginning-of-defun) (C-M-down . down-list) (C-M-up . backward-up-list) (C-M-right . forward-sexp) (C-M-left . backward-sexp) (S-delete . kill-region) (C-backspace . backward-kill-word) (C-delete . kill-word) (C-left . left-word) (C-right . right-word) (M-left . left-word) (M-right . right-word) (mouse-movement . ignore) (deletechar . delete-forward-char) (deleteline . kill-line) (insertline . open-line) (open . find-file) (again . repeat-complex-command) (redo . repeat-complex-command) (undo . undo) (S-insertchar . yank) (C-insertchar . kill-ring-save) (insertchar . overwrite-mode) (S-insert . yank) (C-insert . kill-ring-save) (insert . overwrite-mode) (execute . execute-extended-command) (M-begin . beginning-of-buffer-other-window) (begin . beginning-of-buffer) (M-end . end-of-buffer-other-window) (C-end . end-of-buffer) (end . move-end-of-line) (M-prior . scroll-other-window-down) (M-next . scroll-other-window) (C-next . scroll-left) (C-prior . scroll-right) (C-down . forward-paragraph) (C-up . backward-paragraph) (next . scroll-up-command) (prior . scroll-down-command) (down . next-line) (right . right-char) (up . previous-line) (left . left-char) (M-home . beginning-of-buffer-other-window) (C-home . beginning-of-buffer) (home . move-beginning-of-line) (C-S-backspace . kill-whole-line) (find . search-forward) (menu . execute-extended-command) (67108896 . set-mark-command) (67108909 . negative-argument) (67108921 . digit-argument) (67108920 . digit-argument) (67108919 . digit-argument) (67108918 . digit-argument) (67108917 . digit-argument) (67108916 . digit-argument) (67108915 . digit-argument) (67108914 . digit-argument) (67108913 . digit-argument) (67108912 . digit-argument) (XF86Back . previous-buffer) (XF86Forward . next-buffer) (67108911 . undo) (make-frame-visible . ignore-event) (iconify-frame . ignore-event) (delete-frame . handle-delete-frame) (select-window . handle-select-window) (switch-frame . handle-switch-frame)) ergoemacs-map--undefined-keys-cc1a9c480b5f2b7156fb87dc58b6d3c1 ([134217787] [24 49] [24 48] [24 51] [24 50] [18] [134217765] [201326629] [134217826] [134217830] [134217828] [134217851] [134217853] [134217846] [22] [134217750] [1] [5] [2] [6] [16] [14] [67108896] [4] [134217790] [134217788] [12] [11] [134217848] [134217761] [23] [134217847] [25] [134217849] [31] [67108911] [24 117] [24 6] [19] [24 19] [24 23] [24 104] [24 107]) lisp-interaction-mode-852438d026c018c4307b916406f98c62--536870875-composed-key-cc1a9c480b5f2b7156fb87dc58b6d3c1 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870875) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point) (electric-newline-and-maybe-indent . eval-print-last-sexp)) (27 keymap (100 . backward-delete-char-untabify) (13 . eval-print-last-sexp)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870875) ergoemacs-mode us)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point) (electric-newline-and-maybe-indent . eval-print-last-sexp)) (27 keymap (100 . backward-delete-char-untabify) (13 . eval-print-last-sexp)))) lisp-interaction-mode-852438d026c018c4307b916406f98c62-unbound-keymap-cc1a9c480b5f2b7156fb87dc58b6d3c1 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870875) ergoemacs-unbound us))))) :minor-mode-map-alist:visual-line-mode--536870824-composed-key-cc1a9c480b5f2b7156fb87dc58b6d3c1 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870824) ergoemacs-mode us)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870824) ergoemacs-mode us)))))) :minor-mode-map-alist:visual-line-mode-unbound-keymap-cc1a9c480b5f2b7156fb87dc58b6d3c1 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870824) ergoemacs-unbound us))))) fundamental-mode--536870851-composed-key-cc1a9c480b5f2b7156fb87dc58b6d3c1 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870851) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (delete-backward-char . scroll-down-command)) (27 keymap (100 . scroll-down-command)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870851) ergoemacs-mode us)))) (ergoemacs-remap keymap (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (delete-backward-char . scroll-down-command)) (27 keymap (100 . scroll-down-command)))) fundamental-mode-unbound-keymap-cc1a9c480b5f2b7156fb87dc58b6d3c1 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870851) ergoemacs-unbound us))))) :minor-mode-map-alist:undo-tree-mode--536870737-composed-key-cc1a9c480b5f2b7156fb87dc58b6d3c1 (((keymap (27 keymap (95)) (67108927)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870737) ergoemacs-mode us)))) (67108911 . info) (31 . ergoemacs-map-undefined) (ergoemacs-remap keymap (ergoemacs-map-undefined . undo-tree-undo) (info . undo-tree-undo)) (67108927 . info))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870737) ergoemacs-mode us)))) (67108911 . info) (31 . ergoemacs-map-undefined) (ergoemacs-remap keymap (ergoemacs-map-undefined . undo-tree-undo) (info . undo-tree-undo)) (67108927 . info))) :minor-mode-map-alist:undo-tree-mode-unbound-keymap-cc1a9c480b5f2b7156fb87dc58b6d3c1 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-536870737) ergoemacs-unbound us))))) ergoemacs-translate--parent-map-536870910-composed-key-cc1a9c480b5f2b7156fb87dc58b6d3c1 (((keymap (menu . ergoemacs-command-loop--swap-translation) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -536870768))) (apps . ergoemacs-command-loop--swap-translation)) (keymap (f2 . ergoemacs-command-loop--force-universal-argument)) (keymap (127 . ergoemacs-command-loop--force-undo-last)) (keymap)) nil (keymap)))) nil] ergoemacs-map-properties--indirect-keymaps [object pcache-entry "pcache-entry" 1467915332.742 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (describe-european-environment-map (:map-key -536870905) facemenu-special-menu (:map-key -536870903) facemenu-face-menu (:map-key -536870901) setup-indian-environment-map (:map-key -536870881) menu-bar-ediff-menu (:map-key -536870880) facemenu-indentation-menu (:map-key -536870879) menu-bar-epatch-menu (:map-key -536870869) eudc-tools-menu (:map-key -536870867) vc-prefix-map (:map-key -536870862) facemenu-background-menu (:map-key -536870859) bookmark-map (:map-key -536870856) menu-bar-ediff-misc-menu (:map-key -536870845) setup-cyrillic-environment-map (:map-key -536870841) ispell-menu-map (:map-key -536870838) vc-menu-map (:map-key -536870835) cvs-global-menu (:map-key -536870829) setup-chinese-environment-map (:map-key -536870828) facemenu-justification-menu (:map-key -536870826) facemenu-menu (:map-key -536870816) facemenu-keymap (:map-key -536870810) describe-indian-environment-map (:map-key -536870799) kmacro-keymap (:map-key -536870798) setup-european-environment-map (:map-key -536870791) describe-cyrillic-environment-map (:map-key -536870790) menu-bar-bookmark-map (:map-key -536870789) describe-chinese-environment-map (:map-key -536870781) menu-bar-ediff-merge-menu (:map-key -536870774) facemenu-foreground-menu (:map-key -536870770) menu-function-16 (:map-key -536870769))) nil] ergoemacs-map-properties--key-struct [object pcache-entry "pcache-entry" 1467915332.742 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (536870909 (:map-key 536870909) 536870910 (:map-key 536870910) -536870911 (:map-key -536870911) -536870910 (:map-key -536870910) -536870909 (:map-key -536870909) -536870908 (:map-key -536870908) -536870912 (:map-key -536870912) nil nil -536870875 (:map-key -536870875 :parent (:map-key -536870793 :parent (:map-key -536870825))) -536870745 (:map-key -536870745) -536870744 (:map-key -536870744) -536870743 (:map-key -536870743) -536870742 (:map-key -536870742) -536870741 (:map-key -536870741) -536870740 (:map-key -536870740) -536870739 (:map-key -536870739) -536870824 (:map-key -536870824) -536870851 (:map-key -536870851 :parent (:map-key -536870819)) -536870738 (:map-key -536870738) -536870737 (:map-key -536870737) -536870736 (:map-key -536870736))) nil] ergoemacs-map-properties--plist-hash [object pcache-entry "pcache-entry" 1467915332.788 7776000 #s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8 data ((:map-key 536870909) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--modal-parent-map))) (:map-key 536870910) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--parent-map) :use-local-unbind-list-key no)) -536870911 (ergoemacs-normal-translation-local-map ergoemacs-translate--normal-map) (:map-key -536870911) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t)) -536870910 (ergoemacs-ctl-to-alt-translation-local-map ergoemacs-translate--ctl-to-alt-map) (:map-key -536870910) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t)) -536870909 (ergoemacs-unchorded-ctl-translation-local-map ergoemacs-translate--unchorded-ctl-map) (:map-key -536870909) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t)) -536870908 (ergoemacs-unchorded-alt-translation-local-map ergoemacs-translate--unchorded-alt-map) (:map-key -536870908) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t)) -536870907 (esc-map) -536870906 (mode-line-column-line-number-mode-map) -536870905 (describe-european-environment-map) -536870904 (ergoemacs-timing-jump-map) -536870903 (facemenu-special-menu) -536870902 (ctl-x-map) -536870901 (facemenu-face-menu) -536870900 (read-expression-map) -536870899 (special-event-map) -536870898 (search-map) -536870897 (completion-in-region-mode-map) -536870896 (x-alternatives-map) -536870895 (multi-query-replace-map) -536870894 (menu-bar-line-wrapping-menu) -536870893 (minibuffer-local-shell-command-map) -536870892 (edit-tab-stops-map) -536870891 (menu-bar-showhide-scroll-bar-menu) -536870890 (mode-line-mode-menu) -536870889 (menu-bar-custom-menu) -536870888 (menu-bar-manuals-menu) -536870887 (2C-mode-map) -536870886 (menu-bar-tools-menu) -536870885 (isearch-help-map) -536870884 (vc-mode-line-map) -536870883 (minibuffer-inactive-mode-map) -536870882 (button-map) -536870881 (setup-indian-environment-map) -536870880 (menu-bar-ediff-menu) -536870879 (facemenu-indentation-menu) -536870878 (minibuffer-local-map) -536870877 (menu-bar-files-menu menu-bar-file-menu) -536870876 (global-buffers-menu-map) -536870875 (lisp-interaction-mode-map) -536870874 (setup-language-environment-map) -536870873 (messages-buffer-mode-map) -536870872 (2C-minor-mode-map) -536870871 (Custom-mode-menu) -536870870 (emacs-lisp-mode-map) -536870869 (menu-bar-epatch-menu) -536870868 (minibuffer-local-ns-map) -536870867 (eudc-tools-menu) -536870866 (occur-mode-map) -536870865 (help-mode-map) -536870864 (pr-temp-menu) -536870863 (occur-edit-mode-map) -536870862 (vc-prefix-map) -536870861 (menu-bar-help-menu) -536870860 (menu-bar-showhide-fringe-menu) 536870909 (ergoemacs-translate--modal-parent-map) -536870859 (facemenu-background-menu) -536870858 (tty-menu-navigation-map) -536870857 (menu-bar-games-menu) -536870856 (bookmark-map) -536870855 (custom-mode-map) -536870854 (widget-field-keymap) -536870853 (key-translation-map) -536870852 (special-mode-map) -536870851 (splash-screen-keymap) -536870850 (minibuffer-local-filename-completion-map) -536870849 (menu-bar-search-menu) -536870848 (describe-language-environment-map) -536870847 (edit-abbrevs-mode-map edit-abbrevs-map) -536870846 (read-passwd-map) -536870845 (menu-bar-ediff-misc-menu) -536870844 (ergoemacs-timing-component-map) -536870843 (menu-bar-i-search-menu) -536870842 (menu-bar-goto-menu) -536870841 (setup-cyrillic-environment-map) -536870840 (goto-map) -536870839 (help-map) -536870838 (ispell-menu-map) -536870837 (mode-line-minor-mode-keymap) -536870836 (pr-interface-map) -536870835 (vc-menu-map) -536870834 (menu-bar-showhide-menu) -536870833 (occur-menu-map) -536870832 (ctl-x-5-map) -536870831 (input-decode-map) -536870830 (menu-bar-describe-menu) -536870829 (cvs-global-menu) -536870828 (setup-chinese-environment-map) -536870827 (menu-bar-search-documentation-menu) -536870826 (facemenu-justification-menu) -536870825 (prog-mode-map) -536870824 (visual-line-mode-map) -536870823 (tabulated-list-mode-map) -536870822 (ergoemacs-modal-ignored-keymap) -536870821 (minibuffer-local-must-match-map) -536870820 (mode-line-major-mode-keymap) -536870819 (button-buffer-map) -536870818 (package-menu-mode-map) -536870817 (widget-text-keymap) -536870816 (facemenu-menu) -536870815 (local-function-key-map) -536870814 (universal-argument-map) -536870813 (text-mode-map) -536870812 (mode-line-buffer-identification-keymap) -536870811 (minibuffer-local-completion-map) -536870810 (facemenu-keymap) -536870809 (ergoemacs-map-properties--global-map-before-ergoemacs) -536870808 (minibuffer-local-isearch-map) -536870807 (lisp-mode-map) -536870806 (widget-keymap) -536870805 (custom-mode-link-map) -536870804 (Buffer-menu-mode-map) -536870803 (mode-line-input-method-map) -536870802 (indent-rigidly-map) -536870801 (narrow-map) -536870800 (menu-bar-replace-menu) -536870799 (describe-indian-environment-map) -536870798 (kmacro-keymap) -536870797 (menu-bar-encryption-decryption-menu) -536870796 (menu-bar-edit-menu) -536870795 (query-replace-map) -536870794 (edmacro-mode-map) -536870793 (lisp-mode-shared-map) 536870910 (ergoemacs-translate--parent-map) -536870792 (ctl-x-r-map) -536870791 (setup-european-environment-map) -536870790 (describe-cyrillic-environment-map) -536870789 (menu-bar-bookmark-map) -536870788 (set-coding-system-map) -536870787 (completion-list-mode-map) -536870786 (kmacro-step-edit-map) -536870785 (mule-keymap) -536870784 (menu-bar-options-menu) -536870783 (menu-bar-showhide-fringe-ind-menu) -536870782 (function-key-map) -536870781 (describe-chinese-environment-map) -536870780 (abbrev-map) -536870779 (help-mode-menu) -536870778 (mode-line-coding-system-map) -536870777 (ctl-x-4-map) -536870776 (tabulated-list-sort-button-map) -536870775 (mule-menu-keymap) -536870774 (menu-bar-ediff-merge-menu) -536870773 (isearch-mode-map) -536870772 (custom-field-keymap) -536870771 (widget-key-sequence-map) -536870770 (facemenu-foreground-menu) (:map-key -536870912) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:extract-keys ([switch-frame] [select-window] [delete-frame] [67108911] [XF86Forward] [XF86Back] [67108912] [67108913] [67108914] [67108915] [67108916] [67108917] [67108918] [67108919] [67108920] [67108921] [67108909] [67108896] [menu] [find] [C-S-backspace] [home] [C-home] [M-home] [left] [up] [right] [down] [prior] [next] [C-up] [C-down] [C-prior] [C-next] [M-next] [M-prior] [end] [C-end] [M-end] [begin] [M-begin] [execute] [insert] [C-insert] [S-insert] [insertchar] [C-insertchar] [S-insertchar] [undo] [redo] [again] [open] [insertline] [deleteline] [deletechar] [mouse-movement] [M-right] [M-left] [C-right] [C-left] [C-delete] [C-backspace] [S-delete] [C-M-left] [C-M-right] [C-M-up] [C-M-down] [C-M-home] [C-M-end] [f3] [f4] [menu-bar mouse-1] [f2 50] [f2 f2] [f2 98] [f2 115] [help 8] [help help] [help f1] [help 46] [help 63] [help 1] [help 3] [help 4] [help 5] [help 6] [help 13] [help 14] [help 15] [help 16] [help 20] [help 23] [help 28] [help 67] [help 70] [help 73] [help 75] [help 76] [help 83] [help 97] [help 98] [help 99] [help 100] [help 101] [help 102] [help 103] [help 104] [help 105] [help 52 105] [help 107] [help 108] [help 109] [help 110] [help 112] [help 80] [help 114] [help 115] [help 116] [help 119] [help 118] [help 113] [f1 8] [f1 help] [f1 f1] [f1 46] [f1 63] [f1 1] [f1 3] [f1 4] [f1 5] [f1 6] [f1 13] [f1 14] [f1 15] [f1 16] [f1 20] [f1 23] [f1 28] [f1 67] [f1 70] [f1 73] [f1 75] [f1 76] [f1 83] [f1 97] [f1 98] [f1 99] [f1 100] [f1 101] [f1 102] [f1 103] [f1 104] [f1 105] [f1 52 105] [f1 107] [f1 108] [f1 109] [f1 110] [f1 112] [f1 80] [f1 114] [f1 115] [f1 116] [f1 119] [f1 118] [f1 113] [compose-last-chars] [f11] [M-f10] [M-mouse-1] [M-drag-mouse-1] [M-down-mouse-1] [M-mouse-3] [M-mouse-2] [down-mouse-1] [mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1] [mouse-2] [mouse-3] [C-down-mouse-1] [S-down-mouse-1] [mode-line mouse-1] [mode-line drag-mouse-1] [mode-line down-mouse-1] [mode-line mouse-2] [mode-line mouse-3] [mode-line C-mouse-2] [header-line down-mouse-1] [header-line mouse-1] [vertical-scroll-bar C-mouse-2] [vertical-scroll-bar mouse-1] [vertical-line C-mouse-2] [vertical-line down-mouse-1] [vertical-line mouse-1] [right-divider down-mouse-1] [bottom-divider down-mouse-1] [f10] [drag-n-drop] [C-drag-n-drop] [language-change] [lwindow] [rwindow] [wheel-up] [S-wheel-up] [C-wheel-up] [wheel-down] [S-wheel-down] [C-wheel-down] [S-mouse-3] [print] [M-print] [S-print] [C-print] [C-M-print] [127] [31] [29] [28] [27 67108912] [27 67108913] [27 67108914] [27 67108915] [27 67108916] [27 67108917] [27 67108918] [27 67108919] [27 67108920] [27 67108921] [27 67108909] [27 home] [27 next] [27 prior] [27 33554454] [27 end] [27 begin] [27 right] [27 left] [27 C-left] [27 C-right] [27 C-up] [27 C-down] [27 C-home] [27 C-end] [27 67108896] [27 C-delete] [27 C-backspace] [27 67108911] [27 67108910] [27 f10] [27 67108901] [27 127] [27 126] [27 125] [27 124] [27 123] [27 122] [27 121] [27 120] [27 119] [27 118] [27 117] [27 116] [27 115 111] [27 115 104 114] [27 115 104 112] [27 115 104 108] [27 115 104 46] [27 115 104 117] [27 115 104 119] [27 115 119] [27 115 95] [27 115 46] [27 114] [27 113] [27 111 27 111] [27 111 27 83] [27 111 27 115] [27 109] [27 108] [27 107] [27 106] [27 105] [27 104] [27 103 99] [27 103 103] [27 103 27 103] [27 103 27 110] [27 103 27 112] [27 103 110] [27 103 112] [27 103 9] [27 102] [27 101] [27 100] [27 99] [27 98] [27 97] [27 96] [27 94] [27 92] [27 64] [27 62] [27 61] [27 60] [27 59] [27 58] [27 47] [27 46] [27 45] [27 44] [27 42] [27 41] [27 40] [27 39] [27 38] [27 37] [27 36] [27 33] [27 32] [27 28] [27 27 27] [27 27 58] [27 23] [27 22] [27 21] [27 20] [27 19] [27 18] [27 16] [27 15] [27 14] [27 12] [27 11] [27 10] [27 9] [27 8] [27 6] [27 5] [27 4] [27 3] [27 2] [27 1] [27 0] [26] [25] [24 right] [24 C-right] [24 left] [24 C-left] [24 67108896] [24 67108907] [24 67108909] [24 67108925] [24 67108912] [24 127] [24 125] [24 123] [24 122] [24 118 97] [24 118 98] [24 118 99] [24 118 100] [24 118 103] [24 118 104] [24 118 105] [24 118 108] [24 118 76] [24 118 73] [24 118 79] [24 118 109] [24 118 114] [24 118 115] [24 118 117] [24 118 118] [24 118 43] [24 118 61] [24 118 68] [24 118 126] [24 117] [24 115] [24 114 99] [24 114 107] [24 114 100] [24 114 121] [24 114 111] [24 114 116] [24 114 78] [24 114 27 119] [24 114 0] [24 114 67108896] [24 114 32] [24 114 106] [24 114 115] [24 114 120] [24 114 105] [24 114 103] [24 114 114] [24 114 110] [24 114 43] [24 114 119] [24 114 102] [24 114 98] [24 114 109] [24 114 108] [24 113] [24 111] [24 110 110] [24 110 119] [24 110 100] [24 110 112] [24 109] [24 108] [24 107] [24 105] [24 104] [24 102] [24 101] [24 100] [24 98] [24 97 108] [24 97 1] [24 97 103] [24 97 43] [24 97 105 103] [24 97 105 108] [24 97 45] [24 97 101] [24 97 39] [24 97 112] [24 97 110] [24 96] [24 94] [24 93] [24 91] [24 62] [24 61] [24 60] [24 59] [24 56 13] [24 54 50] [24 54 f2] [24 54 98] [24 54 115] [24 53 109] [24 53 98] [24 53 102] [24 53 6] [24 53 114] [24 53 15] [24 53 100] [24 53 46] [24 53 50] [24 53 49] [24 53 48] [24 53 111] [24 52 109] [24 52 97] [24 52 99] [24 52 48] [24 52 102] [24 52 114] [24 52 6] [24 52 98] [24 52 15] [24 52 100] [24 52 46] [24 51] [24 50] [24 49] [24 48] [24 46] [24 45] [24 43] [24 42] [24 41] [24 40] [24 39] [24 36] [24 32] [24 27 27] [24 27 58] [24 26] [24 24] [24 23] [24 22] [24 21] [24 20] [24 19] [24 18] [24 17] [24 16] [24 15] [24 14] [24 13 102] [24 13 114] [24 13 70] [24 13 116] [24 13 107] [24 13 112] [24 13 120] [24 13 88] [24 13 28] [24 13 99] [24 13 108] [24 12] [24 11 115] [24 11 19] [24 11 11] [24 11 114] [24 11 113] [24 11 14] [24 11 16] [24 11 22] [24 11 4] [24 11 20] [24 11 12] [24 11 6] [24 11 3] [24 11 9] [24 11 1] [24 11 5] [24 11 13] [24 11 101] [24 11 108] [24 11 32] [24 11 98] [24 11 110] [24 11 120] [24 9] [24 6] [24 5] [24 4] [24 3] [24 2] [24 0] [23] [22] [21] [20] [19] [18] [17] [16] [15] [14] [13] [12] [11] [10] [9] [8 8] [8 help] [8 f1] [8 46] [8 63] [8 1] [8 3] [8 4] [8 5] [8 6] [8 13] [8 14] [8 15] [8 16] [8 20] [8 23] [8 28] [8 67] [8 70] [8 73] [8 75] [8 76] [8 83] [8 97] [8 98] [8 99] [8 100] [8 101] [8 102] [8 103] [8 104] [8 105] [8 52 105] [8 107] [8 108] [8 109] [8 110] [8 112] [8 80] [8 114] [8 115] [8 116] [8 119] [8 118] [8 113] [7] [6] [5] [4] [2] [1] [0]) :extract-where-is #s(hash-table size 487 test eql rehash-size 1.5 rehash-threshold 0.8 data (set-mark-command ([0]) move-beginning-of-line ([1]) backward-char ([2]) delete-char ([4]) move-end-of-line ([5]) forward-char ([6]) keyboard-quit ([7]) help-quit ([8 113]) describe-variable ([8 118]) where-is ([8 119]) help-with-tutorial ([8 116]) describe-syntax ([8 115]) info-emacs-manual ([8 114]) describe-package ([8 80]) finder-by-keyword ([8 112]) view-emacs-news ([8 110]) describe-mode ([8 109]) view-lossage ([8 108]) describe-key ([8 107]) info-other-window ([8 52 105]) info ([8 105]) view-hello-file ([8 104]) describe-gnu-project ([8 103]) describe-function ([8 102]) view-echo-area-messages ([8 101]) apropos-documentation ([8 100]) describe-key-briefly ([8 99]) describe-bindings ([8 98]) apropos-command ([8 97]) info-lookup-symbol ([8 83]) describe-language-environment ([8 76]) Info-goto-emacs-key-command-node ([8 75]) describe-input-method ([8 73]) Info-goto-emacs-command-node ([8 70]) describe-coding-system ([8 67]) describe-no-warranty ([8 23]) view-emacs-todo ([8 20]) view-emacs-problems ([8 16]) describe-distribution ([8 15]) view-order-manuals ([8 13]) view-emacs-FAQ ([8 6]) view-external-packages ([8 5]) view-emacs-debugging ([8 4]) describe-copying ([8 3]) about-emacs ([8 1]) help-for-help ([8 63]) display-local-help ([8 46]) indent-for-tab-command ([9]) electric-newline-and-maybe-indent ([10]) kill-line ([11]) recenter-top-bottom ([12]) newline ([13]) next-line ([14]) open-line ([15]) previous-line ([16]) quoted-insert ([17]) isearch-backward ([18]) isearch-forward ([19]) transpose-chars ([20]) universal-argument ([21]) scroll-up-command ([22]) kill-region ([23]) pop-global-mark ([24 0]) list-buffers ([24 2]) save-buffers-kill-terminal ([24 3]) list-directory ([24 4]) eval-last-sexp ([24 5]) find-file ([24 6]) indent-rigidly ([24 9]) kmacro-to-register ([24 11 120]) kmacro-name-last-macro ([24 11 110]) kmacro-bind-to-key ([24 11 98]) kmacro-step-edit-macro ([24 11 32]) kmacro-edit-lossage ([24 11 108]) edit-kbd-macro ([24 11 101]) kmacro-edit-macro ([24 11 13]) kmacro-edit-macro-repeat ([24 11 5]) kmacro-add-counter ([24 11 1]) kmacro-insert-counter ([24 11 9]) kmacro-set-counter ([24 11 3]) kmacro-set-format ([24 11 6]) kmacro-call-ring-2nd-repeat ([24 11 12]) kmacro-swap-ring ([24 11 20]) kmacro-delete-ring-head ([24 11 4]) kmacro-view-macro-repeat ([24 11 22]) kmacro-cycle-ring-previous ([24 11 16]) kmacro-cycle-ring-next ([24 11 14]) kbd-macro-query ([24 11 113]) apply-macro-to-region-lines ([24 11 114]) kmacro-end-or-call-macro-repeat ([24 11 11]) kmacro-start-macro ([24 11 19]) downcase-region ([24 12]) set-language-environment ([24 13 108]) universal-coding-system-argument ([24 13 99]) set-input-method ([24 13 28]) set-next-selection-coding-system ([24 13 88]) set-selection-coding-system ([24 13 120]) set-buffer-process-coding-system ([24 13 112]) set-keyboard-coding-system ([24 13 107]) set-terminal-coding-system ([24 13 116]) set-file-name-coding-system ([24 13 70]) revert-buffer-with-coding-system ([24 13 114]) set-buffer-file-coding-system ([24 13 102]) set-goal-column ([24 14]) delete-blank-lines ([24 15]) mark-page ([24 16]) read-only-mode ([24 17]) find-file-read-only ([24 18]) save-buffer ([24 19]) transpose-lines ([24 20]) upcase-region ([24 21]) find-alternate-file ([24 22]) write-file ([24 23]) exchange-point-and-mark ([24 24]) suspend-frame ([24 26]) repeat-complex-command ([24 27 58]) rectangle-mark-mode ([24 32]) set-selective-display ([24 36]) expand-abbrev ([24 39]) kmacro-end-macro ([24 41]) calc-dispatch ([24 42]) balance-windows ([24 43]) shrink-window-if-larger-than-buffer ([24 45]) set-fill-prefix ([24 46]) delete-window ([24 48]) delete-other-windows ([24 49]) split-window-below ([24 50]) split-window-right ([24 51]) find-tag-other-window ([24 52 46]) dired-other-window ([24 52 100]) display-buffer ([24 52 15]) switch-to-buffer-other-window ([24 52 98]) find-file-other-window ([24 52 6]) find-file-read-only-other-window ([24 52 114]) kill-buffer-and-window ([24 52 48]) clone-indirect-buffer-other-window ([24 52 99]) add-change-log-entry-other-window ([24 52 97]) compose-mail-other-window ([24 52 109]) other-frame ([24 53 111]) delete-frame ([24 53 48]) delete-other-frames ([24 53 49]) make-frame-command ([24 53 50]) find-tag-other-frame ([24 53 46]) dired-other-frame ([24 53 100]) display-buffer-other-frame ([24 53 15]) find-file-read-only-other-frame ([24 53 114]) find-file-other-frame ([24 53 6]) switch-to-buffer-other-frame ([24 53 98]) compose-mail-other-frame ([24 53 109]) 2C-split ([24 54 115]) 2C-associate-buffer ([24 54 98]) 2C-two-columns ([24 54 f2]) insert-char ([24 56 13]) comment-set-column ([24 59]) scroll-left ([24 60]) what-cursor-position ([24 61]) scroll-right ([24 62]) backward-page ([24 91]) forward-page ([24 93]) enlarge-window ([24 94]) next-error ([24 96]) expand-jump-to-next-slot ([24 97 110]) expand-jump-to-previous-slot ([24 97 112]) inverse-add-global-abbrev ([24 97 45]) inverse-add-mode-abbrev ([24 97 105 108]) add-mode-abbrev ([24 97 43]) add-global-abbrev ([24 97 103]) switch-to-buffer ([24 98]) dired ([24 100]) kmacro-end-and-call-macro ([24 101]) set-fill-column ([24 102]) mark-whole-buffer ([24 104]) insert-file ([24 105]) kill-buffer ([24 107]) count-lines-page ([24 108]) compose-mail ([24 109]) narrow-to-page ([24 110 112]) narrow-to-defun ([24 110 100]) widen ([24 110 119]) narrow-to-region ([24 110 110]) other-window ([24 111]) bookmark-bmenu-list ([24 114 108]) bookmark-set ([24 114 109]) bookmark-jump ([24 114 98]) frameset-to-register ([24 114 102]) window-configuration-to-register ([24 114 119]) increment-register ([24 114 43]) number-to-register ([24 114 110]) copy-rectangle-to-register ([24 114 114]) insert-register ([24 114 103]) copy-to-register ([24 114 120]) jump-to-register ([24 114 106]) point-to-register ([24 114 32]) copy-rectangle-as-kill ([24 114 27 119]) rectangle-number-lines ([24 114 78]) string-rectangle ([24 114 116]) open-rectangle ([24 114 111]) yank-rectangle ([24 114 121]) delete-rectangle ([24 114 100]) kill-rectangle ([24 114 107]) clear-rectangle ([24 114 99]) save-some-buffers ([24 115]) undo ([24 117]) vc-revision-other-window ([24 118 126]) vc-root-diff ([24 118 68]) vc-diff ([24 118 61]) vc-update ([24 118 43]) vc-next-action ([24 118 118]) vc-revert ([24 118 117]) vc-create-tag ([24 118 115]) vc-retrieve-tag ([24 118 114]) vc-merge ([24 118 109]) vc-log-outgoing ([24 118 79]) vc-log-incoming ([24 118 73]) vc-print-root-log ([24 118 76]) vc-print-log ([24 118 108]) vc-register ([24 118 105]) vc-insert-headers ([24 118 104]) vc-annotate ([24 118 103]) vc-dir ([24 118 100]) vc-rollback ([24 118 99]) vc-switch-backend ([24 118 98]) vc-update-change-log ([24 118 97]) repeat ([24 122]) shrink-window-horizontally ([24 123]) enlarge-window-horizontally ([24 125]) backward-kill-sentence ([24 127]) text-scale-adjust ([24 67108912]) previous-buffer ([24 C-left]) next-buffer ([24 C-right]) yank ([25]) mark-sexp ([27 0]) beginning-of-defun ([27 1]) backward-sexp ([27 2]) exit-recursive-edit ([27 3]) down-list ([27 4]) end-of-defun ([27 5]) forward-sexp ([27 6]) mark-defun ([27 8]) complete-symbol ([27 9]) indent-new-comment-line ([27 10]) kill-sexp ([27 11]) reposition-window ([27 12]) forward-list ([27 14]) split-line ([27 15]) backward-list ([27 16]) isearch-backward-regexp ([27 18]) isearch-forward-regexp ([27 19]) transpose-sexps ([27 20]) backward-up-list ([27 21]) scroll-other-window ([27 22]) append-next-kill ([27 23]) eval-expression ([27 27 58]) keyboard-escape-quit ([27 27 27]) indent-region ([27 28]) just-one-space ([27 32]) shell-command ([27 33]) ispell-word ([27 36]) query-replace ([27 37]) async-shell-command ([27 38]) abbrev-prefix-mark ([27 39]) insert-parentheses ([27 40]) move-past-close-and-reindent ([27 41]) pop-tag-mark ([27 42]) tags-loop-continue ([27 44]) negative-argument ([27 45]) find-tag ([27 46]) dabbrev-expand ([27 47]) comment-dwim ([27 59]) beginning-of-buffer ([27 60]) count-words-region ([27 61]) end-of-buffer ([27 62]) mark-word ([27 64]) delete-horizontal-space ([27 92]) delete-indentation ([27 94]) tmm-menubar ([27 96]) backward-sentence ([27 97]) backward-word ([27 98]) capitalize-word ([27 99]) kill-word ([27 100]) forward-sentence ([27 101]) forward-word ([27 102]) move-to-column ([27 103 9]) previous-error ([27 103 112]) goto-line ([27 103 27 103]) goto-char ([27 103 99]) mark-paragraph ([27 104]) tab-to-tab-stop ([27 105]) kill-sentence ([27 107]) downcase-word ([27 108]) back-to-indentation ([27 109]) center-line ([27 111 27 115]) center-paragraph ([27 111 27 83]) font-lock-fontify-block ([27 111 27 111]) fill-paragraph ([27 113]) move-to-window-line-top-bottom ([27 114]) isearch-forward-symbol-at-point ([27 115 46]) isearch-forward-symbol ([27 115 95]) isearch-forward-word ([27 115 119]) hi-lock-write-interactive-patterns ([27 115 104 119]) unhighlight-regexp ([27 115 104 117]) highlight-symbol-at-point ([27 115 104 46]) highlight-lines-matching-regexp ([27 115 104 108]) highlight-phrase ([27 115 104 112]) highlight-regexp ([27 115 104 114]) occur ([27 115 111]) transpose-words ([27 116]) upcase-word ([27 117]) scroll-down-command ([27 118]) kill-ring-save ([27 119]) execute-extended-command ([27 120]) yank-pop ([27 121]) zap-to-char ([27 122]) backward-paragraph ([27 123]) shell-command-on-region ([27 124]) forward-paragraph ([27 125]) not-modified ([27 126]) backward-kill-word ([27 127]) query-replace-regexp ([27 67108901]) toggle-frame-maximized ([27 f10]) find-tag-regexp ([27 67108910]) dabbrev-completion ([27 67108911]) backward-kill-sexp ([27 C-backspace]) beginning-of-buffer-other-window ([27 begin]) end-of-buffer-other-window ([27 end]) scroll-other-window-down ([27 33554454]) digit-argument ([27 67108921]) toggle-input-method ([28]) abort-recursive-edit ([29]) delete-backward-char ([127]) pr-txt-fast-fire ([C-M-print]) pr-ps-mode-using-ghostscript ([S-print]) pr-ps-fast-fire ([print]) kmacro-end-call-mouse ([S-mouse-3]) mwheel-scroll ([C-wheel-down]) ignore ([rwindow]) w32-drag-n-drop-other-frame ([C-drag-n-drop]) w32-drag-n-drop ([drag-n-drop]) menu-bar-open ([f10]) mouse-drag-mode-line ([bottom-divider down-mouse-1]) mouse-drag-vertical-line ([right-divider down-mouse-1]) mouse-select-window ([vertical-line mouse-1]) mouse-split-window-vertically ([vertical-line C-mouse-2]) scroll-bar-toolkit-scroll ([vertical-scroll-bar mouse-1]) mouse-drag-header-line ([header-line down-mouse-1]) mouse-split-window-horizontally ([mode-line C-mouse-2]) mouse-delete-window ([mode-line mouse-3]) mouse-delete-other-windows ([mode-line mouse-2]) mouse-appearance-menu ([S-down-mouse-1]) mouse-buffer-menu ([C-down-mouse-1]) mouse-save-then-kill ([mouse-3]) mouse-yank-primary ([mouse-2]) mouse-set-point ([triple-mouse-1]) mouse-set-region ([drag-mouse-1]) mouse-drag-region ([down-mouse-1]) mouse-yank-secondary ([M-mouse-2]) mouse-secondary-save-then-kill ([M-mouse-3]) mouse-drag-secondary ([M-down-mouse-1]) mouse-set-secondary ([M-drag-mouse-1]) mouse-start-secondary ([M-mouse-1]) toggle-frame-fullscreen ([f11]) compose-last-chars ([compose-last-chars]) tmm-menubar-mouse ([menu-bar mouse-1]) kmacro-end-or-call-macro ([f4]) kmacro-start-macro-or-insert-counter ([f3]) left-word ([C-left]) right-word ([C-right]) delete-forward-char ([deletechar]) overwrite-mode ([insertchar]) right-char ([right]) left-char ([left]) kill-whole-line ([C-S-backspace]) search-forward ([find]) handle-delete-frame ([delete-frame]) handle-select-window ([select-window]) handle-switch-frame ([switch-frame]))) :extract-lookup #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8 data ([0] set-mark-command [1] move-beginning-of-line [2] backward-char [4] delete-char [5] move-end-of-line [6] forward-char [7] keyboard-quit [8 113] help-quit [8 118] describe-variable [8 119] where-is [8 116] help-with-tutorial [8 115] describe-syntax [8 114] info-emacs-manual [8 80] describe-package [8 112] finder-by-keyword [8 110] view-emacs-news [8 109] describe-mode [8 108] view-lossage [8 107] describe-key [8 52 105] info-other-window [8 105] info [8 104] view-hello-file [8 103] describe-gnu-project [8 102] describe-function [8 101] view-echo-area-messages [8 100] apropos-documentation [8 99] describe-key-briefly [8 98] describe-bindings [8 97] apropos-command [8 83] info-lookup-symbol [8 76] describe-language-environment [8 75] Info-goto-emacs-key-command-node [8 73] describe-input-method [8 70] Info-goto-emacs-command-node [8 67] describe-coding-system [8 28] describe-input-method [8 23] describe-no-warranty [8 20] view-emacs-todo [8 16] view-emacs-problems [8 15] describe-distribution [8 14] view-emacs-news [8 13] view-order-manuals [8 6] view-emacs-FAQ [8 5] view-external-packages [8 4] view-emacs-debugging [8 3] describe-copying [8 1] about-emacs [8 63] help-for-help [8 46] display-local-help [8 f1] help-for-help [8 help] help-for-help [8 8] help-for-help [9] indent-for-tab-command [10] electric-newline-and-maybe-indent [11] kill-line [12] recenter-top-bottom [13] newline [14] next-line [15] open-line [16] previous-line [17] quoted-insert [18] isearch-backward [19] isearch-forward [20] transpose-chars [21] universal-argument [22] scroll-up-command [23] kill-region [24 0] pop-global-mark [24 2] list-buffers [24 3] save-buffers-kill-terminal [24 4] list-directory [24 5] eval-last-sexp [24 6] find-file [24 9] indent-rigidly [24 11 120] kmacro-to-register [24 11 110] kmacro-name-last-macro [24 11 98] kmacro-bind-to-key [24 11 32] kmacro-step-edit-macro [24 11 108] kmacro-edit-lossage [24 11 101] edit-kbd-macro [24 11 13] kmacro-edit-macro [24 11 5] kmacro-edit-macro-repeat [24 11 1] kmacro-add-counter [24 11 9] kmacro-insert-counter [24 11 3] kmacro-set-counter [24 11 6] kmacro-set-format [24 11 12] kmacro-call-ring-2nd-repeat [24 11 20] kmacro-swap-ring [24 11 4] kmacro-delete-ring-head [24 11 22] kmacro-view-macro-repeat [24 11 16] kmacro-cycle-ring-previous [24 11 14] kmacro-cycle-ring-next [24 11 113] kbd-macro-query [24 11 114] apply-macro-to-region-lines [24 11 11] kmacro-end-or-call-macro-repeat [24 11 19] kmacro-start-macro [24 11 115] kmacro-start-macro [24 12] downcase-region [24 13 108] set-language-environment [24 13 99] universal-coding-system-argument [24 13 28] set-input-method [24 13 88] set-next-selection-coding-system [24 13 120] set-selection-coding-system [24 13 112] set-buffer-process-coding-system [24 13 107] set-keyboard-coding-system [24 13 116] set-terminal-coding-system [24 13 70] set-file-name-coding-system [24 13 114] revert-buffer-with-coding-system [24 13 102] set-buffer-file-coding-system [24 14] set-goal-column [24 15] delete-blank-lines [24 16] mark-page [24 17] read-only-mode [24 18] find-file-read-only [24 19] save-buffer [24 20] transpose-lines [24 21] upcase-region [24 22] find-alternate-file [24 23] write-file [24 24] exchange-point-and-mark [24 26] suspend-frame [24 27 58] repeat-complex-command [24 27 27] repeat-complex-command [24 32] rectangle-mark-mode [24 36] set-selective-display [24 39] expand-abbrev [24 40] kmacro-start-macro [24 41] kmacro-end-macro [24 42] calc-dispatch [24 43] balance-windows [24 45] shrink-window-if-larger-than-buffer [24 46] set-fill-prefix [24 48] delete-window [24 49] delete-other-windows [24 50] split-window-below [24 51] split-window-right [24 52 46] find-tag-other-window [24 52 100] dired-other-window [24 52 15] display-buffer [24 52 98] switch-to-buffer-other-window [24 52 6] find-file-other-window [24 52 114] find-file-read-only-other-window [24 52 102] find-file-other-window [24 52 48] kill-buffer-and-window [24 52 99] clone-indirect-buffer-other-window [24 52 97] add-change-log-entry-other-window [24 52 109] compose-mail-other-window [24 53 111] other-frame [24 53 48] delete-frame [24 53 49] delete-other-frames [24 53 50] make-frame-command [24 53 46] find-tag-other-frame [24 53 100] dired-other-frame [24 53 15] display-buffer-other-frame [24 53 114] find-file-read-only-other-frame [24 53 6] find-file-other-frame [24 53 102] find-file-other-frame [24 53 98] switch-to-buffer-other-frame [24 53 109] compose-mail-other-frame [24 54 115] 2C-split [24 54 98] 2C-associate-buffer [24 54 f2] 2C-two-columns [24 54 50] 2C-two-columns [24 56 13] insert-char [24 59] comment-set-column [24 60] scroll-left [24 61] what-cursor-position [24 62] scroll-right [24 91] backward-page [24 93] forward-page [24 94] enlarge-window [24 96] next-error [24 97 110] expand-jump-to-next-slot [24 97 112] expand-jump-to-previous-slot [24 97 39] expand-abbrev [24 97 101] expand-abbrev [24 97 45] inverse-add-global-abbrev [24 97 105 108] inverse-add-mode-abbrev [24 97 105 103] inverse-add-global-abbrev [24 97 43] add-mode-abbrev [24 97 103] add-global-abbrev [24 97 1] add-mode-abbrev [24 97 108] add-mode-abbrev [24 98] switch-to-buffer [24 100] dired [24 101] kmacro-end-and-call-macro [24 102] set-fill-column [24 104] mark-whole-buffer [24 105] insert-file [24 107] kill-buffer [24 108] count-lines-page [24 109] compose-mail [24 110 112] narrow-to-page [24 110 100] narrow-to-defun [24 110 119] widen [24 110 110] narrow-to-region [24 111] other-window [24 113] kbd-macro-query [24 114 108] bookmark-bmenu-list [24 114 109] bookmark-set [24 114 98] bookmark-jump [24 114 102] frameset-to-register [24 114 119] window-configuration-to-register [24 114 43] increment-register [24 114 110] number-to-register [24 114 114] copy-rectangle-to-register [24 114 103] insert-register [24 114 105] insert-register [24 114 120] copy-to-register [24 114 115] copy-to-register [24 114 106] jump-to-register [24 114 32] point-to-register [24 114 67108896] point-to-register [24 114 0] point-to-register [24 114 27 119] copy-rectangle-as-kill [24 114 78] rectangle-number-lines [24 114 116] string-rectangle [24 114 111] open-rectangle [24 114 121] yank-rectangle [24 114 100] delete-rectangle [24 114 107] kill-rectangle [24 114 99] clear-rectangle [24 115] save-some-buffers [24 117] undo [24 118 126] vc-revision-other-window [24 118 68] vc-root-diff [24 118 61] vc-diff [24 118 43] vc-update [24 118 118] vc-next-action [24 118 117] vc-revert [24 118 115] vc-create-tag [24 118 114] vc-retrieve-tag [24 118 109] vc-merge [24 118 79] vc-log-outgoing [24 118 73] vc-log-incoming [24 118 76] vc-print-root-log [24 118 108] vc-print-log [24 118 105] vc-register [24 118 104] vc-insert-headers [24 118 103] vc-annotate [24 118 100] vc-dir [24 118 99] vc-rollback [24 118 98] vc-switch-backend [24 118 97] vc-update-change-log [24 122] repeat [24 123] shrink-window-horizontally [24 125] enlarge-window-horizontally [24 127] backward-kill-sentence [24 67108912] text-scale-adjust [24 67108925] text-scale-adjust [24 67108909] text-scale-adjust [24 67108907] text-scale-adjust [24 67108896] pop-global-mark [24 C-left] previous-buffer [24 left] previous-buffer [24 C-right] next-buffer [24 right] next-buffer [25] yank [26] suspend-frame [27 0] mark-sexp [27 1] beginning-of-defun [27 2] backward-sexp [27 3] exit-recursive-edit [27 4] down-list [27 5] end-of-defun [27 6] forward-sexp [27 8] mark-defun [27 9] complete-symbol [27 10] indent-new-comment-line [27 11] kill-sexp [27 12] reposition-window [27 14] forward-list [27 15] split-line [27 16] backward-list [27 18] isearch-backward-regexp [27 19] isearch-forward-regexp [27 20] transpose-sexps [27 21] backward-up-list [27 22] scroll-other-window [27 23] append-next-kill [27 27 58] eval-expression [27 27 27] keyboard-escape-quit [27 28] indent-region [27 32] just-one-space [27 33] shell-command [27 36] ispell-word [27 37] query-replace [27 38] async-shell-command [27 39] abbrev-prefix-mark [27 40] insert-parentheses [27 41] move-past-close-and-reindent [27 42] pop-tag-mark [27 44] tags-loop-continue [27 45] negative-argument [27 46] find-tag [27 47] dabbrev-expand [27 58] eval-expression [27 59] comment-dwim [27 60] beginning-of-buffer [27 61] count-words-region [27 62] end-of-buffer [27 64] mark-word [27 92] delete-horizontal-space [27 94] delete-indentation [27 96] tmm-menubar [27 97] backward-sentence [27 98] backward-word [27 99] capitalize-word [27 100] kill-word [27 101] forward-sentence [27 102] forward-word [27 103 9] move-to-column [27 103 112] previous-error [27 103 110] next-error [27 103 27 112] previous-error [27 103 27 110] next-error [27 103 27 103] goto-line [27 103 103] goto-line [27 103 99] goto-char [27 104] mark-paragraph [27 105] tab-to-tab-stop [27 106] indent-new-comment-line [27 107] kill-sentence [27 108] downcase-word [27 109] back-to-indentation [27 111 27 115] center-line [27 111 27 83] center-paragraph [27 111 27 111] font-lock-fontify-block [27 113] fill-paragraph [27 114] move-to-window-line-top-bottom [27 115 46] isearch-forward-symbol-at-point [27 115 95] isearch-forward-symbol [27 115 119] isearch-forward-word [27 115 104 119] hi-lock-write-interactive-patterns [27 115 104 117] unhighlight-regexp [27 115 104 46] highlight-symbol-at-point [27 115 104 108] highlight-lines-matching-regexp [27 115 104 112] highlight-phrase [27 115 104 114] highlight-regexp [27 115 111] occur [27 116] transpose-words [27 117] upcase-word [27 118] scroll-down-command [27 119] kill-ring-save [27 120] execute-extended-command [27 121] yank-pop [27 122] zap-to-char [27 123] backward-paragraph [27 124] shell-command-on-region [27 125] forward-paragraph [27 126] not-modified [27 127] backward-kill-word [27 67108901] query-replace-regexp [27 f10] toggle-frame-maximized [27 67108910] find-tag-regexp [27 67108911] dabbrev-completion [27 C-backspace] backward-kill-sexp [27 C-delete] backward-kill-sexp [27 67108896] mark-sexp [27 C-end] end-of-defun [27 C-home] beginning-of-defun [27 C-down] down-list [27 C-up] backward-up-list [27 C-right] forward-sexp [27 C-left] backward-sexp [27 left] backward-word [27 right] forward-word [27 begin] beginning-of-buffer-other-window [27 end] end-of-buffer-other-window [27 33554454] scroll-other-window-down [27 prior] scroll-other-window-down [27 next] scroll-other-window [27 home] beginning-of-buffer-other-window [27 67108909] negative-argument [27 67108921] digit-argument [27 67108920] digit-argument [27 67108919] digit-argument [27 67108918] digit-argument [27 67108917] digit-argument [27 67108916] digit-argument [27 67108915] digit-argument [27 67108914] digit-argument [27 67108913] digit-argument [27 67108912] digit-argument [28] toggle-input-method [29] abort-recursive-edit [31] undo [127] delete-backward-char [C-M-print] pr-txt-fast-fire [C-print] pr-txt-fast-fire [S-print] pr-ps-mode-using-ghostscript [M-print] pr-ps-mode-using-ghostscript [print] pr-ps-fast-fire [S-mouse-3] kmacro-end-call-mouse [C-wheel-down] mwheel-scroll [S-wheel-down] mwheel-scroll [wheel-down] mwheel-scroll [C-wheel-up] mwheel-scroll [S-wheel-up] mwheel-scroll [wheel-up] mwheel-scroll [rwindow] ignore [lwindow] ignore [language-change] ignore [C-drag-n-drop] w32-drag-n-drop-other-frame [drag-n-drop] w32-drag-n-drop [f10] menu-bar-open [bottom-divider down-mouse-1] mouse-drag-mode-line [right-divider down-mouse-1] mouse-drag-vertical-line [vertical-line mouse-1] mouse-select-window [vertical-line down-mouse-1] mouse-drag-vertical-line [vertical-line C-mouse-2] mouse-split-window-vertically [vertical-scroll-bar mouse-1] scroll-bar-toolkit-scroll [vertical-scroll-bar C-mouse-2] mouse-split-window-vertically [header-line mouse-1] mouse-select-window [header-line down-mouse-1] mouse-drag-header-line [mode-line C-mouse-2] mouse-split-window-horizontally [mode-line mouse-3] mouse-delete-window [mode-line mouse-2] mouse-delete-other-windows [mode-line down-mouse-1] mouse-drag-mode-line [mode-line drag-mouse-1] mouse-select-window [mode-line mouse-1] mouse-select-window [S-down-mouse-1] mouse-appearance-menu [C-down-mouse-1] mouse-buffer-menu [mouse-3] mouse-save-then-kill [mouse-2] mouse-yank-primary [triple-mouse-1] mouse-set-point [double-mouse-1] mouse-set-point [drag-mouse-1] mouse-set-region [mouse-1] mouse-set-point [down-mouse-1] mouse-drag-region [M-mouse-2] mouse-yank-secondary [M-mouse-3] mouse-secondary-save-then-kill [M-down-mouse-1] mouse-drag-secondary [M-drag-mouse-1] mouse-set-secondary [M-mouse-1] mouse-start-secondary [M-f10] toggle-frame-maximized [f11] toggle-frame-fullscreen [compose-last-chars] compose-last-chars [f1 113] help-quit [f1 118] describe-variable [f1 119] where-is [f1 116] help-with-tutorial [f1 115] describe-syntax [f1 114] info-emacs-manual [f1 80] describe-package [f1 112] finder-by-keyword [f1 110] view-emacs-news [f1 109] describe-mode [f1 108] view-lossage [f1 107] describe-key [f1 52 105] info-other-window [f1 105] info [f1 104] view-hello-file [f1 103] describe-gnu-project [f1 102] describe-function [f1 101] view-echo-area-messages [f1 100] apropos-documentation [f1 99] describe-key-briefly [f1 98] describe-bindings [f1 97] apropos-command [f1 83] info-lookup-symbol [f1 76] describe-language-environment [f1 75] Info-goto-emacs-key-command-node [f1 73] describe-input-method [f1 70] Info-goto-emacs-command-node [f1 67] describe-coding-system [f1 28] describe-input-method [f1 23] describe-no-warranty [f1 20] view-emacs-todo [f1 16] view-emacs-problems [f1 15] describe-distribution [f1 14] view-emacs-news [f1 13] view-order-manuals [f1 6] view-emacs-FAQ [f1 5] view-external-packages [f1 4] view-emacs-debugging [f1 3] describe-copying [f1 1] about-emacs [f1 63] help-for-help [f1 46] display-local-help [f1 f1] help-for-help [f1 help] help-for-help [f1 8] help-for-help [help 113] help-quit [help 118] describe-variable [help 119] where-is [help 116] help-with-tutorial [help 115] describe-syntax [help 114] info-emacs-manual [help 80] describe-package [help 112] finder-by-keyword [help 110] view-emacs-news [help 109] describe-mode [help 108] view-lossage [help 107] describe-key [help 52 105] info-other-window [help 105] info [help 104] view-hello-file [help 103] describe-gnu-project [help 102] describe-function [help 101] view-echo-area-messages [help 100] apropos-documentation [help 99] describe-key-briefly [help 98] describe-bindings [help 97] apropos-command [help 83] info-lookup-symbol [help 76] describe-language-environment [help 75] Info-goto-emacs-key-command-node [help 73] describe-input-method [help 70] Info-goto-emacs-command-node [help 67] describe-coding-system [help 28] describe-input-method [help 23] describe-no-warranty [help 20] view-emacs-todo [help 16] view-emacs-problems [help 15] describe-distribution [help 14] view-emacs-news [help 13] view-order-manuals [help 6] view-emacs-FAQ [help 5] view-external-packages [help 4] view-emacs-debugging [help 3] describe-copying [help 1] about-emacs [help 63] help-for-help [help 46] display-local-help [help f1] help-for-help [help help] help-for-help [help 8] help-for-help [f2 115] 2C-split [f2 98] 2C-associate-buffer [f2 f2] 2C-two-columns [f2 50] 2C-two-columns [menu-bar mouse-1] tmm-menubar-mouse [f4] kmacro-end-or-call-macro [f3] kmacro-start-macro-or-insert-counter [C-M-end] end-of-defun [C-M-home] beginning-of-defun [C-M-down] down-list [C-M-up] backward-up-list [C-M-right] forward-sexp [C-M-left] backward-sexp [S-delete] kill-region [C-backspace] backward-kill-word [C-delete] kill-word [C-left] left-word [C-right] right-word [M-left] left-word [M-right] right-word [mouse-movement] ignore [deletechar] delete-forward-char [deleteline] kill-line [insertline] open-line [open] find-file [again] repeat-complex-command [redo] repeat-complex-command [undo] undo [S-insertchar] yank [C-insertchar] kill-ring-save [insertchar] overwrite-mode [S-insert] yank [C-insert] kill-ring-save [insert] overwrite-mode [execute] execute-extended-command [M-begin] beginning-of-buffer-other-window [begin] beginning-of-buffer [M-end] end-of-buffer-other-window [C-end] end-of-buffer [end] move-end-of-line [M-prior] scroll-other-window-down [M-next] scroll-other-window [C-next] scroll-left [C-prior] scroll-right [C-down] forward-paragraph [C-up] backward-paragraph [next] scroll-up-command [prior] scroll-down-command [down] next-line [right] right-char [up] previous-line [left] left-char [M-home] beginning-of-buffer-other-window [C-home] beginning-of-buffer [home] move-beginning-of-line [C-S-backspace] kill-whole-line [find] search-forward [menu] execute-extended-command [67108896] set-mark-command [67108909] negative-argument [67108921] digit-argument [67108920] digit-argument [67108919] digit-argument [67108918] digit-argument [67108917] digit-argument [67108916] digit-argument [67108915] digit-argument [67108914] digit-argument [67108913] digit-argument [67108912] digit-argument [XF86Back] previous-buffer [XF86Forward] next-buffer [67108911] undo [delete-frame] handle-delete-frame [select-window] handle-select-window [switch-frame] handle-switch-frame)))) -536870746 (ergoemacs-map-properties--after-ergoemacs) (:map-key -536870875 :parent (:map-key -536870793 :parent (:map-key -536870825))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (-536870912) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:extract-keys ([switch-frame] [select-window] [delete-frame] [XF86Forward] [XF86Back] [67108913] [67108914] [67108915] [67108916] [67108917] [67108918] [67108919] [67108920] [67108921] [find] [C-S-backspace] [M-home] [left] [up] [right] [down] [prior] [next] [C-up] [C-down] [M-next] [M-prior] [M-end] [begin] [M-begin] [execute] [insert] [insertchar] [C-insertchar] [S-insertchar] [undo] [redo] [again] [open] [insertline] [deleteline] [deletechar] [mouse-movement] [C-backspace] [C-M-left] [C-M-right] [C-M-up] [C-M-down] [C-M-home] [C-M-end] [help 8] [help help] [help f1] [help 46] [help 63] [help 1] [help 3] [help 4] [help 5] [help 6] [help 13] [help 14] [help 15] [help 16] [help 20] [help 23] [help 28] [help 67] [help 70] [help 73] [help 75] [help 76] [help 83] [help 97] [help 98] [help 99] [help 100] [help 101] [help 102] [help 103] [help 104] [help 105] [help 52 105] [help 107] [help 108] [help 109] [help 110] [help 112] [help 80] [help 114] [help 115] [help 116] [help 119] [help 118] [help 113] [compose-last-chars] [M-f10] [M-mouse-1] [M-drag-mouse-1] [M-down-mouse-1] [M-mouse-3] [M-mouse-2] [down-mouse-1] [mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1] [mouse-2] [mouse-3] [C-down-mouse-1] [mode-line mouse-1] [mode-line drag-mouse-1] [mode-line down-mouse-1] [mode-line mouse-2] [mode-line mouse-3] [mode-line C-mouse-2] [header-line down-mouse-1] [header-line mouse-1] [vertical-scroll-bar C-mouse-2] [vertical-scroll-bar mouse-1] [vertical-line C-mouse-2] [vertical-line down-mouse-1] [vertical-line mouse-1] [right-divider down-mouse-1] [bottom-divider down-mouse-1] [f10] [drag-n-drop] [C-drag-n-drop] [language-change] [lwindow] [rwindow] [f20] [f16] [f18] [cut] [copy] [paste] [wheel-up] [S-wheel-up] [C-wheel-up] [wheel-down] [S-wheel-down] [C-wheel-down] [S-mouse-3] [print] [M-print] [S-print] [C-print] [C-M-print] [127] [29] [28] [21] [20] [17] [13] [10] [9] [7] [0] [5] [2] [67108896] [4] [11] [31] [C-M-I] [C-M-i] [M-left] [M-right] [8 8] [8 help] [8 f1] [8 46] [8 63] [8 1] [8 3] [8 4] [8 5] [8 6] [8 13] [8 14] [8 15] [8 16] [8 20] [8 23] [8 28] [8 67] [8 70] [8 73] [8 75] [8 76] [8 83] [8 97] [8 98] [8 99] [8 100] [8 101] [8 102] [8 103] [8 104] [8 105] [8 107] [8 108] [8 109] [8 110] [8 112] [8 80] [8 114] [8 115] [8 116] [8 119] [8 118] [8 113] [8 39] [8 49] [8 50] [8 51] [8 52] [8 53] [8 55] [8 56] [8 57] [8 96] [8 122] [8 26] [f1 8] [f1 help] [f1 f1] [f1 46] [f1 63] [f1 1] [f1 3] [f1 4] [f1 5] [f1 6] [f1 13] [f1 14] [f1 15] [f1 16] [f1 20] [f1 23] [f1 28] [f1 67] [f1 70] [f1 73] [f1 75] [f1 76] [f1 83] [f1 97] [f1 98] [f1 99] [f1 100] [f1 101] [f1 102] [f1 103] [f1 104] [f1 105] [f1 107] [f1 108] [f1 109] [f1 110] [f1 112] [f1 80] [f1 114] [f1 115] [f1 116] [f1 119] [f1 118] [f1 113] [f1 39] [f1 49] [f1 50] [f1 51] [f1 52] [f1 53] [f1 55] [f1 56] [f1 57] [f1 96] [apps 107 105] [apps 107 107] [apps 107 44] [apps 107 106] [apps 107 117] [apps 110 97] [apps 110 65] [apps 110 1] [apps 110 99] [apps 110 100] [apps 110 101] [apps 110 102] [apps 110 103] [apps 110 111] [apps 110 115] [apps 110 116] [apps 110 20] [apps 110 84] [apps 105 99] [apps 105 100] [apps 105 101] [apps 105 102] [apps 105 108] [apps 105 113] [apps 105 114] [apps 105 18] [apps 39] [apps 50] [apps 51] [apps 52] [apps 53] [apps f2] [apps f3] [apps return] [apps 13] [apps 9] [apps 32] [apps 97] [apps 100] [apps 102] [apps 104 8] [apps 104 help] [apps 104 f1] [apps 104 46] [apps 104 63] [apps 104 1] [apps 104 3] [apps 104 4] [apps 104 5] [apps 104 6] [apps 104 13] [apps 104 14] [apps 104 15] [apps 104 16] [apps 104 20] [apps 104 23] [apps 104 28] [apps 104 67] [apps 104 70] [apps 104 73] [apps 104 75] [apps 104 76] [apps 104 83] [apps 104 97] [apps 104 98] [apps 104 99] [apps 104 100] [apps 104 101] [apps 104 102] [apps 104 103] [apps 104 104] [apps 104 105] [apps 104 52] [apps 104 107] [apps 104 108] [apps 104 109] [apps 104 110] [apps 104 112] [apps 104 80] [apps 104 114] [apps 104 115] [apps 104 116] [apps 104 119] [apps 104 118] [apps 104 113] [apps 104 39] [apps 104 49] [apps 104 50] [apps 104 51] [apps 104 53] [apps 104 55] [apps 104 56] [apps 104 57] [apps 104 96] [apps 104 122] [apps 104 26] [apps 104 90] [apps 115] [apps 19] [apps 111] [apps 103] [apps 119] [apps 120] [apps 99] [apps 118] [apps 98] [apps 116] [apps 122] [apps 114 99] [apps 114 103] [apps 114 27 103] [apps 114 27 110] [apps 114 27 112] [apps 114 110] [apps 114 112] [apps 114 9] [menu 107 105] [menu 107 107] [menu 107 44] [menu 107 106] [menu 107 117] [menu 110 97] [menu 110 65] [menu 110 1] [menu 110 99] [menu 110 100] [menu 110 101] [menu 110 102] [menu 110 103] [menu 110 111] [menu 110 115] [menu 110 116] [menu 110 20] [menu 110 84] [menu 105 99] [menu 105 100] [menu 105 101] [menu 105 102] [menu 105 108] [menu 105 113] [menu 105 114] [menu 105 18] [menu 39] [menu 50] [menu 51] [menu 52] [menu 53] [menu f2] [menu f3] [menu return] [menu 13] [menu 9] [menu 32] [menu 97] [menu 100] [menu 102] [menu 104 8] [menu 104 help] [menu 104 f1] [menu 104 46] [menu 104 63] [menu 104 1] [menu 104 3] [menu 104 4] [menu 104 5] [menu 104 6] [menu 104 13] [menu 104 14] [menu 104 15] [menu 104 16] [menu 104 20] [menu 104 23] [menu 104 28] [menu 104 67] [menu 104 70] [menu 104 73] [menu 104 75] [menu 104 76] [menu 104 83] [menu 104 97] [menu 104 98] [menu 104 99] [menu 104 100] [menu 104 101] [menu 104 102] [menu 104 103] [menu 104 104] [menu 104 105] [menu 104 52] [menu 104 107] [menu 104 108] [menu 104 109] [menu 104 110] [menu 104 112] [menu 104 80] [menu 104 114] [menu 104 115] [menu 104 116] [menu 104 119] [menu 104 118] [menu 104 113] [menu 104 39] [menu 104 49] [menu 104 50] [menu 104 51] [menu 104 53] [menu 104 55] [menu 104 56] [menu 104 57] [menu 104 96] [menu 104 122] [menu 104 26] [menu 104 90] [menu 115] [menu 19] [menu 111] [menu 103] [menu 119] [menu 120] [menu 99] [menu 118] [menu 98] [menu 116] [menu 122] [menu 114 99] [menu 114 103] [menu 114 27 103] [menu 114 27 110] [menu 114 27 112] [menu 114 110] [menu 114 112] [menu 114 9] [C-f2] [C-f3] [C-f4] [C-f5] [M-f2] [M-f3] [M-f5] [S-f3] [f11] [f3] [f6] [f8 111] [f8 104 114] [f8 104 112] [f8 104 108] [f8 104 46] [f8 104 117] [f8 104 119] [f8 119] [f8 95] [f8 46] [f8 f8] [f4] [tool-bar kill-buffer] [14] [15] [33554447] [33554452] [23] [6] [19] [33554451] [16] [1] [26] [33554458] [S-delete] [3 ergoemacs-timeout] [C-insert] [33554454] [S-insert] [22] [33554446] [delete] [M-delete] [27 67108912] [27 67108913] [27 67108914] [27 67108915] [27 67108916] [27 67108917] [27 67108918] [27 67108919] [27 67108920] [27 67108921] [27 67108909] [27 home] [27 next] [27 prior] [27 33554454] [27 end] [27 begin] [27 C-left] [27 C-right] [27 C-up] [27 C-down] [27 C-home] [27 C-end] [27 67108896] [27 C-delete] [27 C-backspace] [27 67108911] [27 67108910] [27 f10] [27 127] [27 124] [27 109] [27 94] [27 92] [27 64] [27 61] [27 58] [27 46] [27 45] [27 44] [27 41] [27 40] [27 38] [27 28] [27 27 27] [27 27 58] [27 23] [27 21] [27 20] [27 19] [27 18] [27 16] [27 15] [27 14] [27 9] [27 8] [27 6] [27 5] [27 4] [27 3] [27 2] [27 1] [27 0] [27 59] [27 67108901] [27 123] [27 125] [27 22] [27 62] [27 60] [27 33] [27 39] [27 119] [27 63] [27 47] [27 116] [27 113] [27 115] [27 83] [27 126] [27 96] [27 51] [27 50] [27 52] [27 36] [27 33554464] [27 56] [27 42] [27 54] [27 55] [27 121] [27 89] [27 53] [27 37] [27 117] [27 111] [27 101] [27 114] [27 85] [27 79] [27 33554441] [27 73] [27 75] [27 104] [27 72] [27 106] [27 108] [27 105] [27 107] [27 10] [27 12] [27 C-i] [27 11] [27 32] [27 100] [27 102] [27 110] [27 78] [27 74] [27 76] [27 left] [27 right] [27 112] [27 103] [27 71] [27 13] [27 97] [27 65] [27 120] [27 99] [27 118] [27 86] [27 67] [27 88] [27 90] [27 122] [27 f2] [27 f3] [27 f5] [27 delete] [27 up] [27 down] [27 f4] [27 S-next] [27 S-prior] [C-delete] [home] [end] [C-home] [C-end] [C-left] [C-right] [M-up] [M-down] [f5] [18] [M-f4] [S-down-mouse-1] [S-mouse-1] [67108907] [67108909] [67108910] [67108911] [67108912] [C-next] [C-prior] [67108925] [67108927] [C-S-next] [C-S-prior] [33554438] [33554455] [67108960] [12] [24 right] [24 C-right] [24 left] [24 C-left] [24 67108896] [24 67108907] [24 67108909] [24 67108925] [24 67108912] [24 127] [24 125] [24 123] [24 122] [24 118 97] [24 118 98] [24 118 99] [24 118 100] [24 118 103] [24 118 104] [24 118 105] [24 118 108] [24 118 76] [24 118 73] [24 118 79] [24 118 109] [24 118 114] [24 118 115] [24 118 117] [24 118 118] [24 118 43] [24 118 61] [24 118 68] [24 118 126] [24 115] [24 114 99] [24 114 107] [24 114 100] [24 114 121] [24 114 111] [24 114 116] [24 114 78] [24 114 27 119] [24 114 0] [24 114 67108896] [24 114 32] [24 114 106] [24 114 115] [24 114 120] [24 114 105] [24 114 103] [24 114 114] [24 114 110] [24 114 43] [24 114 119] [24 114 102] [24 114 98] [24 114 109] [24 114 108] [24 113] [24 111] [24 110 110] [24 110 119] [24 110 100] [24 110 112] [24 110 115] [24 110 98] [24 110 101] [24 109] [24 108] [24 105] [24 102] [24 101] [24 100] [24 98] [24 97 108] [24 97 1] [24 97 103] [24 97 43] [24 97 105 103] [24 97 105 108] [24 97 45] [24 97 101] [24 97 39] [24 97 112] [24 97 110] [24 96] [24 94] [24 93] [24 91] [24 62] [24 61] [24 60] [24 59] [24 56 13] [24 54 50] [24 54 f2] [24 54 98] [24 54 115] [24 53 109] [24 53 98] [24 53 102] [24 53 6] [24 53 114] [24 53 15] [24 53 100] [24 53 46] [24 53 50] [24 53 49] [24 53 48] [24 53 111] [24 52 109] [24 52 97] [24 52 99] [24 52 48] [24 52 102] [24 52 114] [24 52 6] [24 52 98] [24 52 15] [24 52 100] [24 52 46] [24 46] [24 45] [24 43] [24 42] [24 41] [24 40] [24 39] [24 36] [24 32] [24 27 27] [24 27 58] [24 26] [24 24] [24 22] [24 21] [24 20] [24 18] [24 17] [24 16] [24 15] [24 14] [24 13 102] [24 13 114] [24 13 70] [24 13 116] [24 13 107] [24 13 112] [24 13 120] [24 13 88] [24 13 28] [24 13 99] [24 13 108] [24 12] [24 11 115] [24 11 19] [24 11 11] [24 11 114] [24 11 113] [24 11 14] [24 11 16] [24 11 22] [24 11 4] [24 11 20] [24 11 12] [24 11 6] [24 11 3] [24 11 9] [24 11 1] [24 11 5] [24 11 13] [24 11 101] [24 11 108] [24 11 32] [24 11 98] [24 11 110] [24 11 120] [24 9] [24 5] [24 4] [24 3] [24 0] [24 49] [24 48] [24 51] [24 50] [24 117] [24 6] [24 19] [24 23] [24 104] [24 107] [24 ergoemacs-timeout] [24 2] [25] [M-S-next] [M-S-prior] [escape] [menu-bar mouse-1] [ergoemacs-ignore] [f12] [f2]) :extract-where-is #s(hash-table size 487 test eql rehash-size 1.5 rehash-threshold 0.8 data (bs-show ([f2]) sr-speedbar-toggle ([f12]) ergoemacs-command-loop--ignore ([ergoemacs-ignore]) tmm-menubar-mouse ([menu-bar mouse-1]) keyboard-quit ([escape]) backward-page ([M-S-prior]) forward-page ([M-S-next]) ergoemacs-redo ([25]) ibuffer ([24 2]) ergoemacs-cut-line-or-region ([24 ergoemacs-timeout]) ergoemacs-map-undefined ([24 107]) pop-global-mark ([24 0]) save-buffers-kill-terminal ([24 3]) list-directory ([24 4]) eval-last-sexp ([24 5]) indent-rigidly ([24 9]) kmacro-to-register ([24 11 120]) kmacro-name-last-macro ([24 11 110]) kmacro-bind-to-key ([24 11 98]) kmacro-step-edit-macro ([24 11 32]) kmacro-edit-lossage ([24 11 108]) edit-kbd-macro ([24 11 101]) kmacro-edit-macro ([24 11 13]) kmacro-edit-macro-repeat ([24 11 5]) kmacro-add-counter ([24 11 1]) kmacro-insert-counter ([24 11 9]) kmacro-set-counter ([24 11 3]) kmacro-set-format ([24 11 6]) kmacro-call-ring-2nd-repeat ([24 11 12]) kmacro-swap-ring ([24 11 20]) kmacro-delete-ring-head ([24 11 4]) kmacro-view-macro-repeat ([24 11 22]) kmacro-cycle-ring-previous ([24 11 16]) kmacro-cycle-ring-next ([24 11 14]) kbd-macro-query ([24 11 113]) apply-macro-to-region-lines ([24 11 114]) kmacro-end-or-call-macro-repeat ([24 11 11]) kmacro-start-macro ([24 11 19]) downcase-region ([24 12]) set-language-environment ([24 13 108]) universal-coding-system-argument ([24 13 99]) set-input-method ([24 13 28]) set-next-selection-coding-system ([24 13 88]) set-selection-coding-system ([24 13 120]) set-buffer-process-coding-system ([24 13 112]) set-keyboard-coding-system ([24 13 107]) set-terminal-coding-system ([24 13 116]) set-file-name-coding-system ([24 13 70]) revert-buffer-with-coding-system ([24 13 114]) set-buffer-file-coding-system ([24 13 102]) set-goal-column ([24 14]) delete-blank-lines ([24 15]) mark-page ([24 16]) read-only-mode ([24 17]) find-file-read-only ([24 18]) transpose-lines ([24 20]) upcase-region ([24 21]) find-alternate-file ([24 22]) exchange-point-and-mark ([24 24]) suspend-frame ([24 26]) repeat-complex-command ([24 27 58]) rectangle-mark-mode ([24 32]) set-selective-display ([24 36]) expand-abbrev ([24 39]) kmacro-end-macro ([24 41]) calc-dispatch ([24 42]) balance-windows ([24 43]) shrink-window-if-larger-than-buffer ([24 45]) set-fill-prefix ([24 46]) find-tag-other-window ([24 52 46]) dired-other-window ([24 52 100]) display-buffer ([24 52 15]) switch-to-buffer-other-window ([24 52 98]) find-file-other-window ([24 52 6]) find-file-read-only-other-window ([24 52 114]) kill-buffer-and-window ([24 52 48]) clone-indirect-buffer-other-window ([24 52 99]) add-change-log-entry-other-window ([24 52 97]) compose-mail-other-window ([24 52 109]) other-frame ([24 53 111]) delete-frame ([24 53 48]) delete-other-frames ([24 53 49]) make-frame-command ([24 53 50]) find-tag-other-frame ([24 53 46]) dired-other-frame ([24 53 100]) display-buffer-other-frame ([24 53 15]) find-file-read-only-other-frame ([24 53 114]) find-file-other-frame ([24 53 6]) switch-to-buffer-other-frame ([24 53 98]) compose-mail-other-frame ([24 53 109]) 2C-split ([24 54 115]) 2C-associate-buffer ([24 54 98]) 2C-two-columns ([24 54 f2]) insert-char ([24 56 13]) comment-set-column ([24 59]) scroll-left ([24 60]) what-cursor-position ([24 61]) scroll-right ([24 62]) enlarge-window ([24 94]) next-error ([24 96]) expand-jump-to-next-slot ([24 97 110]) expand-jump-to-previous-slot ([24 97 112]) inverse-add-global-abbrev ([24 97 45]) inverse-add-mode-abbrev ([24 97 105 108]) add-mode-abbrev ([24 97 43]) add-global-abbrev ([24 97 103]) switch-to-buffer ([24 98]) dired ([24 100]) kmacro-end-and-call-macro ([24 101]) set-fill-column ([24 102]) insert-file ([24 105]) count-lines-page ([24 108]) compose-mail ([24 109]) org-narrow-to-element ([24 110 101]) org-narrow-to-block ([24 110 98]) org-narrow-to-subtree ([24 110 115]) narrow-to-page ([24 110 112]) narrow-to-defun ([24 110 100]) widen ([24 110 119]) narrow-to-region ([24 110 110]) other-window ([24 111]) bookmark-bmenu-list ([24 114 108]) bookmark-set ([24 114 109]) bookmark-jump ([24 114 98]) frameset-to-register ([24 114 102]) window-configuration-to-register ([24 114 119]) increment-register ([24 114 43]) number-to-register ([24 114 110]) copy-rectangle-to-register ([24 114 114]) insert-register ([24 114 103]) copy-to-register ([24 114 120]) jump-to-register ([24 114 106]) point-to-register ([24 114 32]) copy-rectangle-as-kill ([24 114 27 119]) rectangle-number-lines ([24 114 78]) string-rectangle ([24 114 116]) open-rectangle ([24 114 111]) yank-rectangle ([24 114 121]) delete-rectangle ([24 114 100]) kill-rectangle ([24 114 107]) clear-rectangle ([24 114 99]) save-some-buffers ([24 115]) vc-revision-other-window ([24 118 126]) vc-root-diff ([24 118 68]) vc-diff ([24 118 61]) vc-update ([24 118 43]) vc-next-action ([24 118 118]) vc-revert ([24 118 117]) vc-create-tag ([24 118 115]) vc-retrieve-tag ([24 118 114]) vc-merge ([24 118 109]) vc-log-outgoing ([24 118 79]) vc-log-incoming ([24 118 73]) vc-print-root-log ([24 118 76]) vc-print-log ([24 118 108]) vc-register ([24 118 105]) vc-insert-headers ([24 118 104]) vc-annotate ([24 118 103]) vc-dir ([24 118 100]) vc-rollback ([24 118 99]) vc-switch-backend ([24 118 98]) vc-update-change-log ([24 118 97]) repeat ([24 122]) shrink-window-horizontally ([24 123]) enlarge-window-horizontally ([24 125]) backward-kill-sentence ([24 127]) text-scale-adjust ([24 67108912]) previous-buffer ([24 C-left]) next-buffer ([24 C-right]) goto-line ([12]) occur ([33554438]) ergoemacs-previous-emacs-buffer ([C-S-prior]) ergoemacs-next-emacs-buffer ([C-S-next]) info ([67108927]) text-scale-increase ([67108925]) ergoemacs-previous-user-buffer ([C-prior]) ergoemacs-next-user-buffer ([C-next]) ergoemacs-text-scale-normal-size ([67108912]) text-scale-decrease ([67108909]) ignore ([S-mouse-1]) mouse-save-then-kill ([S-down-mouse-1]) ergoemacs-delete-frame ([M-f4]) revert-buffer ([18]) ergoemacs-forward-block ([M-down]) ergoemacs-backward-block ([M-up]) forward-word ([C-right]) backward-word ([C-left]) end-of-buffer ([C-end]) beginning-of-buffer ([C-home]) move-end-of-line ([end]) move-beginning-of-line ([home]) kill-word ([C-delete]) ergoemacs-copy-all ([27 f3]) ergoemacs-cut-all ([27 f2]) undo ([27 122]) ergoemacs-paste-cycle ([27 86]) ergoemacs-paste ([27 118]) ergoemacs-copy-line-or-region ([27 99]) shell-command ([27 65]) execute-extended-command ([27 97]) electric-newline-and-maybe-indent ([27 13]) ergoemacs-kill-line-backward ([27 71]) kill-line ([27 103]) recenter-top-bottom ([27 112]) ergoemacs-forward-close-bracket ([27 right]) ergoemacs-backward-open-bracket ([27 left]) ergoemacs-end-or-beginning-of-buffer ([27 78]) ergoemacs-beginning-or-end-of-buffer ([27 110]) delete-char ([27 102]) delete-backward-char ([27 100]) set-mark-command ([27 32]) forward-paragraph ([27 11]) backward-paragraph ([27 C-i]) right-word ([27 12]) left-word ([27 10]) next-line ([27 107]) previous-line ([27 105]) forward-char ([27 108]) backward-char ([27 106]) scroll-up-command ([27 75]) scroll-down-command ([27 73]) scroll-other-window-down ([27 33554441]) backward-kill-word ([27 101]) query-replace-regexp ([27 37]) query-replace ([27 53]) isearch-backward ([27 89]) isearch-forward ([27 121]) ergoemacs-select-current-line ([27 55]) ergoemacs-select-current-block ([27 54]) ergoemacs-select-text-in-quote ([27 42]) ergoemacs-extend-selection ([27 56]) mark-paragraph ([27 33554464]) split-window-right ([27 36]) split-window-below ([27 52]) delete-window ([27 50]) delete-other-windows ([27 51]) ergoemacs-switch-to-next-frame ([27 96]) ergoemacs-switch-to-previous-frame ([27 126]) ergoemacs-move-cursor-previous-pane ([27 83]) ergoemacs-move-cursor-next-pane ([27 115]) ergoemacs-compact-uncompact-block ([27 113]) ergoemacs-call-keyword-completion ([27 116]) ergoemacs-toggle-letter-case ([27 47]) ergoemacs-toggle-camel-case ([27 63]) ergoemacs-shrink-whitespaces ([27 119]) comment-dwim ([27 39]) mark-sexp ([27 0]) beginning-of-defun ([27 1]) backward-sexp ([27 2]) exit-recursive-edit ([27 3]) down-list ([27 4]) end-of-defun ([27 5]) forward-sexp ([27 6]) mark-defun ([27 8]) complete-symbol ([27 9]) forward-list ([27 14]) split-line ([27 15]) backward-list ([27 16]) isearch-backward-regexp ([27 18]) isearch-forward-regexp ([27 19]) transpose-sexps ([27 20]) backward-up-list ([27 21]) append-next-kill ([27 23]) eval-expression ([27 27 58]) keyboard-escape-quit ([27 27 27]) indent-region ([27 28]) async-shell-command ([27 38]) insert-parentheses ([27 40]) move-past-close-and-reindent ([27 41]) tags-loop-continue ([27 44]) negative-argument ([27 45]) find-tag ([27 46]) count-words-region ([27 61]) mark-word ([27 64]) delete-horizontal-space ([27 92]) delete-indentation ([27 94]) back-to-indentation ([27 109]) shell-command-on-region ([27 124]) toggle-frame-maximized ([27 f10]) find-tag-regexp ([27 67108910]) dabbrev-completion ([27 67108911]) backward-kill-sexp ([27 C-backspace]) beginning-of-buffer-other-window ([27 begin]) end-of-buffer-other-window ([27 end]) scroll-other-window ([27 next]) digit-argument ([27 67108921]) mark-whole-buffer ([1]) ergoemacs-print-buffer-confirm ([16]) write-file ([33554451]) save-buffer ([19]) ergoemacs-close-current-buffer ([23]) ergoemacs-open-last-closed ([33554452]) ergoemacs-open-in-external-app ([33554447]) find-file ([15]) ergoemacs-new-empty-buffer ([14]) highlight-symbol-at-point ([f8 f8]) isearch-forward-symbol-at-point ([f8 46]) isearch-forward-symbol ([f8 95]) isearch-forward-word ([f8 119]) hi-lock-write-interactive-patterns ([f8 104 119]) unhighlight-regexp ([f8 104 117]) highlight-lines-matching-regexp ([f8 104 108]) highlight-phrase ([f8 104 112]) highlight-regexp ([f8 104 114]) ergoemacs-unchorded-alt-modal ([f6]) move-to-column ([menu 114 9]) previous-error ([menu 114 112]) goto-char ([menu 114 99]) ergoemacs-read-key--universal-argument ([menu 103]) ergoemacs-clean-nw ([menu 104 90]) ergoemacs-clean-library ([menu 104 26]) ergoemacs-clean ([menu 104 122]) elisp-index-search ([menu 104 96]) ergoemacs-lookup-word-definition ([menu 104 57]) ergoemacs-lookup-wikipedia ([menu 104 56]) ergoemacs-lookup-google ([menu 104 55]) man ([menu 104 53]) describe-key ([menu 104 51]) describe-variable ([menu 104 50]) describe-function ([menu 104 49]) ergoemacs-describe-current-theme ([menu 104 39]) help-quit ([menu 104 113]) where-is ([menu 104 119]) help-with-tutorial ([menu 104 116]) describe-syntax ([menu 104 115]) info-emacs-manual ([menu 104 114]) describe-package ([menu 104 80]) finder-by-keyword ([menu 104 112]) view-emacs-news ([menu 104 110]) describe-mode ([menu 104 109]) view-lossage ([menu 104 108]) describe-char ([menu 104 52]) view-hello-file ([menu 104 104]) describe-gnu-project ([menu 104 103]) view-echo-area-messages ([menu 104 101]) apropos-documentation ([menu 104 100]) describe-key-briefly ([menu 104 99]) describe-bindings ([menu 104 98]) apropos-command ([menu 104 97]) info-lookup-symbol ([menu 104 83]) describe-language-environment ([menu 104 76]) Info-goto-emacs-key-command-node ([menu 104 75]) describe-input-method ([menu 104 73]) Info-goto-emacs-command-node ([menu 104 70]) describe-coding-system ([menu 104 67]) describe-no-warranty ([menu 104 23]) view-emacs-todo ([menu 104 20]) view-emacs-problems ([menu 104 16]) describe-distribution ([menu 104 15]) view-order-manuals ([menu 104 13]) view-emacs-FAQ ([menu 104 6]) view-external-packages ([menu 104 5]) view-emacs-debugging ([menu 104 4]) describe-copying ([menu 104 3]) about-emacs ([menu 104 1]) help-for-help ([menu 104 63]) display-local-help ([menu 104 46]) (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) ([menu 102]) (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) ([menu 100]) split-window-vertically ([menu 52]) ergoemacs-org-edit-src ([menu 39]) toggle-debug-on-quit ([menu 105 113]) toggle-truncate-lines ([menu 105 108]) auto-fill-mode ([menu 105 102]) toggle-debug-on-error ([menu 105 101]) column-number-mode ([menu 105 99]) org-agenda ([menu 110 84]) org-capture ([menu 110 116]) shell ([menu 110 115]) grep ([menu 110 103]) ergoemacs-open-in-desktop ([menu 110 102]) eshell ([menu 110 101]) dired-jump ([menu 110 100]) calc ([menu 110 99]) ergoemacs-smart-apostrophe ([menu 107 117]) ergoemacs-smart-quote ([menu 107 106]) ergoemacs-smart-curly ([menu 107 44]) ergoemacs-smart-paren ([menu 107 107]) ergoemacs-smart-bracket ([menu 107 105]) indent-for-tab-command ([9]) newline ([13]) quoted-insert ([17]) transpose-chars ([20]) universal-argument ([21]) toggle-input-method ([28]) abort-recursive-edit ([29]) pr-txt-fast-fire ([C-M-print]) pr-ps-mode-using-ghostscript ([S-print]) pr-ps-fast-fire ([print]) kmacro-end-call-mouse ([S-mouse-3]) mwheel-scroll ([C-wheel-down]) clipboard-yank ([paste]) clipboard-kill-ring-save ([copy]) clipboard-kill-region ([cut]) w32-drag-n-drop-other-frame ([C-drag-n-drop]) w32-drag-n-drop ([drag-n-drop]) menu-bar-open ([f10]) mouse-drag-mode-line ([bottom-divider down-mouse-1]) mouse-drag-vertical-line ([right-divider down-mouse-1]) mouse-select-window ([vertical-line mouse-1]) mouse-split-window-vertically ([vertical-line C-mouse-2]) scroll-bar-toolkit-scroll ([vertical-scroll-bar mouse-1]) mouse-drag-header-line ([header-line down-mouse-1]) mouse-split-window-horizontally ([mode-line C-mouse-2]) mouse-delete-window ([mode-line mouse-3]) mouse-delete-other-windows ([mode-line mouse-2]) mouse-buffer-menu ([C-down-mouse-1]) mouse-yank-primary ([mouse-2]) mouse-set-point ([triple-mouse-1]) mouse-set-region ([drag-mouse-1]) mouse-drag-region ([down-mouse-1]) mouse-yank-secondary ([M-mouse-2]) mouse-secondary-save-then-kill ([M-mouse-3]) mouse-drag-secondary ([M-down-mouse-1]) mouse-set-secondary ([M-drag-mouse-1]) mouse-start-secondary ([M-mouse-1]) compose-last-chars ([compose-last-chars]) info-other-window ([help 52 105]) delete-forward-char ([deletechar]) open-line ([insertline]) yank ([S-insertchar]) kill-ring-save ([C-insertchar]) overwrite-mode ([insertchar]) right-char ([right]) left-char ([left]) kill-whole-line ([C-S-backspace]) search-forward ([find]) handle-delete-frame ([delete-frame]) handle-select-window ([select-window]) handle-switch-frame ([switch-frame]))) :extract-lookup #s(hash-table size 1095 test equal rehash-size 1.5 rehash-threshold 0.8 data ([f2] bs-show [f12] sr-speedbar-toggle [ergoemacs-ignore] ergoemacs-command-loop--ignore [menu-bar mouse-1] tmm-menubar-mouse [escape] keyboard-quit [M-S-prior] backward-page [M-S-next] forward-page [25] ergoemacs-redo [24 2] ibuffer [24 ergoemacs-timeout] ergoemacs-cut-line-or-region [24 107] ergoemacs-map-undefined [24 104] ergoemacs-map-undefined [24 23] ergoemacs-map-undefined [24 19] ergoemacs-map-undefined [24 6] ergoemacs-map-undefined [24 117] ergoemacs-map-undefined [24 50] ergoemacs-map-undefined [24 51] ergoemacs-map-undefined [24 48] ergoemacs-map-undefined [24 49] ergoemacs-map-undefined [24 0] pop-global-mark [24 3] save-buffers-kill-terminal [24 4] list-directory [24 5] eval-last-sexp [24 9] indent-rigidly [24 11 120] kmacro-to-register [24 11 110] kmacro-name-last-macro [24 11 98] kmacro-bind-to-key [24 11 32] kmacro-step-edit-macro [24 11 108] kmacro-edit-lossage [24 11 101] edit-kbd-macro [24 11 13] kmacro-edit-macro [24 11 5] kmacro-edit-macro-repeat [24 11 1] kmacro-add-counter [24 11 9] kmacro-insert-counter [24 11 3] kmacro-set-counter [24 11 6] kmacro-set-format [24 11 12] kmacro-call-ring-2nd-repeat [24 11 20] kmacro-swap-ring [24 11 4] kmacro-delete-ring-head [24 11 22] kmacro-view-macro-repeat [24 11 16] kmacro-cycle-ring-previous [24 11 14] kmacro-cycle-ring-next [24 11 113] kbd-macro-query [24 11 114] apply-macro-to-region-lines [24 11 11] kmacro-end-or-call-macro-repeat [24 11 19] kmacro-start-macro [24 11 115] kmacro-start-macro [24 12] downcase-region [24 13 108] set-language-environment [24 13 99] universal-coding-system-argument [24 13 28] set-input-method [24 13 88] set-next-selection-coding-system [24 13 120] set-selection-coding-system [24 13 112] set-buffer-process-coding-system [24 13 107] set-keyboard-coding-system [24 13 116] set-terminal-coding-system [24 13 70] set-file-name-coding-system [24 13 114] revert-buffer-with-coding-system [24 13 102] set-buffer-file-coding-system [24 14] set-goal-column [24 15] delete-blank-lines [24 16] mark-page [24 17] read-only-mode [24 18] find-file-read-only [24 20] transpose-lines [24 21] upcase-region [24 22] find-alternate-file [24 24] exchange-point-and-mark [24 26] suspend-frame [24 27 58] repeat-complex-command [24 27 27] repeat-complex-command [24 32] rectangle-mark-mode [24 36] set-selective-display [24 39] expand-abbrev [24 40] kmacro-start-macro [24 41] kmacro-end-macro [24 42] calc-dispatch [24 43] balance-windows [24 45] shrink-window-if-larger-than-buffer [24 46] set-fill-prefix [24 52 46] find-tag-other-window [24 52 100] dired-other-window [24 52 15] display-buffer [24 52 98] switch-to-buffer-other-window [24 52 6] find-file-other-window [24 52 114] find-file-read-only-other-window [24 52 102] find-file-other-window [24 52 48] kill-buffer-and-window [24 52 99] clone-indirect-buffer-other-window [24 52 97] add-change-log-entry-other-window [24 52 109] compose-mail-other-window [24 53 111] other-frame [24 53 48] delete-frame [24 53 49] delete-other-frames [24 53 50] make-frame-command [24 53 46] find-tag-other-frame [24 53 100] dired-other-frame [24 53 15] display-buffer-other-frame [24 53 114] find-file-read-only-other-frame [24 53 6] find-file-other-frame [24 53 102] find-file-other-frame [24 53 98] switch-to-buffer-other-frame [24 53 109] compose-mail-other-frame [24 54 115] 2C-split [24 54 98] 2C-associate-buffer [24 54 f2] 2C-two-columns [24 54 50] 2C-two-columns [24 56 13] insert-char [24 59] comment-set-column [24 60] scroll-left [24 61] what-cursor-position [24 62] scroll-right [24 91] backward-page [24 93] forward-page [24 94] enlarge-window [24 96] next-error [24 97 110] expand-jump-to-next-slot [24 97 112] expand-jump-to-previous-slot [24 97 39] expand-abbrev [24 97 101] expand-abbrev [24 97 45] inverse-add-global-abbrev [24 97 105 108] inverse-add-mode-abbrev [24 97 105 103] inverse-add-global-abbrev [24 97 43] add-mode-abbrev [24 97 103] add-global-abbrev [24 97 1] add-mode-abbrev [24 97 108] add-mode-abbrev [24 98] switch-to-buffer [24 100] dired [24 101] kmacro-end-and-call-macro [24 102] set-fill-column [24 105] insert-file [24 108] count-lines-page [24 109] compose-mail [24 110 101] org-narrow-to-element [24 110 98] org-narrow-to-block [24 110 115] org-narrow-to-subtree [24 110 112] narrow-to-page [24 110 100] narrow-to-defun [24 110 119] widen [24 110 110] narrow-to-region [24 111] other-window [24 113] kbd-macro-query [24 114 108] bookmark-bmenu-list [24 114 109] bookmark-set [24 114 98] bookmark-jump [24 114 102] frameset-to-register [24 114 119] window-configuration-to-register [24 114 43] increment-register [24 114 110] number-to-register [24 114 114] copy-rectangle-to-register [24 114 103] insert-register [24 114 105] insert-register [24 114 120] copy-to-register [24 114 115] copy-to-register [24 114 106] jump-to-register [24 114 32] point-to-register [24 114 67108896] point-to-register [24 114 0] point-to-register [24 114 27 119] copy-rectangle-as-kill [24 114 78] rectangle-number-lines [24 114 116] string-rectangle [24 114 111] open-rectangle [24 114 121] yank-rectangle [24 114 100] delete-rectangle [24 114 107] kill-rectangle [24 114 99] clear-rectangle [24 115] save-some-buffers [24 118 126] vc-revision-other-window [24 118 68] vc-root-diff [24 118 61] vc-diff [24 118 43] vc-update [24 118 118] vc-next-action [24 118 117] vc-revert [24 118 115] vc-create-tag [24 118 114] vc-retrieve-tag [24 118 109] vc-merge [24 118 79] vc-log-outgoing [24 118 73] vc-log-incoming [24 118 76] vc-print-root-log [24 118 108] vc-print-log [24 118 105] vc-register [24 118 104] vc-insert-headers [24 118 103] vc-annotate [24 118 100] vc-dir [24 118 99] vc-rollback [24 118 98] vc-switch-backend [24 118 97] vc-update-change-log [24 122] repeat [24 123] shrink-window-horizontally [24 125] enlarge-window-horizontally [24 127] backward-kill-sentence [24 67108912] text-scale-adjust [24 67108925] text-scale-adjust [24 67108909] text-scale-adjust [24 67108907] text-scale-adjust [24 67108896] pop-global-mark [24 C-left] previous-buffer [24 left] previous-buffer [24 C-right] next-buffer [24 right] next-buffer [12] goto-line [67108960] other-frame [33554455] delete-frame [33554438] occur [C-S-prior] ergoemacs-previous-emacs-buffer [C-S-next] ergoemacs-next-emacs-buffer [67108927] info [67108925] text-scale-increase [C-prior] ergoemacs-previous-user-buffer [C-next] ergoemacs-next-user-buffer [67108912] ergoemacs-text-scale-normal-size [67108911] info [67108910] keyboard-quit [67108909] text-scale-decrease [67108907] text-scale-increase [S-mouse-1] ignore [S-down-mouse-1] mouse-save-then-kill [M-f4] ergoemacs-delete-frame [18] revert-buffer [f5] revert-buffer [M-down] ergoemacs-forward-block [M-up] ergoemacs-backward-block [C-right] forward-word [C-left] backward-word [C-end] end-of-buffer [C-home] beginning-of-buffer [end] move-end-of-line [home] move-beginning-of-line [C-delete] kill-word [27 S-prior] backward-page [27 S-next] forward-page [27 f4] ergoemacs-delete-frame [27 down] ergoemacs-forward-block [27 up] ergoemacs-backward-block [27 delete] kill-word [27 f5] ergoemacs-redo [27 f3] ergoemacs-copy-all [27 f2] ergoemacs-cut-all [27 122] undo [27 90] undo [27 88] ergoemacs-cut-all [27 67] ergoemacs-copy-all [27 86] ergoemacs-paste-cycle [27 118] ergoemacs-paste [27 99] ergoemacs-copy-line-or-region [27 120] ergoemacs-cut-line-or-region [27 65] shell-command [27 97] execute-extended-command [27 13] electric-newline-and-maybe-indent [27 71] ergoemacs-kill-line-backward [27 103] kill-line [27 112] recenter-top-bottom [27 right] ergoemacs-forward-close-bracket [27 left] ergoemacs-backward-open-bracket [27 76] ergoemacs-forward-close-bracket [27 74] ergoemacs-backward-open-bracket [27 78] ergoemacs-end-or-beginning-of-buffer [27 110] ergoemacs-beginning-or-end-of-buffer [27 102] delete-char [27 100] delete-backward-char [27 32] set-mark-command [27 11] forward-paragraph [27 C-i] backward-paragraph [27 12] right-word [27 10] left-word [27 107] next-line [27 105] previous-line [27 108] forward-char [27 106] backward-char [27 72] move-end-of-line [27 104] move-beginning-of-line [27 75] scroll-up-command [27 73] scroll-down-command [27 33554441] scroll-other-window-down [27 79] forward-paragraph [27 85] backward-paragraph [27 114] kill-word [27 101] backward-kill-word [27 111] forward-word [27 117] backward-word [27 37] query-replace-regexp [27 53] query-replace [27 89] isearch-backward [27 121] isearch-forward [27 55] ergoemacs-select-current-line [27 54] ergoemacs-select-current-block [27 42] ergoemacs-select-text-in-quote [27 56] ergoemacs-extend-selection [27 33554464] mark-paragraph [27 36] split-window-right [27 52] split-window-below [27 50] delete-window [27 51] delete-other-windows [27 96] ergoemacs-switch-to-next-frame [27 126] ergoemacs-switch-to-previous-frame [27 83] ergoemacs-move-cursor-previous-pane [27 115] ergoemacs-move-cursor-next-pane [27 113] ergoemacs-compact-uncompact-block [27 116] ergoemacs-call-keyword-completion [27 47] ergoemacs-toggle-letter-case [27 63] ergoemacs-toggle-camel-case [27 119] ergoemacs-shrink-whitespaces [27 39] comment-dwim [27 33] ergoemacs-map-undefined [27 60] ergoemacs-map-undefined [27 62] ergoemacs-map-undefined [27 22] ergoemacs-map-undefined [27 125] ergoemacs-map-undefined [27 123] ergoemacs-map-undefined [27 67108901] ergoemacs-map-undefined [27 59] ergoemacs-map-undefined [27 0] mark-sexp [27 1] beginning-of-defun [27 2] backward-sexp [27 3] exit-recursive-edit [27 4] down-list [27 5] end-of-defun [27 6] forward-sexp [27 8] mark-defun [27 9] complete-symbol [27 14] forward-list [27 15] split-line [27 16] backward-list [27 18] isearch-backward-regexp [27 19] isearch-forward-regexp [27 20] transpose-sexps [27 21] backward-up-list [27 23] append-next-kill [27 27 58] eval-expression [27 27 27] keyboard-escape-quit [27 28] indent-region [27 38] async-shell-command [27 40] insert-parentheses [27 41] move-past-close-and-reindent [27 44] tags-loop-continue [27 45] negative-argument [27 46] find-tag [27 58] eval-expression [27 61] count-words-region [27 64] mark-word [27 92] delete-horizontal-space [27 94] delete-indentation [27 109] back-to-indentation [27 124] shell-command-on-region [27 127] backward-kill-word [27 f10] toggle-frame-maximized [27 67108910] find-tag-regexp [27 67108911] dabbrev-completion [27 C-backspace] backward-kill-sexp [27 C-delete] backward-kill-sexp [27 67108896] mark-sexp [27 C-end] end-of-defun [27 C-home] beginning-of-defun [27 C-down] down-list [27 C-up] backward-up-list [27 C-right] forward-sexp [27 C-left] backward-sexp [27 begin] beginning-of-buffer-other-window [27 end] end-of-buffer-other-window [27 33554454] scroll-other-window-down [27 prior] scroll-other-window-down [27 next] scroll-other-window [27 home] beginning-of-buffer-other-window [27 67108909] negative-argument [27 67108921] digit-argument [27 67108920] digit-argument [27 67108919] digit-argument [27 67108918] digit-argument [27 67108917] digit-argument [27 67108916] digit-argument [27 67108915] digit-argument [27 67108914] digit-argument [27 67108913] digit-argument [27 67108912] digit-argument [M-delete] kill-word [delete] delete-char [33554446] make-frame-command [22] ergoemacs-paste [S-insert] ergoemacs-paste [33554454] ergoemacs-paste-cycle [C-insert] ergoemacs-copy-line-or-region [3 ergoemacs-timeout] ergoemacs-copy-line-or-region [S-delete] ergoemacs-cut-line-or-region [33554458] ergoemacs-redo [26] undo [1] mark-whole-buffer [16] ergoemacs-print-buffer-confirm [33554451] write-file [19] save-buffer [6] isearch-forward [23] ergoemacs-close-current-buffer [33554452] ergoemacs-open-last-closed [33554447] ergoemacs-open-in-external-app [15] find-file [14] ergoemacs-new-empty-buffer [tool-bar kill-buffer] ergoemacs-close-current-buffer [f4] ergoemacs-paste [f8 f8] highlight-symbol-at-point [f8 46] isearch-forward-symbol-at-point [f8 95] isearch-forward-symbol [f8 119] isearch-forward-word [f8 104 119] hi-lock-write-interactive-patterns [f8 104 117] unhighlight-regexp [f8 104 46] highlight-symbol-at-point [f8 104 108] highlight-lines-matching-regexp [f8 104 112] highlight-phrase [f8 104 114] highlight-regexp [f8 111] occur [f6] ergoemacs-unchorded-alt-modal [f3] ergoemacs-copy-line-or-region [f11] previous-line [S-f3] ergoemacs-toggle-letter-case [M-f5] ergoemacs-redo [M-f3] ergoemacs-copy-all [M-f2] ergoemacs-cut-all [C-f5] ergoemacs-redo [C-f4] ergoemacs-paste-cycle [C-f3] ergoemacs-copy-all [C-f2] ergoemacs-cut-all [menu 114 9] move-to-column [menu 114 112] previous-error [menu 114 110] next-error [menu 114 27 112] previous-error [menu 114 27 110] next-error [menu 114 27 103] goto-line [menu 114 103] goto-line [menu 114 99] goto-char [menu 122] undo [menu 116] switch-to-buffer [menu 98] ergoemacs-redo [menu 118] ergoemacs-paste [menu 99] ergoemacs-copy-line-or-region [menu 120] ergoemacs-cut-line-or-region [menu 119] ergoemacs-close-current-buffer [menu 103] ergoemacs-read-key--universal-argument [menu 111] find-file [menu 19] write-file [menu 115] save-buffer [menu 104 90] ergoemacs-clean-nw [menu 104 26] ergoemacs-clean-library [menu 104 122] ergoemacs-clean [menu 104 96] elisp-index-search [menu 104 57] ergoemacs-lookup-word-definition [menu 104 56] ergoemacs-lookup-wikipedia [menu 104 55] ergoemacs-lookup-google [menu 104 53] man [menu 104 51] describe-key [menu 104 50] describe-variable [menu 104 49] describe-function [menu 104 39] ergoemacs-describe-current-theme [menu 104 113] help-quit [menu 104 118] describe-variable [menu 104 119] where-is [menu 104 116] help-with-tutorial [menu 104 115] describe-syntax [menu 104 114] info-emacs-manual [menu 104 80] describe-package [menu 104 112] finder-by-keyword [menu 104 110] view-emacs-news [menu 104 109] describe-mode [menu 104 108] view-lossage [menu 104 107] describe-key [menu 104 52] describe-char [menu 104 105] info [menu 104 104] view-hello-file [menu 104 103] describe-gnu-project [menu 104 102] describe-function [menu 104 101] view-echo-area-messages [menu 104 100] apropos-documentation [menu 104 99] describe-key-briefly [menu 104 98] describe-bindings [menu 104 97] apropos-command [menu 104 83] info-lookup-symbol [menu 104 76] describe-language-environment [menu 104 75] Info-goto-emacs-key-command-node [menu 104 73] describe-input-method [menu 104 70] Info-goto-emacs-command-node [menu 104 67] describe-coding-system [menu 104 28] describe-input-method [menu 104 23] describe-no-warranty [menu 104 20] view-emacs-todo [menu 104 16] view-emacs-problems [menu 104 15] describe-distribution [menu 104 14] view-emacs-news [menu 104 13] view-order-manuals [menu 104 6] view-emacs-FAQ [menu 104 5] view-external-packages [menu 104 4] view-emacs-debugging [menu 104 3] describe-copying [menu 104 1] about-emacs [menu 104 63] help-for-help [menu 104 46] display-local-help [menu 104 f1] help-for-help [menu 104 help] help-for-help [menu 104 8] help-for-help [menu 102] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) [menu 100] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) [menu 97] mark-whole-buffer [menu 32] set-mark-command [menu 9] indent-region [menu 13] execute-extended-command [menu return] execute-extended-command [menu f3] ergoemacs-copy-all [menu f2] ergoemacs-cut-all [menu 53] query-replace [menu 52] split-window-vertically [menu 51] delete-other-windows [menu 50] delete-window [menu 39] ergoemacs-org-edit-src [menu 105 18] revert-buffer [menu 105 114] read-only-mode [menu 105 113] toggle-debug-on-quit [menu 105 108] toggle-truncate-lines [menu 105 102] auto-fill-mode [menu 105 101] toggle-debug-on-error [menu 105 100] toggle-debug-on-error [menu 105 99] column-number-mode [menu 110 84] org-agenda [menu 110 20] org-agenda [menu 110 116] org-capture [menu 110 115] shell [menu 110 111] ergoemacs-open-in-external-app [menu 110 103] grep [menu 110 102] ergoemacs-open-in-desktop [menu 110 101] eshell [menu 110 100] dired-jump [menu 110 99] calc [menu 110 1] org-capture [menu 110 65] org-capture [menu 110 97] org-agenda [menu 107 117] ergoemacs-smart-apostrophe [menu 107 106] ergoemacs-smart-quote [menu 107 44] ergoemacs-smart-curly [menu 107 107] ergoemacs-smart-paren [menu 107 105] ergoemacs-smart-bracket [apps 114 9] move-to-column [apps 114 112] previous-error [apps 114 110] next-error [apps 114 27 112] previous-error [apps 114 27 110] next-error [apps 114 27 103] goto-line [apps 114 103] goto-line [apps 114 99] goto-char [apps 122] undo [apps 116] switch-to-buffer [apps 98] ergoemacs-redo [apps 118] ergoemacs-paste [apps 99] ergoemacs-copy-line-or-region [apps 120] ergoemacs-cut-line-or-region [apps 119] ergoemacs-close-current-buffer [apps 103] ergoemacs-read-key--universal-argument [apps 111] find-file [apps 19] write-file [apps 115] save-buffer [apps 104 90] ergoemacs-clean-nw [apps 104 26] ergoemacs-clean-library [apps 104 122] ergoemacs-clean [apps 104 96] elisp-index-search [apps 104 57] ergoemacs-lookup-word-definition [apps 104 56] ergoemacs-lookup-wikipedia [apps 104 55] ergoemacs-lookup-google [apps 104 53] man [apps 104 51] describe-key [apps 104 50] describe-variable [apps 104 49] describe-function [apps 104 39] ergoemacs-describe-current-theme [apps 104 113] help-quit [apps 104 118] describe-variable [apps 104 119] where-is [apps 104 116] help-with-tutorial [apps 104 115] describe-syntax [apps 104 114] info-emacs-manual [apps 104 80] describe-package [apps 104 112] finder-by-keyword [apps 104 110] view-emacs-news [apps 104 109] describe-mode [apps 104 108] view-lossage [apps 104 107] describe-key [apps 104 52] describe-char [apps 104 105] info [apps 104 104] view-hello-file [apps 104 103] describe-gnu-project [apps 104 102] describe-function [apps 104 101] view-echo-area-messages [apps 104 100] apropos-documentation [apps 104 99] describe-key-briefly [apps 104 98] describe-bindings [apps 104 97] apropos-command [apps 104 83] info-lookup-symbol [apps 104 76] describe-language-environment [apps 104 75] Info-goto-emacs-key-command-node [apps 104 73] describe-input-method [apps 104 70] Info-goto-emacs-command-node [apps 104 67] describe-coding-system [apps 104 28] describe-input-method [apps 104 23] describe-no-warranty [apps 104 20] view-emacs-todo [apps 104 16] view-emacs-problems [apps 104 15] describe-distribution [apps 104 14] view-emacs-news [apps 104 13] view-order-manuals [apps 104 6] view-emacs-FAQ [apps 104 5] view-external-packages [apps 104 4] view-emacs-debugging [apps 104 3] describe-copying [apps 104 1] about-emacs [apps 104 63] help-for-help [apps 104 46] display-local-help [apps 104 f1] help-for-help [apps 104 help] help-for-help [apps 104 8] help-for-help [apps 102] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) [apps 100] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) [apps 97] mark-whole-buffer [apps 32] set-mark-command [apps 9] indent-region [apps 13] execute-extended-command [apps return] execute-extended-command [apps f3] ergoemacs-copy-all [apps f2] ergoemacs-cut-all [apps 53] query-replace [apps 52] split-window-vertically [apps 51] delete-other-windows [apps 50] delete-window [apps 39] ergoemacs-org-edit-src [apps 105 18] revert-buffer [apps 105 114] read-only-mode [apps 105 113] toggle-debug-on-quit [apps 105 108] toggle-truncate-lines [apps 105 102] auto-fill-mode [apps 105 101] toggle-debug-on-error [apps 105 100] toggle-debug-on-error [apps 105 99] column-number-mode [apps 110 84] org-agenda [apps 110 20] org-agenda [apps 110 116] org-capture [apps 110 115] shell [apps 110 111] ergoemacs-open-in-external-app [apps 110 103] grep [apps 110 102] ergoemacs-open-in-desktop [apps 110 101] eshell [apps 110 100] dired-jump [apps 110 99] calc [apps 110 1] org-capture [apps 110 65] org-capture [apps 110 97] org-agenda [apps 107 117] ergoemacs-smart-apostrophe [apps 107 106] ergoemacs-smart-quote [apps 107 44] ergoemacs-smart-curly [apps 107 107] ergoemacs-smart-paren [apps 107 105] ergoemacs-smart-bracket [f1 96] elisp-index-search [f1 57] ergoemacs-lookup-word-definition [f1 56] ergoemacs-lookup-wikipedia [f1 55] ergoemacs-lookup-google [f1 53] man [f1 52] describe-char [f1 51] describe-key [f1 50] describe-variable [f1 49] describe-function [f1 39] ergoemacs-describe-current-theme [f1 113] help-quit [f1 118] describe-variable [f1 119] where-is [f1 116] help-with-tutorial [f1 115] describe-syntax [f1 114] info-emacs-manual [f1 80] describe-package [f1 112] finder-by-keyword [f1 110] view-emacs-news [f1 109] describe-mode [f1 108] view-lossage [f1 107] describe-key [f1 105] info [f1 104] view-hello-file [f1 103] describe-gnu-project [f1 102] describe-function [f1 101] view-echo-area-messages [f1 100] apropos-documentation [f1 99] describe-key-briefly [f1 98] describe-bindings [f1 97] apropos-command [f1 83] info-lookup-symbol [f1 76] describe-language-environment [f1 75] Info-goto-emacs-key-command-node [f1 73] describe-input-method [f1 70] Info-goto-emacs-command-node [f1 67] describe-coding-system [f1 28] describe-input-method [f1 23] describe-no-warranty [f1 20] view-emacs-todo [f1 16] view-emacs-problems [f1 15] describe-distribution [f1 14] view-emacs-news [f1 13] view-order-manuals [f1 6] view-emacs-FAQ [f1 5] view-external-packages [f1 4] view-emacs-debugging [f1 3] describe-copying [f1 1] about-emacs [f1 63] help-for-help [f1 46] display-local-help [f1 f1] help-for-help [f1 help] help-for-help [f1 8] help-for-help [8 26] ergoemacs-clean-library [8 122] ergoemacs-clean [8 96] elisp-index-search [8 57] ergoemacs-lookup-word-definition [8 56] ergoemacs-lookup-wikipedia [8 55] ergoemacs-lookup-google [8 53] man [8 52] describe-char [8 51] describe-key [8 50] describe-variable [8 49] describe-function [8 39] ergoemacs-describe-current-theme [8 113] help-quit [8 118] describe-variable [8 119] where-is [8 116] help-with-tutorial [8 115] describe-syntax [8 114] info-emacs-manual [8 80] describe-package [8 112] finder-by-keyword [8 110] view-emacs-news [8 109] describe-mode [8 108] view-lossage [8 107] describe-key [8 105] info [8 104] view-hello-file [8 103] describe-gnu-project [8 102] describe-function [8 101] view-echo-area-messages [8 100] apropos-documentation [8 99] describe-key-briefly [8 98] describe-bindings [8 97] apropos-command [8 83] info-lookup-symbol [8 76] describe-language-environment [8 75] Info-goto-emacs-key-command-node [8 73] describe-input-method [8 70] Info-goto-emacs-command-node [8 67] describe-coding-system [8 28] describe-input-method [8 23] describe-no-warranty [8 20] view-emacs-todo [8 16] view-emacs-problems [8 15] describe-distribution [8 14] view-emacs-news [8 13] view-order-manuals [8 6] view-emacs-FAQ [8 5] view-external-packages [8 4] view-emacs-debugging [8 3] describe-copying [8 1] about-emacs [8 63] help-for-help [8 46] display-local-help [8 f1] help-for-help [8 help] help-for-help [8 8] help-for-help [M-right] ergoemacs-forward-close-bracket [M-left] ergoemacs-backward-open-bracket [C-M-i] backward-paragraph [C-M-I] scroll-other-window-down [31] ergoemacs-map-undefined [11] ergoemacs-map-undefined [4] ergoemacs-map-undefined [67108896] ergoemacs-map-undefined [2] ergoemacs-map-undefined [5] ergoemacs-map-undefined [0] set-mark-command [7] keyboard-quit [9] indent-for-tab-command [10] electric-newline-and-maybe-indent [13] newline [17] quoted-insert [20] transpose-chars [21] universal-argument [28] toggle-input-method [29] abort-recursive-edit [127] delete-backward-char [C-M-print] pr-txt-fast-fire [C-print] pr-txt-fast-fire [S-print] pr-ps-mode-using-ghostscript [M-print] pr-ps-mode-using-ghostscript [print] pr-ps-fast-fire [S-mouse-3] kmacro-end-call-mouse [C-wheel-down] mwheel-scroll [S-wheel-down] mwheel-scroll [wheel-down] mwheel-scroll [C-wheel-up] mwheel-scroll [S-wheel-up] mwheel-scroll [wheel-up] mwheel-scroll [paste] clipboard-yank [copy] clipboard-kill-ring-save [cut] clipboard-kill-region [f18] clipboard-yank [f16] clipboard-kill-ring-save [f20] clipboard-kill-region [rwindow] ignore [lwindow] ignore [language-change] ignore [C-drag-n-drop] w32-drag-n-drop-other-frame [drag-n-drop] w32-drag-n-drop [f10] menu-bar-open [bottom-divider down-mouse-1] mouse-drag-mode-line [right-divider down-mouse-1] mouse-drag-vertical-line [vertical-line mouse-1] mouse-select-window [vertical-line down-mouse-1] mouse-drag-vertical-line [vertical-line C-mouse-2] mouse-split-window-vertically [vertical-scroll-bar mouse-1] scroll-bar-toolkit-scroll [vertical-scroll-bar C-mouse-2] mouse-split-window-vertically [header-line mouse-1] mouse-select-window [header-line down-mouse-1] mouse-drag-header-line [mode-line C-mouse-2] mouse-split-window-horizontally [mode-line mouse-3] mouse-delete-window [mode-line mouse-2] mouse-delete-other-windows [mode-line down-mouse-1] mouse-drag-mode-line [mode-line drag-mouse-1] mouse-select-window [mode-line mouse-1] mouse-select-window [C-down-mouse-1] mouse-buffer-menu [mouse-3] mouse-save-then-kill [mouse-2] mouse-yank-primary [triple-mouse-1] mouse-set-point [double-mouse-1] mouse-set-point [drag-mouse-1] mouse-set-region [mouse-1] mouse-set-point [down-mouse-1] mouse-drag-region [M-mouse-2] mouse-yank-secondary [M-mouse-3] mouse-secondary-save-then-kill [M-down-mouse-1] mouse-drag-secondary [M-drag-mouse-1] mouse-set-secondary [M-mouse-1] mouse-start-secondary [M-f10] toggle-frame-maximized [compose-last-chars] compose-last-chars [help 113] help-quit [help 118] describe-variable [help 119] where-is [help 116] help-with-tutorial [help 115] describe-syntax [help 114] info-emacs-manual [help 80] describe-package [help 112] finder-by-keyword [help 110] view-emacs-news [help 109] describe-mode [help 108] view-lossage [help 107] describe-key [help 52 105] info-other-window [help 105] info [help 104] view-hello-file [help 103] describe-gnu-project [help 102] describe-function [help 101] view-echo-area-messages [help 100] apropos-documentation [help 99] describe-key-briefly [help 98] describe-bindings [help 97] apropos-command [help 83] info-lookup-symbol [help 76] describe-language-environment [help 75] Info-goto-emacs-key-command-node [help 73] describe-input-method [help 70] Info-goto-emacs-command-node [help 67] describe-coding-system [help 28] describe-input-method [help 23] describe-no-warranty [help 20] view-emacs-todo [help 16] view-emacs-problems [help 15] describe-distribution [help 14] view-emacs-news [help 13] view-order-manuals [help 6] view-emacs-FAQ [help 5] view-external-packages [help 4] view-emacs-debugging [help 3] describe-copying [help 1] about-emacs [help 63] help-for-help [help 46] display-local-help [help f1] help-for-help [help help] help-for-help [help 8] help-for-help [C-M-end] end-of-defun [C-M-home] beginning-of-defun [C-M-down] down-list [C-M-up] backward-up-list [C-M-right] forward-sexp [C-M-left] backward-sexp [C-backspace] backward-kill-word [mouse-movement] ignore [deletechar] delete-forward-char [deleteline] kill-line [insertline] open-line [open] find-file [again] repeat-complex-command [redo] repeat-complex-command [undo] undo [S-insertchar] yank [C-insertchar] kill-ring-save [insertchar] overwrite-mode [insert] overwrite-mode [execute] execute-extended-command [M-begin] beginning-of-buffer-other-window [begin] beginning-of-buffer [M-end] end-of-buffer-other-window [M-prior] scroll-other-window-down [M-next] scroll-other-window [C-down] forward-paragraph [C-up] backward-paragraph [next] scroll-up-command [prior] scroll-down-command [down] next-line [right] right-char [up] previous-line [left] left-char [M-home] beginning-of-buffer-other-window [C-S-backspace] kill-whole-line [find] search-forward [67108921] digit-argument [67108920] digit-argument [67108919] digit-argument [67108918] digit-argument [67108917] digit-argument [67108916] digit-argument [67108915] digit-argument [67108914] digit-argument [67108913] digit-argument [XF86Back] previous-buffer [XF86Forward] next-buffer [delete-frame] handle-delete-frame [select-window] handle-select-window [switch-frame] handle-switch-frame)))) (:map-key -536870745) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870744) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870743) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870742) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870741) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870740) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870739) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870824) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870851 :parent (:map-key -536870819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870738) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) -536870737 (undo-tree-map) (:map-key -536870737) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -536870736) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)))) nil] ergoemacs-theme-hash [object pcache-entry "pcache-entry" 1467915332.788 7776000 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("lvl0" (:name "lvl0" :description "CUA-mode style" :components (undo-tree persistent-soft lvl0-theme) :optional-on nil :optional-off nil :options-menu nil :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") "defined-themes" ("reduction" "standard" "lvl2" "lvl1" "lvl0") "lvl1" (:name "lvl1" :description "Arrow Key Movements Only" :components (undo-tree persistent-soft lvl1-theme move-char) :optional-on nil :optional-off nil :options-menu nil :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") "lvl2" (:name "lvl2" :description "Arrow Key Movements, Moving/Deleting Words" :components (undo-tree persistent-soft lvl2-theme move-char move-word) :optional-on nil :optional-off nil :options-menu nil :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") "standard" (:name "standard" :description "Standard Ergoemacs Theme" :components (undo-tree persistent-soft standard-theme copy dired-tab dired-to-wdired execute fixed-newline help kill-line misc move-bracket move-buffer move-char move-line move-page move-paragraph move-word search select-items switch text-transform ergoemacs-remaps standard-vars) :optional-on (apps-punctuation tab-indents-region icy-reclaim apps-apps apps-toggle apps backspace-del-seq backspace-is-back fn-keys f2-edit fixed-bold-italic standard-fixed ido-remaps helm-remaps helm-find-files multiple-cursors-remaps quit apps-swap menu-bar-help menu-bar-languages menu-bar-view menu-bar-search menu-bar-edit menu-bar-file mode-line-major-mode-switch) :optional-off (guru alt-backspace-is-undo search-reg no-backspace helm-switch-sources ergoemacs-banish-shift move-and-transpose-lines move-sexp ido-prev-next-instead-of-left-right join-line save-options-on-exit isearch-arrows) :options-menu (("Menu/Apps Key" (apps apps-apps apps-punctuation apps-toggle)) ("Function Keys" (fn-keys f2-edit)) ("Helm Options" (helm-switch-sources helm-find-files)) ("Remaps" (ido-remaps helm-remaps multiple-cursors-remaps icy-reclaim)) ("Extreme ErgoEmacs" (guru no-backspace ergoemacs-banish-shift)) ("Standard Keys" (standard-fixed fixed-bold-italic quit move-and-transpose-lines alt-backspace-is-undo)) ("Keys during Key Sequence" (f2-edit apps-swap backspace-del-seq)) ("Disputed Keys" (ido-prev-next-instead-of-left-right move-sexp)) ("Extra Functionality" (join-line isearch-arrows)) ("Packages" (avy multiple-cursors expand-region)) ("Mode Line" (mode-line-major-mode-switch)) ("Ergoemacs global menus" (menu-bar-file menu-bar-edit menu-bar-search menu-bar-view menu-bar-languages menu-bar-help))) :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el") "reduction" (:name "reduction" :description "Reduce Ergoemacs keys" :based-on (quote standard) :components (undo-tree persistent-soft reduction-theme multiple-cursors avy expand-region standard-theme copy dired-tab dired-to-wdired execute fixed-newline help kill-line misc move-bracket move-buffer move-char move-line move-page move-paragraph move-word search select-items switch text-transform ergoemacs-remaps standard-vars) :optional-on (apps-punctuation tab-indents-region icy-reclaim apps-apps apps-toggle apps backspace-del-seq backspace-is-back fn-keys f2-edit fixed-bold-italic standard-fixed ido-remaps helm-remaps helm-find-files multiple-cursors-remaps quit apps-swap menu-bar-help menu-bar-languages menu-bar-view menu-bar-search menu-bar-edit menu-bar-file mode-line-major-mode-switch) :optional-off (guru alt-backspace-is-undo search-reg no-backspace helm-switch-sources ergoemacs-banish-shift move-and-transpose-lines move-sexp ido-prev-next-instead-of-left-right join-line save-options-on-exit isearch-arrows) :options-menu (("Menu/Apps Key" (apps apps-apps apps-punctuation apps-toggle)) ("Function Keys" (fn-keys f2-edit)) ("Helm Options" (helm-switch-sources helm-find-files)) ("Remaps" (ido-remaps helm-remaps multiple-cursors-remaps icy-reclaim)) ("Extreme ErgoEmacs" (guru no-backspace ergoemacs-banish-shift)) ("Standard Keys" (standard-fixed fixed-bold-italic quit move-and-transpose-lines alt-backspace-is-undo)) ("Keys during Key Sequence" (f2-edit apps-swap backspace-del-seq)) ("Disputed Keys" (ido-prev-next-instead-of-left-right move-sexp)) ("Extra Functionality" (join-line isearch-arrows)) ("Packages" (avy multiple-cursors expand-region)) ("Mode Line" (mode-line-major-mode-switch)) ("Ergoemacs global menus" (menu-bar-file menu-bar-edit menu-bar-search menu-bar-view menu-bar-languages menu-bar-help))) :file "d:/users/bercut/home/.emacs.d/ergoemacs-mode/ergoemacs-themes.el"))) nil] ergoemacs-translate--event-hash [object pcache-entry "pcache-entry" 1467915332.788 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-layout-us #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (126 96 s96 126 33 49 s49 33 64 50 s50 64 35 51 s51 35 36 52 s52 36 37 53 s53 37 94 54 s54 94 38 55 s55 38 42 56 s56 42 40 57 s57 40 41 48 s48 41 95 45 s45 95 43 61 s61 43 123 91 s91 123 125 93 s93 125 124 92 s92 124 58 59 s59 58 34 39 s39 34 60 44 s44 60 62 46 s46 62 63 47 s47 63)))) nil] ergoemacs-translate--hash [object pcache-entry "pcache-entry" 1467915332.788 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil] ergoemacs-translation-hash [object pcache-entry "pcache-entry" 1467915332.788 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:normal [cl-struct-ergoemacs-translation-struct "normal" nil nil nil nil nil nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -536870736))) (8 . ergoemacs-read-key-help) (f1 . ergoemacs-read-key-help)) (keymap) nil nil :normal nil] :ctl-to-alt (closure (ergoemacs-theme-component-hash t) nil "Ctl <-> Alt translation" (ergoemacs-translate--create :key :ctl-to-alt :name "ctl-to-alt" :description "Ctl <-> Alt translation" :text (function (lambda nil (format "<Ctl%sAlt> " (ergoemacs-key-description--unicode-char "↔" " to ")))) :meta (quote (control)) :control (quote (meta)) :meta-shift (quote (control shift)) :control-shift (quote (meta shift)) :control-hyper (quote (meta hyper)) :meta-hyper (quote (control hyper)) :control-super (quote (meta super)) :meta-super (quote (control super)) :meta-shift-hyper (quote (control shift hyper)) :control-shift-hyper (quote (meta shift hyper)) :meta-shift-super (quote (control shift super)) :control-shift-super (quote (meta shift super)) :meta-super-hyper (quote (control super hyper)) :control-super-hyper (quote (meta super hyper)) :meta-super-hyper-shift (quote (control super hyper shift)) :control-super-hyper-shift (quote (meta super hyper shift)) :modal-color "blue" :modal-always t :keymap (let ((map (make-sparse-keymap))) (define-key map [f1] (quote ergoemacs-read-key-help)) (define-key map (read-kbd-macro "M-h") (quote ergoemacs-read-key-help)) (define-key map (if (eq system-type (quote windows-nt)) [M-apps] [M-menu]) (quote ergoemacs-read-key-force-next-key-is-quoted)) (define-key map (read-kbd-macro "SPC") (quote ergoemacs-read-key-force-next-key-is-ctl)) (define-key map (read-kbd-macro "M-SPC") (quote ergoemacs-read-key-force-next-key-is-alt)) map))) :unchorded-ctl (closure (ergoemacs-theme-component-hash t) nil "Make the Ctl key sticky." (ergoemacs-translate--create :key :unchorded-ctl :name "unchorded-ctl" :description "Make the Ctl key sticky." :text "<Ctl+>" :unchorded (quote (control)) :shift (quote (control shift)) :meta (quote nil) :control (quote (meta)) :keymap (let ((map (make-sparse-keymap))) (define-key map [f1] (quote ergoemacs-read-key-help)) (define-key map (read-kbd-macro "SPC") (quote ergoemacs-read-key-force-next-key-is-quoted)) (define-key map (read-kbd-macro "M-SPC") (quote ergoemacs-read-key-force-next-key-is-alt-ctl)) (define-key map "g" (quote ergoemacs-read-key-force-next-key-is-alt)) (define-key map "G" (quote ergoemacs-read-key-force-next-key-is-alt-ctl)) map))) :unchorded-alt (closure (ergoemacs-theme-component-hash t) nil "Make the Alt key sticky." (ergoemacs-translate--create :key :unchorded-alt :name "unchorded-alt" :description "Make the Alt key sticky." :text "<Alt+>" :unchorded (quote (meta)) :shift (quote (meta shift)) :meta (quote (meta shift)) :modal-color "red" :keymap-modal (let ((map (make-sparse-keymap))) (define-key map (read-kbd-macro "<return>") (quote ergoemacs-unchorded-alt-modal)) (define-key map (read-kbd-macro "RET") (quote ergoemacs-unchorded-alt-modal)) map))))) nil] ergoemacs-breadcrumb-hash [object pcache-entry "pcache-entry" 1467915332.788 7776000 #s(hash-table size 325 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--normal-map -536870911 -536870911 ergoemacs-normal-translation-local-map ergoemacs-translate--ctl-to-alt-map -536870910 -536870910 ergoemacs-ctl-to-alt-translation-local-map ergoemacs-translate--unchorded-ctl-map -536870909 -536870909 ergoemacs-unchorded-ctl-translation-local-map ergoemacs-translate--unchorded-alt-map -536870908 -536870908 ergoemacs-unchorded-alt-translation-local-map esc-map -536870907 -536870907 esc-map mode-line-column-line-number-mode-map -536870906 -536870906 mode-line-column-line-number-mode-map describe-european-environment-map -536870905 -536870905 describe-european-environment-map ergoemacs-timing-jump-map -536870904 -536870904 ergoemacs-timing-jump-map facemenu-special-menu -536870903 -536870903 facemenu-special-menu ctl-x-map -536870902 -536870902 ctl-x-map facemenu-face-menu -536870901 -536870901 facemenu-face-menu read-expression-map -536870900 -536870900 read-expression-map special-event-map -536870899 -536870899 special-event-map search-map -536870898 -536870898 search-map completion-in-region-mode-map -536870897 -536870897 completion-in-region-mode-map x-alternatives-map -536870896 -536870896 x-alternatives-map multi-query-replace-map -536870895 -536870895 multi-query-replace-map menu-bar-line-wrapping-menu -536870894 -536870894 menu-bar-line-wrapping-menu minibuffer-local-shell-command-map -536870893 -536870893 minibuffer-local-shell-command-map edit-tab-stops-map -536870892 -536870892 edit-tab-stops-map menu-bar-showhide-scroll-bar-menu -536870891 -536870891 menu-bar-showhide-scroll-bar-menu ergoemacs-ctl-to-alt-translation-local-map -536870910 mode-line-mode-menu -536870890 -536870890 mode-line-mode-menu menu-bar-custom-menu -536870889 -536870889 menu-bar-custom-menu menu-bar-manuals-menu -536870888 -536870888 menu-bar-manuals-menu 2C-mode-map -536870887 -536870887 2C-mode-map menu-bar-tools-menu -536870886 -536870886 menu-bar-tools-menu isearch-help-map -536870885 -536870885 isearch-help-map vc-mode-line-map -536870884 -536870884 vc-mode-line-map minibuffer-inactive-mode-map -536870883 -536870883 minibuffer-inactive-mode-map button-map -536870882 -536870882 button-map setup-indian-environment-map -536870881 -536870881 setup-indian-environment-map menu-bar-ediff-menu -536870880 -536870880 menu-bar-ediff-menu facemenu-indentation-menu -536870879 -536870879 facemenu-indentation-menu minibuffer-local-map -536870878 -536870878 minibuffer-local-map ergoemacs-unchorded-alt-translation-local-map -536870908 menu-bar-file-menu -536870877 -536870877 menu-bar-files-menu global-buffers-menu-map -536870876 -536870876 global-buffers-menu-map lisp-interaction-mode-map -536870875 -536870875 lisp-interaction-mode-map setup-language-environment-map -536870874 -536870874 setup-language-environment-map messages-buffer-mode-map -536870873 -536870873 messages-buffer-mode-map 2C-minor-mode-map -536870872 -536870872 2C-minor-mode-map Custom-mode-menu -536870871 -536870871 Custom-mode-menu emacs-lisp-mode-map -536870870 -536870870 emacs-lisp-mode-map menu-bar-epatch-menu -536870869 -536870869 menu-bar-epatch-menu minibuffer-local-ns-map -536870868 -536870868 minibuffer-local-ns-map eudc-tools-menu -536870867 -536870867 eudc-tools-menu occur-mode-map -536870866 -536870866 occur-mode-map help-mode-map -536870865 -536870865 help-mode-map pr-temp-menu -536870864 -536870864 pr-temp-menu occur-edit-mode-map -536870863 -536870863 occur-edit-mode-map vc-prefix-map -536870862 -536870862 vc-prefix-map menu-bar-help-menu -536870861 -536870861 menu-bar-help-menu menu-bar-showhide-fringe-menu -536870860 -536870860 menu-bar-showhide-fringe-menu ergoemacs-translate--modal-parent-map 536870909 536870909 ergoemacs-translate--modal-parent-map facemenu-background-menu -536870859 -536870859 facemenu-background-menu tty-menu-navigation-map -536870858 -536870858 tty-menu-navigation-map menu-bar-games-menu -536870857 -536870857 menu-bar-games-menu bookmark-map -536870856 -536870856 bookmark-map custom-mode-map -536870855 -536870855 custom-mode-map widget-field-keymap -536870854 -536870854 widget-field-keymap key-translation-map -536870853 -536870853 key-translation-map special-mode-map -536870852 -536870852 special-mode-map splash-screen-keymap -536870851 -536870851 splash-screen-keymap minibuffer-local-filename-completion-map -536870850 -536870850 minibuffer-local-filename-completion-map menu-bar-search-menu -536870849 -536870849 menu-bar-search-menu ergoemacs-normal-translation-local-map -536870911 describe-language-environment-map -536870848 -536870848 describe-language-environment-map edit-abbrevs-map -536870847 -536870847 edit-abbrevs-mode-map read-passwd-map -536870846 -536870846 read-passwd-map menu-bar-ediff-misc-menu -536870845 -536870845 menu-bar-ediff-misc-menu ergoemacs-timing-component-map -536870844 -536870844 ergoemacs-timing-component-map menu-bar-i-search-menu -536870843 -536870843 menu-bar-i-search-menu menu-bar-goto-menu -536870842 -536870842 menu-bar-goto-menu setup-cyrillic-environment-map -536870841 -536870841 setup-cyrillic-environment-map goto-map -536870840 -536870840 goto-map help-map -536870839 -536870839 help-map menu-bar-files-menu -536870877 ispell-menu-map -536870838 -536870838 ispell-menu-map mode-line-minor-mode-keymap -536870837 -536870837 mode-line-minor-mode-keymap pr-interface-map -536870836 -536870836 pr-interface-map vc-menu-map -536870835 -536870835 vc-menu-map menu-bar-showhide-menu -536870834 -536870834 menu-bar-showhide-menu occur-menu-map -536870833 -536870833 occur-menu-map ctl-x-5-map -536870832 -536870832 ctl-x-5-map input-decode-map -536870831 -536870831 input-decode-map menu-bar-describe-menu -536870830 -536870830 menu-bar-describe-menu cvs-global-menu -536870829 -536870829 cvs-global-menu setup-chinese-environment-map -536870828 -536870828 setup-chinese-environment-map menu-bar-search-documentation-menu -536870827 -536870827 menu-bar-search-documentation-menu facemenu-justification-menu -536870826 -536870826 facemenu-justification-menu prog-mode-map -536870825 -536870825 prog-mode-map visual-line-mode-map -536870824 -536870824 visual-line-mode-map tabulated-list-mode-map -536870823 -536870823 tabulated-list-mode-map ergoemacs-unchorded-ctl-translation-local-map -536870909 ergoemacs-modal-ignored-keymap -536870822 -536870822 ergoemacs-modal-ignored-keymap minibuffer-local-must-match-map -536870821 -536870821 minibuffer-local-must-match-map mode-line-major-mode-keymap -536870820 -536870820 mode-line-major-mode-keymap button-buffer-map -536870819 -536870819 button-buffer-map package-menu-mode-map -536870818 -536870818 package-menu-mode-map widget-text-keymap -536870817 -536870817 widget-text-keymap facemenu-menu -536870816 -536870816 facemenu-menu local-function-key-map -536870815 -536870815 local-function-key-map universal-argument-map -536870814 -536870814 universal-argument-map text-mode-map -536870813 -536870813 text-mode-map mode-line-buffer-identification-keymap -536870812 -536870812 mode-line-buffer-identification-keymap minibuffer-local-completion-map -536870811 -536870811 minibuffer-local-completion-map facemenu-keymap -536870810 -536870810 facemenu-keymap ergoemacs-map-properties--global-map-before-ergoemacs -536870809 -536870809 ergoemacs-map-properties--global-map-before-ergoemacs minibuffer-local-isearch-map -536870808 -536870808 minibuffer-local-isearch-map lisp-mode-map -536870807 -536870807 lisp-mode-map widget-keymap -536870806 -536870806 widget-keymap custom-mode-link-map -536870805 -536870805 custom-mode-link-map Buffer-menu-mode-map -536870804 -536870804 Buffer-menu-mode-map mode-line-input-method-map -536870803 -536870803 mode-line-input-method-map indent-rigidly-map -536870802 -536870802 indent-rigidly-map narrow-map -536870801 -536870801 narrow-map menu-bar-replace-menu -536870800 -536870800 menu-bar-replace-menu describe-indian-environment-map -536870799 -536870799 describe-indian-environment-map kmacro-keymap -536870798 -536870798 kmacro-keymap menu-bar-encryption-decryption-menu -536870797 -536870797 menu-bar-encryption-decryption-menu menu-bar-edit-menu -536870796 -536870796 menu-bar-edit-menu query-replace-map -536870795 -536870795 query-replace-map edmacro-mode-map -536870794 -536870794 edmacro-mode-map lisp-mode-shared-map -536870793 -536870793 lisp-mode-shared-map ergoemacs-translate--parent-map 536870910 536870910 ergoemacs-translate--parent-map ctl-x-r-map -536870792 -536870792 ctl-x-r-map edit-abbrevs-mode-map -536870847 setup-european-environment-map -536870791 -536870791 setup-european-environment-map describe-cyrillic-environment-map -536870790 -536870790 describe-cyrillic-environment-map menu-bar-bookmark-map -536870789 -536870789 menu-bar-bookmark-map set-coding-system-map -536870788 -536870788 set-coding-system-map completion-list-mode-map -536870787 -536870787 completion-list-mode-map kmacro-step-edit-map -536870786 -536870786 kmacro-step-edit-map mule-keymap -536870785 -536870785 mule-keymap menu-bar-options-menu -536870784 -536870784 menu-bar-options-menu menu-bar-showhide-fringe-ind-menu -536870783 -536870783 menu-bar-showhide-fringe-ind-menu function-key-map -536870782 -536870782 function-key-map describe-chinese-environment-map -536870781 -536870781 describe-chinese-environment-map abbrev-map -536870780 -536870780 abbrev-map help-mode-menu -536870779 -536870779 help-mode-menu mode-line-coding-system-map -536870778 -536870778 mode-line-coding-system-map ctl-x-4-map -536870777 -536870777 ctl-x-4-map tabulated-list-sort-button-map -536870776 -536870776 tabulated-list-sort-button-map mule-menu-keymap -536870775 -536870775 mule-menu-keymap menu-bar-ediff-merge-menu -536870774 -536870774 menu-bar-ediff-merge-menu isearch-mode-map -536870773 -536870773 isearch-mode-map custom-field-keymap -536870772 -536870772 custom-field-keymap widget-key-sequence-map -536870771 -536870771 widget-key-sequence-map facemenu-foreground-menu -536870770 -536870770 facemenu-foreground-menu ergoemacs-map-properties--after-ergoemacs -536870746 -536870746 ergoemacs-map-properties--after-ergoemacs :emulation-mode-map-alists:yas--direct-keymaps:yas--direct-makefile-gmake-mode -536870745 -536870745 :emulation-mode-map-alists:yas--direct-keymaps:yas--direct-makefile-gmake-mode :minor-mode-map-alist:2C-mode -536870744 -536870744 :minor-mode-map-alist:2C-mode :minor-mode-map-alist:org-cdlatex-mode -536870743 -536870743 :minor-mode-map-alist:org-cdlatex-mode :minor-mode-map-alist:outline-minor-mode -536870742 -536870742 :minor-mode-map-alist:outline-minor-mode :minor-mode-map-alist:org-src-mode -536870741 -536870741 :minor-mode-map-alist:org-src-mode :minor-mode-map-alist:yas-minor-mode -536870740 -536870740 :minor-mode-map-alist:yas-minor-mode :minor-mode-map-alist:ido-mode -536870739 -536870739 :minor-mode-map-alist:ido-mode :minor-mode-map-alist:undo-tree-visualizer-selection-mode -536870738 -536870738 :minor-mode-map-alist:undo-tree-visualizer-selection-mode undo-tree-map -536870737 -536870737 undo-tree-map)) nil] ergoemacs-map-properties--get-or-generate-map-key [object pcache-entry "pcache-entry" 1467915332.788 7776000 -536870736 nil] ergoemacs-map-properties--before-ergoemacs [object pcache-entry "pcache-entry" 1467915332.788 7776000 nil nil] ergoemacs-map-properties--label-atoms-maps [object pcache-entry "pcache-entry" 1467915332.788 7776000 (ergoemacs-map-properties--after-ergoemacs helm-read-file-map dired-mode-map calc-mode-map eww-mode-map Info-mode-map iswitchb-mode-map compilation-mode-map helm-map comint-mode-map eshell-mode-map log-edit-mode-map browse-kill-ring-mode-map org-mode-map undo-tree-map helm-find-files-map facemenu-foreground-menu widget-key-sequence-map custom-field-keymap isearch-mode-map menu-bar-ediff-merge-menu mule-menu-keymap tabulated-list-sort-button-map ctl-x-4-map mode-line-coding-system-map help-mode-menu abbrev-map describe-chinese-environment-map function-key-map menu-bar-showhide-fringe-ind-menu menu-bar-options-menu mule-keymap kmacro-step-edit-map completion-list-mode-map set-coding-system-map menu-bar-bookmark-map describe-cyrillic-environment-map setup-european-environment-map edit-abbrevs-mode-map ctl-x-r-map ergoemacs-translate--parent-map lisp-mode-shared-map edmacro-mode-map query-replace-map menu-bar-edit-menu menu-bar-encryption-decryption-menu kmacro-keymap describe-indian-environment-map menu-bar-replace-menu narrow-map indent-rigidly-map mode-line-input-method-map Buffer-menu-mode-map custom-mode-link-map widget-keymap lisp-mode-map minibuffer-local-isearch-map ergoemacs-map-properties--global-map-before-ergoemacs facemenu-keymap minibuffer-local-completion-map mode-line-buffer-identification-keymap text-mode-map universal-argument-map local-function-key-map facemenu-menu widget-text-keymap package-menu-mode-map button-buffer-map mode-line-major-mode-keymap minibuffer-local-must-match-map ergoemacs-modal-ignored-keymap ergoemacs-unchorded-ctl-translation-local-map tabulated-list-mode-map visual-line-mode-map prog-mode-map facemenu-justification-menu menu-bar-search-documentation-menu setup-chinese-environment-map cvs-global-menu menu-bar-describe-menu input-decode-map ctl-x-5-map occur-menu-map menu-bar-showhide-menu vc-menu-map pr-interface-map mode-line-minor-mode-keymap ispell-menu-map menu-bar-files-menu help-map goto-map setup-cyrillic-environment-map menu-bar-goto-menu menu-bar-i-search-menu ergoemacs-timing-component-map menu-bar-ediff-misc-menu read-passwd-map edit-abbrevs-map describe-language-environment-map ergoemacs-normal-translation-local-map menu-bar-search-menu minibuffer-local-filename-completion-map splash-screen-keymap special-mode-map key-translation-map widget-field-keymap custom-mode-map bookmark-map menu-bar-games-menu tty-menu-navigation-map facemenu-background-menu ergoemacs-translate--modal-parent-map menu-bar-showhide-fringe-menu menu-bar-help-menu vc-prefix-map occur-edit-mode-map pr-temp-menu help-mode-map occur-mode-map eudc-tools-menu minibuffer-local-ns-map menu-bar-epatch-menu emacs-lisp-mode-map Custom-mode-menu 2C-minor-mode-map messages-buffer-mode-map setup-language-environment-map lisp-interaction-mode-map global-buffers-menu-map menu-bar-file-menu ergoemacs-unchorded-alt-translation-local-map minibuffer-local-map facemenu-indentation-menu menu-bar-ediff-menu setup-indian-environment-map button-map minibuffer-inactive-mode-map vc-mode-line-map isearch-help-map menu-bar-tools-menu 2C-mode-map menu-bar-manuals-menu menu-bar-custom-menu mode-line-mode-menu ergoemacs-ctl-to-alt-translation-local-map menu-bar-showhide-scroll-bar-menu edit-tab-stops-map minibuffer-local-shell-command-map menu-bar-line-wrapping-menu multi-query-replace-map x-alternatives-map completion-in-region-mode-map search-map special-event-map read-expression-map facemenu-face-menu ctl-x-map facemenu-special-menu ergoemacs-timing-jump-map describe-european-environment-map mode-line-column-line-number-mode-map esc-map global-map ergoemacs-translate--unchorded-alt-map ergoemacs-translate--unchorded-ctl-map ergoemacs-translate--ctl-to-alt-map ergoemacs-translate--normal-map) nil]))
  :timestamp 1467915332.977)
